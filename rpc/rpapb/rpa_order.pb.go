// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: rpa_order.proto

package rpapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmdTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUuid   string `protobuf:"bytes,1,opt,name=target_uuid,json=targetUuid,proto3" json:"target_uuid,omitempty"`
	Wid          int32  `protobuf:"varint,2,opt,name=wid,proto3" json:"wid,omitempty"`
	PlatformType int32  `protobuf:"varint,3,opt,name=platform_type,json=platformType,proto3" json:"platform_type,omitempty"`
}

func (x *CmdTradeRequest) Reset() {
	*x = CmdTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdTradeRequest) ProtoMessage() {}

func (x *CmdTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdTradeRequest.ProtoReflect.Descriptor instead.
func (*CmdTradeRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{0}
}

func (x *CmdTradeRequest) GetTargetUuid() string {
	if x != nil {
		return x.TargetUuid
	}
	return ""
}

func (x *CmdTradeRequest) GetWid() int32 {
	if x != nil {
		return x.Wid
	}
	return 0
}

func (x *CmdTradeRequest) GetPlatformType() int32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

type ConfigDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfigDestroyRequest) Reset() {
	*x = ConfigDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDestroyRequest) ProtoMessage() {}

func (x *ConfigDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDestroyRequest.ProtoReflect.Descriptor instead.
func (*ConfigDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ConfigListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ConfigListRequest) Reset() {
	*x = ConfigListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigListRequest) ProtoMessage() {}

func (x *ConfigListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigListRequest.ProtoReflect.Descriptor instead.
func (*ConfigListRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ConfigListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ConfigResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ConfigListResponse) Reset() {
	*x = ConfigListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigListResponse) ProtoMessage() {}

func (x *ConfigListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigListResponse.ProtoReflect.Descriptor instead.
func (*ConfigListResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigListResponse) GetResults() []*ConfigResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ConfigListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters     string           `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Type        int32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Title       *string          `protobuf:"bytes,4,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content     *string          `protobuf:"bytes,5,opt,name=content,proto3,oneof" json:"content,omitempty"`
	JsonContent *structpb.Struct `protobuf:"bytes,6,opt,name=json_content,json=jsonContent,proto3,oneof" json:"json_content,omitempty"`
	Remark      *string          `protobuf:"bytes,7,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ConfigRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConfigRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ConfigRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ConfigRequest) GetJsonContent() *structpb.Struct {
	if x != nil {
		return x.JsonContent
	}
	return nil
}

func (x *ConfigRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeName    string           `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Type        int32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Title       *string          `protobuf:"bytes,4,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content     *string          `protobuf:"bytes,5,opt,name=content,proto3,oneof" json:"content,omitempty"`
	JsonContent *structpb.Struct `protobuf:"bytes,6,opt,name=json_content,json=jsonContent,proto3,oneof" json:"json_content,omitempty"`
	Remark      *string          `protobuf:"bytes,7,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	UpdateTime  string           `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ConfigResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConfigResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ConfigResponse) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ConfigResponse) GetJsonContent() *structpb.Struct {
	if x != nil {
		return x.JsonContent
	}
	return nil
}

func (x *ConfigResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ConfigResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ConfigSkuDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfigSkuDestroyRequest) Reset() {
	*x = ConfigSkuDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSkuDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSkuDestroyRequest) ProtoMessage() {}

func (x *ConfigSkuDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSkuDestroyRequest.ProtoReflect.Descriptor instead.
func (*ConfigSkuDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigSkuDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ConfigSkuListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ConfigSkuListRequest) Reset() {
	*x = ConfigSkuListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSkuListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSkuListRequest) ProtoMessage() {}

func (x *ConfigSkuListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSkuListRequest.ProtoReflect.Descriptor instead.
func (*ConfigSkuListRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigSkuListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ConfigSkuListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ConfigSkuResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ConfigSkuListResponse) Reset() {
	*x = ConfigSkuListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSkuListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSkuListResponse) ProtoMessage() {}

func (x *ConfigSkuListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSkuListResponse.ProtoReflect.Descriptor instead.
func (*ConfigSkuListResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigSkuListResponse) GetResults() []*ConfigSkuResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ConfigSkuListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ConfigSkuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ShopNo  string  `protobuf:"bytes,3,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	SpecNo  string  `protobuf:"bytes,5,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	GoodsNo *string `protobuf:"bytes,6,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	IsValid *bool   `protobuf:"varint,7,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
	PlatSku string  `protobuf:"bytes,8,opt,name=plat_sku,json=platSku,proto3" json:"plat_sku,omitempty"`
}

func (x *ConfigSkuRequest) Reset() {
	*x = ConfigSkuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSkuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSkuRequest) ProtoMessage() {}

func (x *ConfigSkuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSkuRequest.ProtoReflect.Descriptor instead.
func (*ConfigSkuRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigSkuRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigSkuRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ConfigSkuRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *ConfigSkuRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *ConfigSkuRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ConfigSkuRequest) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *ConfigSkuRequest) GetPlatSku() string {
	if x != nil {
		return x.PlatSku
	}
	return ""
}

type ConfigSkuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShopNo     string            `protobuf:"bytes,2,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	SpecNo     string            `protobuf:"bytes,4,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	GoodsNo    *string           `protobuf:"bytes,5,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	IsValid    *bool             `protobuf:"varint,6,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
	UpdateTime string            `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Product    *ProdCodeResponse `protobuf:"bytes,8,opt,name=product,proto3" json:"product,omitempty"`
	PlatSku    string            `protobuf:"bytes,9,opt,name=plat_sku,json=platSku,proto3" json:"plat_sku,omitempty"`
}

func (x *ConfigSkuResponse) Reset() {
	*x = ConfigSkuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSkuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSkuResponse) ProtoMessage() {}

func (x *ConfigSkuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSkuResponse.ProtoReflect.Descriptor instead.
func (*ConfigSkuResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigSkuResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigSkuResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *ConfigSkuResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *ConfigSkuResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ConfigSkuResponse) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *ConfigSkuResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ConfigSkuResponse) GetProduct() *ProdCodeResponse {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ConfigSkuResponse) GetPlatSku() string {
	if x != nil {
		return x.PlatSku
	}
	return ""
}

type ConfigSkuUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ShopNo               string   `protobuf:"bytes,4,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	SpecNo               string   `protobuf:"bytes,6,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	IsValid              *bool    `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
	PlatSku              string   `protobuf:"bytes,9,opt,name=plat_sku,json=platSku,proto3" json:"plat_sku,omitempty"`
}

func (x *ConfigSkuUpdateRequest) Reset() {
	*x = ConfigSkuUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSkuUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSkuUpdateRequest) ProtoMessage() {}

func (x *ConfigSkuUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSkuUpdateRequest.ProtoReflect.Descriptor instead.
func (*ConfigSkuUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigSkuUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigSkuUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ConfigSkuUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ConfigSkuUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *ConfigSkuUpdateRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *ConfigSkuUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ConfigSkuUpdateRequest) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *ConfigSkuUpdateRequest) GetPlatSku() string {
	if x != nil {
		return x.PlatSku
	}
	return ""
}

type ConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string           `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string         `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Type                 int32            `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Title                *string          `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content              *string          `protobuf:"bytes,6,opt,name=content,proto3,oneof" json:"content,omitempty"`
	JsonContent          *structpb.Struct `protobuf:"bytes,7,opt,name=json_content,json=jsonContent,proto3,oneof" json:"json_content,omitempty"`
	Remark               *string          `protobuf:"bytes,8,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *ConfigUpdateRequest) Reset() {
	*x = ConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpdateRequest) ProtoMessage() {}

func (x *ConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*ConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ConfigUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ConfigUpdateRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConfigUpdateRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ConfigUpdateRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ConfigUpdateRequest) GetJsonContent() *structpb.Struct {
	if x != nil {
		return x.JsonContent
	}
	return nil
}

func (x *ConfigUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type LabelNumberValueListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LabelNumberValueListResponse) Reset() {
	*x = LabelNumberValueListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueListResponse) ProtoMessage() {}

func (x *LabelNumberValueListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueListResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueListResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{13}
}

func (x *LabelNumberValueListResponse) GetResults() []*LabelNumberValueResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *LabelNumberValueListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LabelNumberValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label *string `protobuf:"bytes,2,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Count *int32  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *LabelNumberValueResponse) Reset() {
	*x = LabelNumberValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueResponse) ProtoMessage() {}

func (x *LabelNumberValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{14}
}

func (x *LabelNumberValueResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LabelNumberValueResponse) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *LabelNumberValueResponse) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type OptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderTradeStatus   []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=order_trade_status,json=orderTradeStatus,proto3" json:"order_trade_status,omitempty"`
	OrderDeliveryTerm  []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=order_delivery_term,json=orderDeliveryTerm,proto3" json:"order_delivery_term,omitempty"`
	OrderPayStatus     []*LabelNumberValueResponse `protobuf:"bytes,3,rep,name=order_pay_status,json=orderPayStatus,proto3" json:"order_pay_status,omitempty"`
	OrderRpaStatus     []*LabelNumberValueResponse `protobuf:"bytes,4,rep,name=order_rpa_status,json=orderRpaStatus,proto3" json:"order_rpa_status,omitempty"`
	DetailStatus       []*LabelNumberValueResponse `protobuf:"bytes,5,rep,name=detail_status,json=detailStatus,proto3" json:"detail_status,omitempty"`
	DetailRefundStatus []*LabelNumberValueResponse `protobuf:"bytes,6,rep,name=detail_refund_status,json=detailRefundStatus,proto3" json:"detail_refund_status,omitempty"`
	ConfigType         []*LabelNumberValueResponse `protobuf:"bytes,7,rep,name=config_type,json=configType,proto3" json:"config_type,omitempty"`
}

func (x *OptionsResponse) Reset() {
	*x = OptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionsResponse) ProtoMessage() {}

func (x *OptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionsResponse.ProtoReflect.Descriptor instead.
func (*OptionsResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{15}
}

func (x *OptionsResponse) GetOrderTradeStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.OrderTradeStatus
	}
	return nil
}

func (x *OptionsResponse) GetOrderDeliveryTerm() []*LabelNumberValueResponse {
	if x != nil {
		return x.OrderDeliveryTerm
	}
	return nil
}

func (x *OptionsResponse) GetOrderPayStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.OrderPayStatus
	}
	return nil
}

func (x *OptionsResponse) GetOrderRpaStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.OrderRpaStatus
	}
	return nil
}

func (x *OptionsResponse) GetDetailStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.DetailStatus
	}
	return nil
}

func (x *OptionsResponse) GetDetailRefundStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.DetailRefundStatus
	}
	return nil
}

func (x *OptionsResponse) GetConfigType() []*LabelNumberValueResponse {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

type OrderDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrderDestroyRequest) Reset() {
	*x = OrderDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDestroyRequest) ProtoMessage() {}

func (x *OrderDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDestroyRequest.ProtoReflect.Descriptor instead.
func (*OrderDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{16}
}

func (x *OrderDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Oid           string  `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	Num           int32   `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,6,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,7,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,8,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	Status        *int32  `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	SpecNo        string  `protobuf:"bytes,10,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	GoodsName     *string `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,12,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	RefundStatus  *int32  `protobuf:"varint,13,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	PlatSku       *string `protobuf:"bytes,14,opt,name=plat_sku,json=platSku,proto3,oneof" json:"plat_sku,omitempty"`
	OriginData    *string `protobuf:"bytes,15,opt,name=origin_data,json=originData,proto3,oneof" json:"origin_data,omitempty"`
	Order         int32   `protobuf:"varint,16,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderDetailRequest) Reset() {
	*x = OrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailRequest) ProtoMessage() {}

func (x *OrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailRequest.ProtoReflect.Descriptor instead.
func (*OrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{17}
}

func (x *OrderDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderDetailRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *OrderDetailRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *OrderDetailRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *OrderDetailRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderDetailRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *OrderDetailRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *OrderDetailRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *OrderDetailRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *OrderDetailRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *OrderDetailRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *OrderDetailRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *OrderDetailRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *OrderDetailRequest) GetPlatSku() string {
	if x != nil && x.PlatSku != nil {
		return *x.PlatSku
	}
	return ""
}

func (x *OrderDetailRequest) GetOriginData() string {
	if x != nil && x.OriginData != nil {
		return *x.OriginData
	}
	return ""
}

func (x *OrderDetailRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type OrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusName       string            `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	RefundStatusName string            `protobuf:"bytes,3,opt,name=refund_status_name,json=refundStatusName,proto3" json:"refund_status_name,omitempty"`
	Product          *ProdCodeResponse `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`
	Oid              string            `protobuf:"bytes,5,opt,name=oid,proto3" json:"oid,omitempty"`
	Num              int32             `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	Price            float64           `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount     float64           `protobuf:"fixed64,8,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount         float64           `protobuf:"fixed64,9,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount    float64           `protobuf:"fixed64,10,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	Status           *int32            `protobuf:"varint,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	SpecNo           string            `protobuf:"bytes,12,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	GoodsName        *string           `protobuf:"bytes,13,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo          *string           `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	RefundStatus     *int32            `protobuf:"varint,15,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	PlatSku          *string           `protobuf:"bytes,16,opt,name=plat_sku,json=platSku,proto3,oneof" json:"plat_sku,omitempty"`
	OriginData       *string           `protobuf:"bytes,17,opt,name=origin_data,json=originData,proto3,oneof" json:"origin_data,omitempty"`
	CreateTime       string            `protobuf:"bytes,18,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       string            `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Order            int32             `protobuf:"varint,20,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderDetailResponse) Reset() {
	*x = OrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailResponse) ProtoMessage() {}

func (x *OrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailResponse.ProtoReflect.Descriptor instead.
func (*OrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{18}
}

func (x *OrderDetailResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderDetailResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *OrderDetailResponse) GetRefundStatusName() string {
	if x != nil {
		return x.RefundStatusName
	}
	return ""
}

func (x *OrderDetailResponse) GetProduct() *ProdCodeResponse {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *OrderDetailResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *OrderDetailResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *OrderDetailResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderDetailResponse) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *OrderDetailResponse) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *OrderDetailResponse) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *OrderDetailResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *OrderDetailResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *OrderDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *OrderDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *OrderDetailResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *OrderDetailResponse) GetPlatSku() string {
	if x != nil && x.PlatSku != nil {
		return *x.PlatSku
	}
	return ""
}

func (x *OrderDetailResponse) GetOriginData() string {
	if x != nil && x.OriginData != nil {
		return *x.OriginData
	}
	return ""
}

func (x *OrderDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OrderDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *OrderDetailResponse) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type OrderDetailUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string                `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string              `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Tid                  string                `protobuf:"bytes,4,opt,name=tid,proto3" json:"tid,omitempty"`
	GoodsCount           int32                 `protobuf:"varint,5,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount          *float64              `protobuf:"fixed64,6,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TradeStatus          *int32                `protobuf:"varint,7,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	TradeTime            string                `protobuf:"bytes,8,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	DeliveryTerm         *int32                `protobuf:"varint,9,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick            string                `protobuf:"bytes,10,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile          *string               `protobuf:"bytes,11,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage         *string               `protobuf:"bytes,12,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	ShopNo               string                `protobuf:"bytes,13,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	WarehouseNo          string                `protobuf:"bytes,14,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	PayStatus            *int32                `protobuf:"varint,15,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime              *string               `protobuf:"bytes,16,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	ReceiverName         *string               `protobuf:"bytes,17,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince     *string               `protobuf:"bytes,18,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *string               `protobuf:"bytes,19,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *string               `protobuf:"bytes,20,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string               `protobuf:"bytes,21,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string               `protobuf:"bytes,22,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount           *float64              `protobuf:"fixed64,23,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	CodAmount            *float64              `protobuf:"fixed64,24,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	OtherAmount          *float64              `protobuf:"fixed64,25,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee            *float64              `protobuf:"fixed64,26,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                 *float64              `protobuf:"fixed64,27,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SellerMemo           *string               `protobuf:"bytes,28,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	RpaStatus            int32                 `protobuf:"varint,29,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo              *string               `protobuf:"bytes,30,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	OrderDetails         []*OrderDetailRequest `protobuf:"bytes,31,rep,name=order_details,json=orderDetails,proto3" json:"order_details,omitempty"`
	OrderLogs            []*OrderLogRequest    `protobuf:"bytes,32,rep,name=order_logs,json=orderLogs,proto3" json:"order_logs,omitempty"`
	PlatTradeType        *string               `protobuf:"bytes,33,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
}

func (x *OrderDetailUpdateRequest) Reset() {
	*x = OrderDetailUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetailUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailUpdateRequest) ProtoMessage() {}

func (x *OrderDetailUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailUpdateRequest.ProtoReflect.Descriptor instead.
func (*OrderDetailUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{19}
}

func (x *OrderDetailUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *OrderDetailUpdateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *OrderDetailUpdateRequest) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *OrderDetailUpdateRequest) GetOrderDetails() []*OrderDetailRequest {
	if x != nil {
		return x.OrderDetails
	}
	return nil
}

func (x *OrderDetailUpdateRequest) GetOrderLogs() []*OrderLogRequest {
	if x != nil {
		return x.OrderLogs
	}
	return nil
}

func (x *OrderDetailUpdateRequest) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

type OrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters          string                `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Tid              string                `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	GoodsCount       int32                 `protobuf:"varint,4,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount      *float64              `protobuf:"fixed64,5,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TradeStatus      *int32                `protobuf:"varint,6,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	TradeTime        string                `protobuf:"bytes,7,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	DeliveryTerm     *int32                `protobuf:"varint,8,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick        string                `protobuf:"bytes,9,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile      *string               `protobuf:"bytes,10,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage     *string               `protobuf:"bytes,11,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	ShopNo           string                `protobuf:"bytes,12,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	WarehouseNo      string                `protobuf:"bytes,13,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	PayStatus        *int32                `protobuf:"varint,14,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string               `protobuf:"bytes,15,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	ReceiverName     *string               `protobuf:"bytes,16,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string               `protobuf:"bytes,17,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string               `protobuf:"bytes,18,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string               `protobuf:"bytes,19,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string               `protobuf:"bytes,20,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string               `protobuf:"bytes,21,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount       *float64              `protobuf:"fixed64,22,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	CodAmount        *float64              `protobuf:"fixed64,23,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	OtherAmount      *float64              `protobuf:"fixed64,24,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64              `protobuf:"fixed64,25,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid             *float64              `protobuf:"fixed64,26,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SellerMemo       *string               `protobuf:"bytes,27,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	RpaStatus        int32                 `protobuf:"varint,28,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo          *string               `protobuf:"bytes,29,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	OrderDetails     []*OrderDetailRequest `protobuf:"bytes,30,rep,name=order_details,json=orderDetails,proto3" json:"order_details,omitempty"`
	OrderLogs        []*OrderLogRequest    `protobuf:"bytes,31,rep,name=order_logs,json=orderLogs,proto3" json:"order_logs,omitempty"`
	PlatTradeType    *string               `protobuf:"bytes,32,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
}

func (x *OrderListRequest) Reset() {
	*x = OrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderListRequest) ProtoMessage() {}

func (x *OrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderListRequest.ProtoReflect.Descriptor instead.
func (*OrderListRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{20}
}

func (x *OrderListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *OrderListRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *OrderListRequest) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *OrderListRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *OrderListRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *OrderListRequest) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *OrderListRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *OrderListRequest) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *OrderListRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *OrderListRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *OrderListRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *OrderListRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *OrderListRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *OrderListRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *OrderListRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *OrderListRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *OrderListRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *OrderListRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *OrderListRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *OrderListRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *OrderListRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *OrderListRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *OrderListRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *OrderListRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *OrderListRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *OrderListRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *OrderListRequest) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *OrderListRequest) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *OrderListRequest) GetOrderDetails() []*OrderDetailRequest {
	if x != nil {
		return x.OrderDetails
	}
	return nil
}

func (x *OrderListRequest) GetOrderLogs() []*OrderLogRequest {
	if x != nil {
		return x.OrderLogs
	}
	return nil
}

func (x *OrderListRequest) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

type OrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *OrderListResponse) Reset() {
	*x = OrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderListResponse) ProtoMessage() {}

func (x *OrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderListResponse.ProtoReflect.Descriptor instead.
func (*OrderListResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{21}
}

func (x *OrderListResponse) GetResults() []*OrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *OrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type OrderLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters string `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Order   *int64 `protobuf:"varint,4,opt,name=order,proto3,oneof" json:"order,omitempty"`
	Refund  *int64 `protobuf:"varint,5,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
}

func (x *OrderLogRequest) Reset() {
	*x = OrderLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLogRequest) ProtoMessage() {}

func (x *OrderLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLogRequest.ProtoReflect.Descriptor instead.
func (*OrderLogRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{22}
}

func (x *OrderLogRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderLogRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *OrderLogRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OrderLogRequest) GetOrder() int64 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *OrderLogRequest) GetRefund() int64 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

type OrderLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content    string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Order      *int64 `protobuf:"varint,4,opt,name=order,proto3,oneof" json:"order,omitempty"`
	Refund     *int64 `protobuf:"varint,5,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
}

func (x *OrderLogResponse) Reset() {
	*x = OrderLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLogResponse) ProtoMessage() {}

func (x *OrderLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLogResponse.ProtoReflect.Descriptor instead.
func (*OrderLogResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{23}
}

func (x *OrderLogResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderLogResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OrderLogResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OrderLogResponse) GetOrder() int64 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *OrderLogResponse) GetRefund() int64 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

type OrderPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string                `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string              `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Tid                  string                `protobuf:"bytes,4,opt,name=tid,proto3" json:"tid,omitempty"`
	GoodsCount           int32                 `protobuf:"varint,5,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount          *float64              `protobuf:"fixed64,6,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TradeStatus          *int32                `protobuf:"varint,7,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	TradeTime            string                `protobuf:"bytes,8,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	DeliveryTerm         *int32                `protobuf:"varint,9,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick            string                `protobuf:"bytes,10,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile          *string               `protobuf:"bytes,11,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage         *string               `protobuf:"bytes,12,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	ShopNo               string                `protobuf:"bytes,13,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	WarehouseNo          string                `protobuf:"bytes,14,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	PayStatus            *int32                `protobuf:"varint,15,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime              *string               `protobuf:"bytes,16,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	ReceiverName         *string               `protobuf:"bytes,17,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince     *string               `protobuf:"bytes,18,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *string               `protobuf:"bytes,19,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *string               `protobuf:"bytes,20,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string               `protobuf:"bytes,21,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string               `protobuf:"bytes,22,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount           *float64              `protobuf:"fixed64,23,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	CodAmount            *float64              `protobuf:"fixed64,24,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	OtherAmount          *float64              `protobuf:"fixed64,25,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee            *float64              `protobuf:"fixed64,26,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                 *float64              `protobuf:"fixed64,27,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SellerMemo           *string               `protobuf:"bytes,28,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	RpaStatus            int32                 `protobuf:"varint,29,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo              *string               `protobuf:"bytes,30,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	OrderDetails         []*OrderDetailRequest `protobuf:"bytes,31,rep,name=order_details,json=orderDetails,proto3" json:"order_details,omitempty"`
	OrderLogs            []*OrderLogRequest    `protobuf:"bytes,32,rep,name=order_logs,json=orderLogs,proto3" json:"order_logs,omitempty"`
	PlatTradeType        *string               `protobuf:"bytes,33,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
}

func (x *OrderPartialUpdateRequest) Reset() {
	*x = OrderPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPartialUpdateRequest) ProtoMessage() {}

func (x *OrderPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*OrderPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{24}
}

func (x *OrderPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *OrderPartialUpdateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *OrderPartialUpdateRequest) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *OrderPartialUpdateRequest) GetOrderDetails() []*OrderDetailRequest {
	if x != nil {
		return x.OrderDetails
	}
	return nil
}

func (x *OrderPartialUpdateRequest) GetOrderLogs() []*OrderLogRequest {
	if x != nil {
		return x.OrderLogs
	}
	return nil
}

func (x *OrderPartialUpdateRequest) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters          string                `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Tid              string                `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	GoodsCount       int32                 `protobuf:"varint,4,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount      *float64              `protobuf:"fixed64,5,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TradeStatus      *int32                `protobuf:"varint,6,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	TradeTime        string                `protobuf:"bytes,7,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	DeliveryTerm     *int32                `protobuf:"varint,8,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick        string                `protobuf:"bytes,9,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile      *string               `protobuf:"bytes,10,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage     *string               `protobuf:"bytes,11,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	ShopNo           string                `protobuf:"bytes,12,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	WarehouseNo      string                `protobuf:"bytes,13,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	PayStatus        *int32                `protobuf:"varint,14,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string               `protobuf:"bytes,15,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	ReceiverName     *string               `protobuf:"bytes,16,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string               `protobuf:"bytes,17,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string               `protobuf:"bytes,18,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string               `protobuf:"bytes,19,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string               `protobuf:"bytes,20,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string               `protobuf:"bytes,21,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount       *float64              `protobuf:"fixed64,22,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	CodAmount        *float64              `protobuf:"fixed64,23,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	OtherAmount      *float64              `protobuf:"fixed64,24,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64              `protobuf:"fixed64,25,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid             *float64              `protobuf:"fixed64,26,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SellerMemo       *string               `protobuf:"bytes,27,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	RpaStatus        int32                 `protobuf:"varint,28,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo          *string               `protobuf:"bytes,29,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	OrderDetails     []*OrderDetailRequest `protobuf:"bytes,30,rep,name=order_details,json=orderDetails,proto3" json:"order_details,omitempty"`
	OrderLogs        []*OrderLogRequest    `protobuf:"bytes,31,rep,name=order_logs,json=orderLogs,proto3" json:"order_logs,omitempty"`
	PlatTradeType    *string               `protobuf:"bytes,32,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{25}
}

func (x *OrderRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *OrderRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *OrderRequest) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *OrderRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *OrderRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *OrderRequest) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *OrderRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *OrderRequest) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *OrderRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *OrderRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *OrderRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *OrderRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *OrderRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *OrderRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *OrderRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *OrderRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *OrderRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *OrderRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *OrderRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *OrderRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *OrderRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *OrderRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *OrderRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *OrderRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *OrderRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *OrderRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *OrderRequest) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *OrderRequest) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *OrderRequest) GetOrderDetails() []*OrderDetailRequest {
	if x != nil {
		return x.OrderDetails
	}
	return nil
}

func (x *OrderRequest) GetOrderLogs() []*OrderLogRequest {
	if x != nil {
		return x.OrderLogs
	}
	return nil
}

func (x *OrderRequest) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

type OrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeStatusName  string                 `protobuf:"bytes,2,opt,name=trade_status_name,json=tradeStatusName,proto3" json:"trade_status_name,omitempty"`
	DeliveryTermName string                 `protobuf:"bytes,3,opt,name=delivery_term_name,json=deliveryTermName,proto3" json:"delivery_term_name,omitempty"`
	PayStatusName    string                 `protobuf:"bytes,4,opt,name=pay_status_name,json=payStatusName,proto3" json:"pay_status_name,omitempty"`
	RpaStatusName    string                 `protobuf:"bytes,5,opt,name=rpa_status_name,json=rpaStatusName,proto3" json:"rpa_status_name,omitempty"`
	Tid              string                 `protobuf:"bytes,6,opt,name=tid,proto3" json:"tid,omitempty"`
	GoodsCount       int32                  `protobuf:"varint,7,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	GoodsAmount      *float64               `protobuf:"fixed64,8,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	TradeStatus      *int32                 `protobuf:"varint,9,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	TradeTime        string                 `protobuf:"bytes,10,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	DeliveryTerm     *int32                 `protobuf:"varint,11,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick        string                 `protobuf:"bytes,12,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile      *string                `protobuf:"bytes,13,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage     *string                `protobuf:"bytes,14,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	ShopNo           string                 `protobuf:"bytes,15,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	WarehouseNo      string                 `protobuf:"bytes,16,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	PayStatus        *int32                 `protobuf:"varint,17,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string                `protobuf:"bytes,18,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	ReceiverName     *string                `protobuf:"bytes,19,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string                `protobuf:"bytes,20,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string                `protobuf:"bytes,21,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string                `protobuf:"bytes,22,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string                `protobuf:"bytes,23,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string                `protobuf:"bytes,24,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount       *float64               `protobuf:"fixed64,25,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	CodAmount        *float64               `protobuf:"fixed64,26,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	OtherAmount      *float64               `protobuf:"fixed64,27,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64               `protobuf:"fixed64,28,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid             *float64               `protobuf:"fixed64,29,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	SellerMemo       *string                `protobuf:"bytes,30,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	RpaStatus        int32                  `protobuf:"varint,31,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo          *string                `protobuf:"bytes,32,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	CreateTime       string                 `protobuf:"bytes,33,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       string                 `protobuf:"bytes,34,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	OrderDetails     []*OrderDetailResponse `protobuf:"bytes,35,rep,name=order_details,json=orderDetails,proto3" json:"order_details,omitempty"`
	OrderLogs        []*OrderLogResponse    `protobuf:"bytes,36,rep,name=order_logs,json=orderLogs,proto3" json:"order_logs,omitempty"`
	PlatTradeType    *string                `protobuf:"bytes,37,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{26}
}

func (x *OrderResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderResponse) GetTradeStatusName() string {
	if x != nil {
		return x.TradeStatusName
	}
	return ""
}

func (x *OrderResponse) GetDeliveryTermName() string {
	if x != nil {
		return x.DeliveryTermName
	}
	return ""
}

func (x *OrderResponse) GetPayStatusName() string {
	if x != nil {
		return x.PayStatusName
	}
	return ""
}

func (x *OrderResponse) GetRpaStatusName() string {
	if x != nil {
		return x.RpaStatusName
	}
	return ""
}

func (x *OrderResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *OrderResponse) GetGoodsCount() int32 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *OrderResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *OrderResponse) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *OrderResponse) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *OrderResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *OrderResponse) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *OrderResponse) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *OrderResponse) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *OrderResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *OrderResponse) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *OrderResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *OrderResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *OrderResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *OrderResponse) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *OrderResponse) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *OrderResponse) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *OrderResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *OrderResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *OrderResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *OrderResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *OrderResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *OrderResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *OrderResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *OrderResponse) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *OrderResponse) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *OrderResponse) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *OrderResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OrderResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *OrderResponse) GetOrderDetails() []*OrderDetailResponse {
	if x != nil {
		return x.OrderDetails
	}
	return nil
}

func (x *OrderResponse) GetOrderLogs() []*OrderLogResponse {
	if x != nil {
		return x.OrderLogs
	}
	return nil
}

func (x *OrderResponse) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

type OrderRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrderRetrieveRequest) Reset() {
	*x = OrderRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRetrieveRequest) ProtoMessage() {}

func (x *OrderRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRetrieveRequest.ProtoReflect.Descriptor instead.
func (*OrderRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{27}
}

func (x *OrderRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProdCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdModel       string   `protobuf:"bytes,2,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor       string   `protobuf:"bytes,3,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode        string   `protobuf:"bytes,4,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode     string   `protobuf:"bytes,5,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode      *string  `protobuf:"bytes,6,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost        *float32 `protobuf:"fixed32,7,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice       *float32 `protobuf:"fixed32,8,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdImage       *string  `protobuf:"bytes,9,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	ProdLength      *float32 `protobuf:"fixed32,10,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth       *float32 `protobuf:"fixed32,11,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight      *float32 `protobuf:"fixed32,12,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight *float32 `protobuf:"fixed32,13,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle   *string  `protobuf:"bytes,14,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription *string  `protobuf:"bytes,15,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief       *string  `protobuf:"bytes,16,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	IsValid         bool     `protobuf:"varint,17,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Renew           *int32   `protobuf:"varint,18,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair          *int32   `protobuf:"varint,19,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	CreateTime      string   `protobuf:"bytes,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string   `protobuf:"bytes,21,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Bindable        bool     `protobuf:"varint,22,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable    bool     `protobuf:"varint,23,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *ProdCodeResponse) Reset() {
	*x = ProdCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdCodeResponse) ProtoMessage() {}

func (x *ProdCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdCodeResponse.ProtoReflect.Descriptor instead.
func (*ProdCodeResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{28}
}

func (x *ProdCodeResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdCodeResponse) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *ProdCodeResponse) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProdCodeResponse) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ProdCodeResponse) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *ProdCodeResponse) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *ProdCodeResponse) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *ProdCodeResponse) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *ProdCodeResponse) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *ProdCodeResponse) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *ProdCodeResponse) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *ProdCodeResponse) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *ProdCodeResponse) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *ProdCodeResponse) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *ProdCodeResponse) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *ProdCodeResponse) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *ProdCodeResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdCodeResponse) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *ProdCodeResponse) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *ProdCodeResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProdCodeResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProdCodeResponse) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ProdCodeResponse) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type RefundDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters     string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Oid         string  `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	Num         int32   `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	GoodsName   *string `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	PlatSku     *string `protobuf:"bytes,6,opt,name=plat_sku,json=platSku,proto3,oneof" json:"plat_sku,omitempty"`
	SpecNo      *string `protobuf:"bytes,7,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	Refund      int32   `protobuf:"varint,8,opt,name=refund,proto3" json:"refund,omitempty"`
	OrderDetail *int64  `protobuf:"varint,9,opt,name=order_detail,json=orderDetail,proto3,oneof" json:"order_detail,omitempty"`
}

func (x *RefundDetailRequest) Reset() {
	*x = RefundDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundDetailRequest) ProtoMessage() {}

func (x *RefundDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundDetailRequest.ProtoReflect.Descriptor instead.
func (*RefundDetailRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{29}
}

func (x *RefundDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundDetailRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundDetailRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *RefundDetailRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RefundDetailRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundDetailRequest) GetPlatSku() string {
	if x != nil && x.PlatSku != nil {
		return *x.PlatSku
	}
	return ""
}

func (x *RefundDetailRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RefundDetailRequest) GetRefund() int32 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *RefundDetailRequest) GetOrderDetail() int64 {
	if x != nil && x.OrderDetail != nil {
		return *x.OrderDetail
	}
	return 0
}

type RefundDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Product     *ProdCodeResponse `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	Oid         string            `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	Num         int32             `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	GoodsName   *string           `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	PlatSku     *string           `protobuf:"bytes,6,opt,name=plat_sku,json=platSku,proto3,oneof" json:"plat_sku,omitempty"`
	SpecNo      *string           `protobuf:"bytes,7,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	CreateTime  string            `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  string            `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Refund      int32             `protobuf:"varint,10,opt,name=refund,proto3" json:"refund,omitempty"`
	OrderDetail *int64            `protobuf:"varint,11,opt,name=order_detail,json=orderDetail,proto3,oneof" json:"order_detail,omitempty"`
}

func (x *RefundDetailResponse) Reset() {
	*x = RefundDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundDetailResponse) ProtoMessage() {}

func (x *RefundDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundDetailResponse.ProtoReflect.Descriptor instead.
func (*RefundDetailResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{30}
}

func (x *RefundDetailResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundDetailResponse) GetProduct() *ProdCodeResponse {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *RefundDetailResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *RefundDetailResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RefundDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *RefundDetailResponse) GetPlatSku() string {
	if x != nil && x.PlatSku != nil {
		return *x.PlatSku
	}
	return ""
}

func (x *RefundDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *RefundDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundDetailResponse) GetRefund() int32 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *RefundDetailResponse) GetOrderDetail() int64 {
	if x != nil && x.OrderDetail != nil {
		return *x.OrderDetail
	}
	return 0
}

type RefundListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *RefundListRequest) Reset() {
	*x = RefundListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundListRequest) ProtoMessage() {}

func (x *RefundListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundListRequest.ProtoReflect.Descriptor instead.
func (*RefundListRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{31}
}

func (x *RefundListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type RefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RefundResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RefundListResponse) Reset() {
	*x = RefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundListResponse) ProtoMessage() {}

func (x *RefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundListResponse.ProtoReflect.Descriptor instead.
func (*RefundListResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{32}
}

func (x *RefundListResponse) GetResults() []*RefundResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RefundListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string                 `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	RefundDetails []*RefundDetailRequest `protobuf:"bytes,3,rep,name=refund_details,json=refundDetails,proto3" json:"refund_details,omitempty"`
	RefundLogs    []*OrderLogRequest     `protobuf:"bytes,4,rep,name=refund_logs,json=refundLogs,proto3" json:"refund_logs,omitempty"`
	RefundNo      string                 `protobuf:"bytes,5,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	Tid           string                 `protobuf:"bytes,6,opt,name=tid,proto3" json:"tid,omitempty"`
	ShopNo        string                 `protobuf:"bytes,7,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	Type          int32                  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	Reason        *string                `protobuf:"bytes,9,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Desc          *string                `protobuf:"bytes,10,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	LogisticsName *string                `protobuf:"bytes,11,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo   *string                `protobuf:"bytes,12,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	RefundTime    string                 `protobuf:"bytes,13,opt,name=refund_time,json=refundTime,proto3" json:"refund_time,omitempty"`
	RefundFee     float64                `protobuf:"fixed64,14,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	Status        string                 `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	Remark        *string                `protobuf:"bytes,16,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	RpaStatus     int32                  `protobuf:"varint,17,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo       *string                `protobuf:"bytes,18,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	PlatTradeType *string                `protobuf:"bytes,19,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
	OriginData    *string                `protobuf:"bytes,20,opt,name=origin_data,json=originData,proto3,oneof" json:"origin_data,omitempty"`
	Order         *int64                 `protobuf:"varint,21,opt,name=order,proto3,oneof" json:"order,omitempty"`
}

func (x *RefundRequest) Reset() {
	*x = RefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRequest) ProtoMessage() {}

func (x *RefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRequest.ProtoReflect.Descriptor instead.
func (*RefundRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{33}
}

func (x *RefundRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundRequest) GetRefundDetails() []*RefundDetailRequest {
	if x != nil {
		return x.RefundDetails
	}
	return nil
}

func (x *RefundRequest) GetRefundLogs() []*OrderLogRequest {
	if x != nil {
		return x.RefundLogs
	}
	return nil
}

func (x *RefundRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *RefundRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *RefundRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *RefundRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RefundRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *RefundRequest) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *RefundRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RefundRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RefundRequest) GetRefundTime() string {
	if x != nil {
		return x.RefundTime
	}
	return ""
}

func (x *RefundRequest) GetRefundFee() float64 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *RefundRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RefundRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundRequest) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *RefundRequest) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *RefundRequest) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

func (x *RefundRequest) GetOriginData() string {
	if x != nil && x.OriginData != nil {
		return *x.OriginData
	}
	return ""
}

func (x *RefundRequest) GetOrder() int64 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type RefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeName      string                  `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	StatusName    string                  `protobuf:"bytes,3,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	RpaStatusName string                  `protobuf:"bytes,4,opt,name=rpa_status_name,json=rpaStatusName,proto3" json:"rpa_status_name,omitempty"`
	RefundDetails []*RefundDetailResponse `protobuf:"bytes,5,rep,name=refund_details,json=refundDetails,proto3" json:"refund_details,omitempty"`
	RefundLogs    []*OrderLogResponse     `protobuf:"bytes,6,rep,name=refund_logs,json=refundLogs,proto3" json:"refund_logs,omitempty"`
	RefundNo      string                  `protobuf:"bytes,7,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	Tid           string                  `protobuf:"bytes,8,opt,name=tid,proto3" json:"tid,omitempty"`
	ShopNo        string                  `protobuf:"bytes,9,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	Type          int32                   `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	Reason        *string                 `protobuf:"bytes,11,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Desc          *string                 `protobuf:"bytes,12,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	LogisticsName *string                 `protobuf:"bytes,13,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo   *string                 `protobuf:"bytes,14,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	RefundTime    string                  `protobuf:"bytes,15,opt,name=refund_time,json=refundTime,proto3" json:"refund_time,omitempty"`
	RefundFee     float64                 `protobuf:"fixed64,16,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	Status        string                  `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	Remark        *string                 `protobuf:"bytes,18,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	RpaStatus     int32                   `protobuf:"varint,19,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo       *string                 `protobuf:"bytes,20,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	PlatTradeType *string                 `protobuf:"bytes,21,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
	OriginData    *string                 `protobuf:"bytes,22,opt,name=origin_data,json=originData,proto3,oneof" json:"origin_data,omitempty"`
	CreateTime    string                  `protobuf:"bytes,23,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string                  `protobuf:"bytes,24,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Order         *int64                  `protobuf:"varint,25,opt,name=order,proto3,oneof" json:"order,omitempty"`
}

func (x *RefundResponse) Reset() {
	*x = RefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundResponse) ProtoMessage() {}

func (x *RefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundResponse.ProtoReflect.Descriptor instead.
func (*RefundResponse) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{34}
}

func (x *RefundResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RefundResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *RefundResponse) GetRpaStatusName() string {
	if x != nil {
		return x.RpaStatusName
	}
	return ""
}

func (x *RefundResponse) GetRefundDetails() []*RefundDetailResponse {
	if x != nil {
		return x.RefundDetails
	}
	return nil
}

func (x *RefundResponse) GetRefundLogs() []*OrderLogResponse {
	if x != nil {
		return x.RefundLogs
	}
	return nil
}

func (x *RefundResponse) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *RefundResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *RefundResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *RefundResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RefundResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *RefundResponse) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *RefundResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RefundResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RefundResponse) GetRefundTime() string {
	if x != nil {
		return x.RefundTime
	}
	return ""
}

func (x *RefundResponse) GetRefundFee() float64 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *RefundResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RefundResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundResponse) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *RefundResponse) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *RefundResponse) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

func (x *RefundResponse) GetOriginData() string {
	if x != nil && x.OriginData != nil {
		return *x.OriginData
	}
	return ""
}

func (x *RefundResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RefundResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RefundResponse) GetOrder() int64 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type RefundRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RefundRetrieveRequest) Reset() {
	*x = RefundRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRetrieveRequest) ProtoMessage() {}

func (x *RefundRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RefundRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{35}
}

func (x *RefundRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RefundUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string                 `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	RefundDetails        []*RefundDetailRequest `protobuf:"bytes,3,rep,name=refund_details,json=refundDetails,proto3" json:"refund_details,omitempty"`
	RefundLogs           []*OrderLogRequest     `protobuf:"bytes,4,rep,name=refund_logs,json=refundLogs,proto3" json:"refund_logs,omitempty"`
	XPartialUpdateFields []string               `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	RefundNo             string                 `protobuf:"bytes,6,opt,name=refund_no,json=refundNo,proto3" json:"refund_no,omitempty"`
	Tid                  string                 `protobuf:"bytes,7,opt,name=tid,proto3" json:"tid,omitempty"`
	ShopNo               string                 `protobuf:"bytes,8,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	Type                 int32                  `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	Reason               *string                `protobuf:"bytes,10,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Desc                 *string                `protobuf:"bytes,11,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	LogisticsName        *string                `protobuf:"bytes,12,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsNo          *string                `protobuf:"bytes,13,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	RefundTime           string                 `protobuf:"bytes,14,opt,name=refund_time,json=refundTime,proto3" json:"refund_time,omitempty"`
	RefundFee            float64                `protobuf:"fixed64,15,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	Status               string                 `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Remark               *string                `protobuf:"bytes,17,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	RpaStatus            int32                  `protobuf:"varint,18,opt,name=rpa_status,json=rpaStatus,proto3" json:"rpa_status,omitempty"`
	RpaMemo              *string                `protobuf:"bytes,19,opt,name=rpa_memo,json=rpaMemo,proto3,oneof" json:"rpa_memo,omitempty"`
	PlatTradeType        *string                `protobuf:"bytes,20,opt,name=plat_trade_type,json=platTradeType,proto3,oneof" json:"plat_trade_type,omitempty"`
	OriginData           *string                `protobuf:"bytes,21,opt,name=origin_data,json=originData,proto3,oneof" json:"origin_data,omitempty"`
	Order                *int64                 `protobuf:"varint,22,opt,name=order,proto3,oneof" json:"order,omitempty"`
}

func (x *RefundUpdateRequest) Reset() {
	*x = RefundUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpa_order_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundUpdateRequest) ProtoMessage() {}

func (x *RefundUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpa_order_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundUpdateRequest.ProtoReflect.Descriptor instead.
func (*RefundUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rpa_order_proto_rawDescGZIP(), []int{36}
}

func (x *RefundUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefundUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RefundUpdateRequest) GetRefundDetails() []*RefundDetailRequest {
	if x != nil {
		return x.RefundDetails
	}
	return nil
}

func (x *RefundUpdateRequest) GetRefundLogs() []*OrderLogRequest {
	if x != nil {
		return x.RefundLogs
	}
	return nil
}

func (x *RefundUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RefundUpdateRequest) GetRefundNo() string {
	if x != nil {
		return x.RefundNo
	}
	return ""
}

func (x *RefundUpdateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *RefundUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *RefundUpdateRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RefundUpdateRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *RefundUpdateRequest) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *RefundUpdateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *RefundUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *RefundUpdateRequest) GetRefundTime() string {
	if x != nil {
		return x.RefundTime
	}
	return ""
}

func (x *RefundUpdateRequest) GetRefundFee() float64 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *RefundUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RefundUpdateRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RefundUpdateRequest) GetRpaStatus() int32 {
	if x != nil {
		return x.RpaStatus
	}
	return 0
}

func (x *RefundUpdateRequest) GetRpaMemo() string {
	if x != nil && x.RpaMemo != nil {
		return *x.RpaMemo
	}
	return ""
}

func (x *RefundUpdateRequest) GetPlatTradeType() string {
	if x != nil && x.PlatTradeType != nil {
		return *x.PlatTradeType
	}
	return ""
}

func (x *RefundUpdateRequest) GetOriginData() string {
	if x != nil && x.OriginData != nil {
		return *x.OriginData
	}
	return ""
}

func (x *RefundUpdateRequest) GetOrder() int64 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

var File_rpa_order_proto protoreflect.FileDescriptor

var file_rpa_order_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x0f, 0x43, 0x6d, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x02, 0x52, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xbc, 0x02, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x02, 0x52, 0x0b, 0x6a, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x29, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x71, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x74, 0x53, 0x6b, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x22, 0xae, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x6b, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x6b, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x02, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x7f, 0x0a, 0x1c, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x70, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x18, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x05, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x59, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x70, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x54, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xb6, 0x04, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x5f, 0x73, 0x6b, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x74, 0x53, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf1, 0x05, 0x0a, 0x13, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x74, 0x53, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b,
	0x0d, 0x0a, 0x18, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52,
	0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x11, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x72, 0x70, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x70, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x14, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66,
	0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xce, 0x0c, 0x0a,
	0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f,
	0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x72, 0x70, 0x61, 0x4d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x22, 0xaa, 0x01,
	0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x22, 0x8c, 0x0d, 0x0a, 0x19, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x10, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x11, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x12, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x13, 0x52, 0x07, 0x72, 0x70, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x45, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x14, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x70, 0x61,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xca, 0x0c, 0x0a, 0x0c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12,
	0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0e, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x04,
	0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x70, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08,
	0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x07, 0x72, 0x70, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x0e, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x70, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a,
	0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0e, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x70, 0x61, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x70, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x70,
	0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x07,
	0x72, 0x70, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x70, 0x61, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xf7, 0x07, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x48, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x07, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0b, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x22, 0xbe, 0x02, 0x0a, 0x13, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x6b,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xaa, 0x03, 0x0a, 0x14,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x53, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2d, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdb, 0x06, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46,
	0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x72, 0x70, 0x61, 0x4d,
	0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x70, 0x61, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0xec, 0x07, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x70,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x48, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x70, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x72, 0x70, 0x61, 0x4d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x70, 0x61, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x07, 0x0a, 0x13, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x47, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x70, 0x61, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x72, 0x70, 0x61,
	0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x70, 0x61,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x32, 0x89, 0x13, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24,
	0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75,
	0x12, 0x27, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x70, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x07, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x12, 0x2a, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x12, 0x2e, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x26,
	0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6b, 0x75, 0x12, 0x2b, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x28,
	0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x0a, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x2b, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x70, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x2c, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x33, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x33, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x12, 0x2d, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x2e, 0x72, 0x70,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72,
	0x70, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x2e, 0x72, 0x70, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x61, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x72, 0x70, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_rpa_order_proto_rawDescOnce sync.Once
	file_rpa_order_proto_rawDescData = file_rpa_order_proto_rawDesc
)

func file_rpa_order_proto_rawDescGZIP() []byte {
	file_rpa_order_proto_rawDescOnce.Do(func() {
		file_rpa_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpa_order_proto_rawDescData)
	})
	return file_rpa_order_proto_rawDescData
}

var file_rpa_order_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_rpa_order_proto_goTypes = []interface{}{
	(*CmdTradeRequest)(nil),              // 0: rpa_service.rpa_order.CmdTradeRequest
	(*ConfigDestroyRequest)(nil),         // 1: rpa_service.rpa_order.ConfigDestroyRequest
	(*ConfigListRequest)(nil),            // 2: rpa_service.rpa_order.ConfigListRequest
	(*ConfigListResponse)(nil),           // 3: rpa_service.rpa_order.ConfigListResponse
	(*ConfigRequest)(nil),                // 4: rpa_service.rpa_order.ConfigRequest
	(*ConfigResponse)(nil),               // 5: rpa_service.rpa_order.ConfigResponse
	(*ConfigSkuDestroyRequest)(nil),      // 6: rpa_service.rpa_order.ConfigSkuDestroyRequest
	(*ConfigSkuListRequest)(nil),         // 7: rpa_service.rpa_order.ConfigSkuListRequest
	(*ConfigSkuListResponse)(nil),        // 8: rpa_service.rpa_order.ConfigSkuListResponse
	(*ConfigSkuRequest)(nil),             // 9: rpa_service.rpa_order.ConfigSkuRequest
	(*ConfigSkuResponse)(nil),            // 10: rpa_service.rpa_order.ConfigSkuResponse
	(*ConfigSkuUpdateRequest)(nil),       // 11: rpa_service.rpa_order.ConfigSkuUpdateRequest
	(*ConfigUpdateRequest)(nil),          // 12: rpa_service.rpa_order.ConfigUpdateRequest
	(*LabelNumberValueListResponse)(nil), // 13: rpa_service.rpa_order.LabelNumberValueListResponse
	(*LabelNumberValueResponse)(nil),     // 14: rpa_service.rpa_order.LabelNumberValueResponse
	(*OptionsResponse)(nil),              // 15: rpa_service.rpa_order.OptionsResponse
	(*OrderDestroyRequest)(nil),          // 16: rpa_service.rpa_order.OrderDestroyRequest
	(*OrderDetailRequest)(nil),           // 17: rpa_service.rpa_order.OrderDetailRequest
	(*OrderDetailResponse)(nil),          // 18: rpa_service.rpa_order.OrderDetailResponse
	(*OrderDetailUpdateRequest)(nil),     // 19: rpa_service.rpa_order.OrderDetailUpdateRequest
	(*OrderListRequest)(nil),             // 20: rpa_service.rpa_order.OrderListRequest
	(*OrderListResponse)(nil),            // 21: rpa_service.rpa_order.OrderListResponse
	(*OrderLogRequest)(nil),              // 22: rpa_service.rpa_order.OrderLogRequest
	(*OrderLogResponse)(nil),             // 23: rpa_service.rpa_order.OrderLogResponse
	(*OrderPartialUpdateRequest)(nil),    // 24: rpa_service.rpa_order.OrderPartialUpdateRequest
	(*OrderRequest)(nil),                 // 25: rpa_service.rpa_order.OrderRequest
	(*OrderResponse)(nil),                // 26: rpa_service.rpa_order.OrderResponse
	(*OrderRetrieveRequest)(nil),         // 27: rpa_service.rpa_order.OrderRetrieveRequest
	(*ProdCodeResponse)(nil),             // 28: rpa_service.rpa_order.ProdCodeResponse
	(*RefundDetailRequest)(nil),          // 29: rpa_service.rpa_order.RefundDetailRequest
	(*RefundDetailResponse)(nil),         // 30: rpa_service.rpa_order.RefundDetailResponse
	(*RefundListRequest)(nil),            // 31: rpa_service.rpa_order.RefundListRequest
	(*RefundListResponse)(nil),           // 32: rpa_service.rpa_order.RefundListResponse
	(*RefundRequest)(nil),                // 33: rpa_service.rpa_order.RefundRequest
	(*RefundResponse)(nil),               // 34: rpa_service.rpa_order.RefundResponse
	(*RefundRetrieveRequest)(nil),        // 35: rpa_service.rpa_order.RefundRetrieveRequest
	(*RefundUpdateRequest)(nil),          // 36: rpa_service.rpa_order.RefundUpdateRequest
	(*structpb.Struct)(nil),              // 37: google.protobuf.Struct
	(*emptypb.Empty)(nil),                // 38: google.protobuf.Empty
}
var file_rpa_order_proto_depIdxs = []int32{
	5,  // 0: rpa_service.rpa_order.ConfigListResponse.results:type_name -> rpa_service.rpa_order.ConfigResponse
	37, // 1: rpa_service.rpa_order.ConfigRequest.json_content:type_name -> google.protobuf.Struct
	37, // 2: rpa_service.rpa_order.ConfigResponse.json_content:type_name -> google.protobuf.Struct
	10, // 3: rpa_service.rpa_order.ConfigSkuListResponse.results:type_name -> rpa_service.rpa_order.ConfigSkuResponse
	28, // 4: rpa_service.rpa_order.ConfigSkuResponse.product:type_name -> rpa_service.rpa_order.ProdCodeResponse
	37, // 5: rpa_service.rpa_order.ConfigUpdateRequest.json_content:type_name -> google.protobuf.Struct
	14, // 6: rpa_service.rpa_order.LabelNumberValueListResponse.results:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	14, // 7: rpa_service.rpa_order.OptionsResponse.order_trade_status:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	14, // 8: rpa_service.rpa_order.OptionsResponse.order_delivery_term:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	14, // 9: rpa_service.rpa_order.OptionsResponse.order_pay_status:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	14, // 10: rpa_service.rpa_order.OptionsResponse.order_rpa_status:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	14, // 11: rpa_service.rpa_order.OptionsResponse.detail_status:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	14, // 12: rpa_service.rpa_order.OptionsResponse.detail_refund_status:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	14, // 13: rpa_service.rpa_order.OptionsResponse.config_type:type_name -> rpa_service.rpa_order.LabelNumberValueResponse
	28, // 14: rpa_service.rpa_order.OrderDetailResponse.product:type_name -> rpa_service.rpa_order.ProdCodeResponse
	17, // 15: rpa_service.rpa_order.OrderDetailUpdateRequest.order_details:type_name -> rpa_service.rpa_order.OrderDetailRequest
	22, // 16: rpa_service.rpa_order.OrderDetailUpdateRequest.order_logs:type_name -> rpa_service.rpa_order.OrderLogRequest
	17, // 17: rpa_service.rpa_order.OrderListRequest.order_details:type_name -> rpa_service.rpa_order.OrderDetailRequest
	22, // 18: rpa_service.rpa_order.OrderListRequest.order_logs:type_name -> rpa_service.rpa_order.OrderLogRequest
	26, // 19: rpa_service.rpa_order.OrderListResponse.results:type_name -> rpa_service.rpa_order.OrderResponse
	17, // 20: rpa_service.rpa_order.OrderPartialUpdateRequest.order_details:type_name -> rpa_service.rpa_order.OrderDetailRequest
	22, // 21: rpa_service.rpa_order.OrderPartialUpdateRequest.order_logs:type_name -> rpa_service.rpa_order.OrderLogRequest
	17, // 22: rpa_service.rpa_order.OrderRequest.order_details:type_name -> rpa_service.rpa_order.OrderDetailRequest
	22, // 23: rpa_service.rpa_order.OrderRequest.order_logs:type_name -> rpa_service.rpa_order.OrderLogRequest
	18, // 24: rpa_service.rpa_order.OrderResponse.order_details:type_name -> rpa_service.rpa_order.OrderDetailResponse
	23, // 25: rpa_service.rpa_order.OrderResponse.order_logs:type_name -> rpa_service.rpa_order.OrderLogResponse
	28, // 26: rpa_service.rpa_order.RefundDetailResponse.product:type_name -> rpa_service.rpa_order.ProdCodeResponse
	34, // 27: rpa_service.rpa_order.RefundListResponse.results:type_name -> rpa_service.rpa_order.RefundResponse
	29, // 28: rpa_service.rpa_order.RefundRequest.refund_details:type_name -> rpa_service.rpa_order.RefundDetailRequest
	22, // 29: rpa_service.rpa_order.RefundRequest.refund_logs:type_name -> rpa_service.rpa_order.OrderLogRequest
	30, // 30: rpa_service.rpa_order.RefundResponse.refund_details:type_name -> rpa_service.rpa_order.RefundDetailResponse
	23, // 31: rpa_service.rpa_order.RefundResponse.refund_logs:type_name -> rpa_service.rpa_order.OrderLogResponse
	29, // 32: rpa_service.rpa_order.RefundUpdateRequest.refund_details:type_name -> rpa_service.rpa_order.RefundDetailRequest
	22, // 33: rpa_service.rpa_order.RefundUpdateRequest.refund_logs:type_name -> rpa_service.rpa_order.OrderLogRequest
	25, // 34: rpa_service.rpa_order.OrderController.Create:input_type -> rpa_service.rpa_order.OrderRequest
	4,  // 35: rpa_service.rpa_order.OrderController.CreateConfig:input_type -> rpa_service.rpa_order.ConfigRequest
	9,  // 36: rpa_service.rpa_order.OrderController.CreateConfigSku:input_type -> rpa_service.rpa_order.ConfigSkuRequest
	22, // 37: rpa_service.rpa_order.OrderController.CreateOrderLog:input_type -> rpa_service.rpa_order.OrderLogRequest
	33, // 38: rpa_service.rpa_order.OrderController.CreateRefund:input_type -> rpa_service.rpa_order.RefundRequest
	16, // 39: rpa_service.rpa_order.OrderController.Destroy:input_type -> rpa_service.rpa_order.OrderDestroyRequest
	1,  // 40: rpa_service.rpa_order.OrderController.DestroyConfig:input_type -> rpa_service.rpa_order.ConfigDestroyRequest
	6,  // 41: rpa_service.rpa_order.OrderController.DestroyConfigSku:input_type -> rpa_service.rpa_order.ConfigSkuDestroyRequest
	0,  // 42: rpa_service.rpa_order.OrderController.ExecuteCmd:input_type -> rpa_service.rpa_order.CmdTradeRequest
	20, // 43: rpa_service.rpa_order.OrderController.List:input_type -> rpa_service.rpa_order.OrderListRequest
	2,  // 44: rpa_service.rpa_order.OrderController.ListConfig:input_type -> rpa_service.rpa_order.ConfigListRequest
	7,  // 45: rpa_service.rpa_order.OrderController.ListConfigSku:input_type -> rpa_service.rpa_order.ConfigSkuListRequest
	31, // 46: rpa_service.rpa_order.OrderController.ListRefund:input_type -> rpa_service.rpa_order.RefundListRequest
	38, // 47: rpa_service.rpa_order.OrderController.Options:input_type -> google.protobuf.Empty
	24, // 48: rpa_service.rpa_order.OrderController.PartialUpdate:input_type -> rpa_service.rpa_order.OrderPartialUpdateRequest
	36, // 49: rpa_service.rpa_order.OrderController.PushRefund:input_type -> rpa_service.rpa_order.RefundUpdateRequest
	27, // 50: rpa_service.rpa_order.OrderController.Retrieve:input_type -> rpa_service.rpa_order.OrderRetrieveRequest
	35, // 51: rpa_service.rpa_order.OrderController.RetrieveRefund:input_type -> rpa_service.rpa_order.RefundRetrieveRequest
	38, // 52: rpa_service.rpa_order.OrderController.StatusCount:input_type -> google.protobuf.Empty
	38, // 53: rpa_service.rpa_order.OrderController.StatusCountRefund:input_type -> google.protobuf.Empty
	25, // 54: rpa_service.rpa_order.OrderController.Update:input_type -> rpa_service.rpa_order.OrderRequest
	12, // 55: rpa_service.rpa_order.OrderController.UpdateConfig:input_type -> rpa_service.rpa_order.ConfigUpdateRequest
	11, // 56: rpa_service.rpa_order.OrderController.UpdateConfigSku:input_type -> rpa_service.rpa_order.ConfigSkuUpdateRequest
	19, // 57: rpa_service.rpa_order.OrderController.UpdateOrderDetail:input_type -> rpa_service.rpa_order.OrderDetailUpdateRequest
	36, // 58: rpa_service.rpa_order.OrderController.UpdateRefund:input_type -> rpa_service.rpa_order.RefundUpdateRequest
	26, // 59: rpa_service.rpa_order.OrderController.Create:output_type -> rpa_service.rpa_order.OrderResponse
	5,  // 60: rpa_service.rpa_order.OrderController.CreateConfig:output_type -> rpa_service.rpa_order.ConfigResponse
	10, // 61: rpa_service.rpa_order.OrderController.CreateConfigSku:output_type -> rpa_service.rpa_order.ConfigSkuResponse
	23, // 62: rpa_service.rpa_order.OrderController.CreateOrderLog:output_type -> rpa_service.rpa_order.OrderLogResponse
	34, // 63: rpa_service.rpa_order.OrderController.CreateRefund:output_type -> rpa_service.rpa_order.RefundResponse
	38, // 64: rpa_service.rpa_order.OrderController.Destroy:output_type -> google.protobuf.Empty
	38, // 65: rpa_service.rpa_order.OrderController.DestroyConfig:output_type -> google.protobuf.Empty
	38, // 66: rpa_service.rpa_order.OrderController.DestroyConfigSku:output_type -> google.protobuf.Empty
	38, // 67: rpa_service.rpa_order.OrderController.ExecuteCmd:output_type -> google.protobuf.Empty
	21, // 68: rpa_service.rpa_order.OrderController.List:output_type -> rpa_service.rpa_order.OrderListResponse
	3,  // 69: rpa_service.rpa_order.OrderController.ListConfig:output_type -> rpa_service.rpa_order.ConfigListResponse
	8,  // 70: rpa_service.rpa_order.OrderController.ListConfigSku:output_type -> rpa_service.rpa_order.ConfigSkuListResponse
	32, // 71: rpa_service.rpa_order.OrderController.ListRefund:output_type -> rpa_service.rpa_order.RefundListResponse
	15, // 72: rpa_service.rpa_order.OrderController.Options:output_type -> rpa_service.rpa_order.OptionsResponse
	26, // 73: rpa_service.rpa_order.OrderController.PartialUpdate:output_type -> rpa_service.rpa_order.OrderResponse
	34, // 74: rpa_service.rpa_order.OrderController.PushRefund:output_type -> rpa_service.rpa_order.RefundResponse
	26, // 75: rpa_service.rpa_order.OrderController.Retrieve:output_type -> rpa_service.rpa_order.OrderResponse
	34, // 76: rpa_service.rpa_order.OrderController.RetrieveRefund:output_type -> rpa_service.rpa_order.RefundResponse
	13, // 77: rpa_service.rpa_order.OrderController.StatusCount:output_type -> rpa_service.rpa_order.LabelNumberValueListResponse
	13, // 78: rpa_service.rpa_order.OrderController.StatusCountRefund:output_type -> rpa_service.rpa_order.LabelNumberValueListResponse
	26, // 79: rpa_service.rpa_order.OrderController.Update:output_type -> rpa_service.rpa_order.OrderResponse
	5,  // 80: rpa_service.rpa_order.OrderController.UpdateConfig:output_type -> rpa_service.rpa_order.ConfigResponse
	10, // 81: rpa_service.rpa_order.OrderController.UpdateConfigSku:output_type -> rpa_service.rpa_order.ConfigSkuResponse
	18, // 82: rpa_service.rpa_order.OrderController.UpdateOrderDetail:output_type -> rpa_service.rpa_order.OrderDetailResponse
	34, // 83: rpa_service.rpa_order.OrderController.UpdateRefund:output_type -> rpa_service.rpa_order.RefundResponse
	59, // [59:84] is the sub-list for method output_type
	34, // [34:59] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_rpa_order_proto_init() }
func file_rpa_order_proto_init() {
	if File_rpa_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpa_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSkuDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSkuListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSkuListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSkuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSkuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSkuUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetailUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpa_order_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rpa_order_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_rpa_order_proto_msgTypes[36].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpa_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpa_order_proto_goTypes,
		DependencyIndexes: file_rpa_order_proto_depIdxs,
		MessageInfos:      file_rpa_order_proto_msgTypes,
	}.Build()
	File_rpa_order_proto = out.File
	file_rpa_order_proto_rawDesc = nil
	file_rpa_order_proto_goTypes = nil
	file_rpa_order_proto_depIdxs = nil
}
