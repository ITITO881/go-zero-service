// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpa_order.proto

package rpapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderController_Create_FullMethodName            = "/rpa_service.rpa_order.OrderController/Create"
	OrderController_CreateConfig_FullMethodName      = "/rpa_service.rpa_order.OrderController/CreateConfig"
	OrderController_CreateConfigSku_FullMethodName   = "/rpa_service.rpa_order.OrderController/CreateConfigSku"
	OrderController_CreateOrderLog_FullMethodName    = "/rpa_service.rpa_order.OrderController/CreateOrderLog"
	OrderController_CreateRefund_FullMethodName      = "/rpa_service.rpa_order.OrderController/CreateRefund"
	OrderController_Destroy_FullMethodName           = "/rpa_service.rpa_order.OrderController/Destroy"
	OrderController_DestroyConfig_FullMethodName     = "/rpa_service.rpa_order.OrderController/DestroyConfig"
	OrderController_DestroyConfigSku_FullMethodName  = "/rpa_service.rpa_order.OrderController/DestroyConfigSku"
	OrderController_ExecuteCmd_FullMethodName        = "/rpa_service.rpa_order.OrderController/ExecuteCmd"
	OrderController_List_FullMethodName              = "/rpa_service.rpa_order.OrderController/List"
	OrderController_ListConfig_FullMethodName        = "/rpa_service.rpa_order.OrderController/ListConfig"
	OrderController_ListConfigSku_FullMethodName     = "/rpa_service.rpa_order.OrderController/ListConfigSku"
	OrderController_ListRefund_FullMethodName        = "/rpa_service.rpa_order.OrderController/ListRefund"
	OrderController_Options_FullMethodName           = "/rpa_service.rpa_order.OrderController/Options"
	OrderController_PartialUpdate_FullMethodName     = "/rpa_service.rpa_order.OrderController/PartialUpdate"
	OrderController_PushRefund_FullMethodName        = "/rpa_service.rpa_order.OrderController/PushRefund"
	OrderController_Retrieve_FullMethodName          = "/rpa_service.rpa_order.OrderController/Retrieve"
	OrderController_RetrieveRefund_FullMethodName    = "/rpa_service.rpa_order.OrderController/RetrieveRefund"
	OrderController_StatusCount_FullMethodName       = "/rpa_service.rpa_order.OrderController/StatusCount"
	OrderController_StatusCountRefund_FullMethodName = "/rpa_service.rpa_order.OrderController/StatusCountRefund"
	OrderController_Update_FullMethodName            = "/rpa_service.rpa_order.OrderController/Update"
	OrderController_UpdateConfig_FullMethodName      = "/rpa_service.rpa_order.OrderController/UpdateConfig"
	OrderController_UpdateConfigSku_FullMethodName   = "/rpa_service.rpa_order.OrderController/UpdateConfigSku"
	OrderController_UpdateOrderDetail_FullMethodName = "/rpa_service.rpa_order.OrderController/UpdateOrderDetail"
	OrderController_UpdateRefund_FullMethodName      = "/rpa_service.rpa_order.OrderController/UpdateRefund"
)

// OrderControllerClient is the client API for OrderController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderControllerClient interface {
	Create(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	CreateConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	CreateConfigSku(ctx context.Context, in *ConfigSkuRequest, opts ...grpc.CallOption) (*ConfigSkuResponse, error)
	CreateOrderLog(ctx context.Context, in *OrderLogRequest, opts ...grpc.CallOption) (*OrderLogResponse, error)
	CreateRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error)
	Destroy(ctx context.Context, in *OrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyConfig(ctx context.Context, in *ConfigDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyConfigSku(ctx context.Context, in *ConfigSkuDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExecuteCmd(ctx context.Context, in *CmdTradeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
	ListConfig(ctx context.Context, in *ConfigListRequest, opts ...grpc.CallOption) (*ConfigListResponse, error)
	ListConfigSku(ctx context.Context, in *ConfigSkuListRequest, opts ...grpc.CallOption) (*ConfigSkuListResponse, error)
	ListRefund(ctx context.Context, in *RefundListRequest, opts ...grpc.CallOption) (*RefundListResponse, error)
	Options(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionsResponse, error)
	PartialUpdate(ctx context.Context, in *OrderPartialUpdateRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	PushRefund(ctx context.Context, in *RefundUpdateRequest, opts ...grpc.CallOption) (*RefundResponse, error)
	Retrieve(ctx context.Context, in *OrderRetrieveRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	RetrieveRefund(ctx context.Context, in *RefundRetrieveRequest, opts ...grpc.CallOption) (*RefundResponse, error)
	StatusCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LabelNumberValueListResponse, error)
	StatusCountRefund(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LabelNumberValueListResponse, error)
	Update(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	UpdateConfigSku(ctx context.Context, in *ConfigSkuUpdateRequest, opts ...grpc.CallOption) (*ConfigSkuResponse, error)
	UpdateOrderDetail(ctx context.Context, in *OrderDetailUpdateRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error)
	UpdateRefund(ctx context.Context, in *RefundUpdateRequest, opts ...grpc.CallOption) (*RefundResponse, error)
}

type orderControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderControllerClient(cc grpc.ClientConnInterface) OrderControllerClient {
	return &orderControllerClient{cc}
}

func (c *orderControllerClient) Create(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) CreateConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, OrderController_CreateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) CreateConfigSku(ctx context.Context, in *ConfigSkuRequest, opts ...grpc.CallOption) (*ConfigSkuResponse, error) {
	out := new(ConfigSkuResponse)
	err := c.cc.Invoke(ctx, OrderController_CreateConfigSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) CreateOrderLog(ctx context.Context, in *OrderLogRequest, opts ...grpc.CallOption) (*OrderLogResponse, error) {
	out := new(OrderLogResponse)
	err := c.cc.Invoke(ctx, OrderController_CreateOrderLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) CreateRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, OrderController_CreateRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) Destroy(ctx context.Context, in *OrderDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) DestroyConfig(ctx context.Context, in *ConfigDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderController_DestroyConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) DestroyConfigSku(ctx context.Context, in *ConfigSkuDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderController_DestroyConfigSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) ExecuteCmd(ctx context.Context, in *CmdTradeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderController_ExecuteCmd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) List(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	out := new(OrderListResponse)
	err := c.cc.Invoke(ctx, OrderController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) ListConfig(ctx context.Context, in *ConfigListRequest, opts ...grpc.CallOption) (*ConfigListResponse, error) {
	out := new(ConfigListResponse)
	err := c.cc.Invoke(ctx, OrderController_ListConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) ListConfigSku(ctx context.Context, in *ConfigSkuListRequest, opts ...grpc.CallOption) (*ConfigSkuListResponse, error) {
	out := new(ConfigSkuListResponse)
	err := c.cc.Invoke(ctx, OrderController_ListConfigSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) ListRefund(ctx context.Context, in *RefundListRequest, opts ...grpc.CallOption) (*RefundListResponse, error) {
	out := new(RefundListResponse)
	err := c.cc.Invoke(ctx, OrderController_ListRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) Options(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionsResponse, error) {
	out := new(OptionsResponse)
	err := c.cc.Invoke(ctx, OrderController_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) PartialUpdate(ctx context.Context, in *OrderPartialUpdateRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) PushRefund(ctx context.Context, in *RefundUpdateRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, OrderController_PushRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) Retrieve(ctx context.Context, in *OrderRetrieveRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) RetrieveRefund(ctx context.Context, in *RefundRetrieveRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, OrderController_RetrieveRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) StatusCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LabelNumberValueListResponse, error) {
	out := new(LabelNumberValueListResponse)
	err := c.cc.Invoke(ctx, OrderController_StatusCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) StatusCountRefund(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LabelNumberValueListResponse, error) {
	out := new(LabelNumberValueListResponse)
	err := c.cc.Invoke(ctx, OrderController_StatusCountRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) Update(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, OrderController_UpdateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) UpdateConfigSku(ctx context.Context, in *ConfigSkuUpdateRequest, opts ...grpc.CallOption) (*ConfigSkuResponse, error) {
	out := new(ConfigSkuResponse)
	err := c.cc.Invoke(ctx, OrderController_UpdateConfigSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) UpdateOrderDetail(ctx context.Context, in *OrderDetailUpdateRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error) {
	out := new(OrderDetailResponse)
	err := c.cc.Invoke(ctx, OrderController_UpdateOrderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderControllerClient) UpdateRefund(ctx context.Context, in *RefundUpdateRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, OrderController_UpdateRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderControllerServer is the server API for OrderController service.
// All implementations must embed UnimplementedOrderControllerServer
// for forward compatibility
type OrderControllerServer interface {
	Create(context.Context, *OrderRequest) (*OrderResponse, error)
	CreateConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	CreateConfigSku(context.Context, *ConfigSkuRequest) (*ConfigSkuResponse, error)
	CreateOrderLog(context.Context, *OrderLogRequest) (*OrderLogResponse, error)
	CreateRefund(context.Context, *RefundRequest) (*RefundResponse, error)
	Destroy(context.Context, *OrderDestroyRequest) (*emptypb.Empty, error)
	DestroyConfig(context.Context, *ConfigDestroyRequest) (*emptypb.Empty, error)
	DestroyConfigSku(context.Context, *ConfigSkuDestroyRequest) (*emptypb.Empty, error)
	ExecuteCmd(context.Context, *CmdTradeRequest) (*emptypb.Empty, error)
	List(context.Context, *OrderListRequest) (*OrderListResponse, error)
	ListConfig(context.Context, *ConfigListRequest) (*ConfigListResponse, error)
	ListConfigSku(context.Context, *ConfigSkuListRequest) (*ConfigSkuListResponse, error)
	ListRefund(context.Context, *RefundListRequest) (*RefundListResponse, error)
	Options(context.Context, *emptypb.Empty) (*OptionsResponse, error)
	PartialUpdate(context.Context, *OrderPartialUpdateRequest) (*OrderResponse, error)
	PushRefund(context.Context, *RefundUpdateRequest) (*RefundResponse, error)
	Retrieve(context.Context, *OrderRetrieveRequest) (*OrderResponse, error)
	RetrieveRefund(context.Context, *RefundRetrieveRequest) (*RefundResponse, error)
	StatusCount(context.Context, *emptypb.Empty) (*LabelNumberValueListResponse, error)
	StatusCountRefund(context.Context, *emptypb.Empty) (*LabelNumberValueListResponse, error)
	Update(context.Context, *OrderRequest) (*OrderResponse, error)
	UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigResponse, error)
	UpdateConfigSku(context.Context, *ConfigSkuUpdateRequest) (*ConfigSkuResponse, error)
	UpdateOrderDetail(context.Context, *OrderDetailUpdateRequest) (*OrderDetailResponse, error)
	UpdateRefund(context.Context, *RefundUpdateRequest) (*RefundResponse, error)
	mustEmbedUnimplementedOrderControllerServer()
}

// UnimplementedOrderControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOrderControllerServer struct {
}

func (UnimplementedOrderControllerServer) Create(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderControllerServer) CreateConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedOrderControllerServer) CreateConfigSku(context.Context, *ConfigSkuRequest) (*ConfigSkuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigSku not implemented")
}
func (UnimplementedOrderControllerServer) CreateOrderLog(context.Context, *OrderLogRequest) (*OrderLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderLog not implemented")
}
func (UnimplementedOrderControllerServer) CreateRefund(context.Context, *RefundRequest) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedOrderControllerServer) Destroy(context.Context, *OrderDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedOrderControllerServer) DestroyConfig(context.Context, *ConfigDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyConfig not implemented")
}
func (UnimplementedOrderControllerServer) DestroyConfigSku(context.Context, *ConfigSkuDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyConfigSku not implemented")
}
func (UnimplementedOrderControllerServer) ExecuteCmd(context.Context, *CmdTradeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCmd not implemented")
}
func (UnimplementedOrderControllerServer) List(context.Context, *OrderListRequest) (*OrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrderControllerServer) ListConfig(context.Context, *ConfigListRequest) (*ConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfig not implemented")
}
func (UnimplementedOrderControllerServer) ListConfigSku(context.Context, *ConfigSkuListRequest) (*ConfigSkuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigSku not implemented")
}
func (UnimplementedOrderControllerServer) ListRefund(context.Context, *RefundListRequest) (*RefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefund not implemented")
}
func (UnimplementedOrderControllerServer) Options(context.Context, *emptypb.Empty) (*OptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedOrderControllerServer) PartialUpdate(context.Context, *OrderPartialUpdateRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedOrderControllerServer) PushRefund(context.Context, *RefundUpdateRequest) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushRefund not implemented")
}
func (UnimplementedOrderControllerServer) Retrieve(context.Context, *OrderRetrieveRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedOrderControllerServer) RetrieveRefund(context.Context, *RefundRetrieveRequest) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRefund not implemented")
}
func (UnimplementedOrderControllerServer) StatusCount(context.Context, *emptypb.Empty) (*LabelNumberValueListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusCount not implemented")
}
func (UnimplementedOrderControllerServer) StatusCountRefund(context.Context, *emptypb.Empty) (*LabelNumberValueListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusCountRefund not implemented")
}
func (UnimplementedOrderControllerServer) Update(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderControllerServer) UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedOrderControllerServer) UpdateConfigSku(context.Context, *ConfigSkuUpdateRequest) (*ConfigSkuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigSku not implemented")
}
func (UnimplementedOrderControllerServer) UpdateOrderDetail(context.Context, *OrderDetailUpdateRequest) (*OrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderDetail not implemented")
}
func (UnimplementedOrderControllerServer) UpdateRefund(context.Context, *RefundUpdateRequest) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefund not implemented")
}
func (UnimplementedOrderControllerServer) mustEmbedUnimplementedOrderControllerServer() {}

// UnsafeOrderControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderControllerServer will
// result in compilation errors.
type UnsafeOrderControllerServer interface {
	mustEmbedUnimplementedOrderControllerServer()
}

func RegisterOrderControllerServer(s grpc.ServiceRegistrar, srv OrderControllerServer) {
	s.RegisterService(&OrderController_ServiceDesc, srv)
}

func _OrderController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).Create(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_CreateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).CreateConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_CreateConfigSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).CreateConfigSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_CreateConfigSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).CreateConfigSku(ctx, req.(*ConfigSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_CreateOrderLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).CreateOrderLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_CreateOrderLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).CreateOrderLog(ctx, req.(*OrderLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_CreateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).CreateRefund(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).Destroy(ctx, req.(*OrderDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_DestroyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).DestroyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_DestroyConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).DestroyConfig(ctx, req.(*ConfigDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_DestroyConfigSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSkuDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).DestroyConfigSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_DestroyConfigSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).DestroyConfigSku(ctx, req.(*ConfigSkuDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_ExecuteCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).ExecuteCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_ExecuteCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).ExecuteCmd(ctx, req.(*CmdTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).List(ctx, req.(*OrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_ListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).ListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_ListConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).ListConfig(ctx, req.(*ConfigListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_ListConfigSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSkuListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).ListConfigSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_ListConfigSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).ListConfigSku(ctx, req.(*ConfigSkuListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_ListRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).ListRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_ListRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).ListRefund(ctx, req.(*RefundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).Options(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).PartialUpdate(ctx, req.(*OrderPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_PushRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).PushRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_PushRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).PushRefund(ctx, req.(*RefundUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).Retrieve(ctx, req.(*OrderRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_RetrieveRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).RetrieveRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_RetrieveRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).RetrieveRefund(ctx, req.(*RefundRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_StatusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).StatusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_StatusCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).StatusCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_StatusCountRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).StatusCountRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_StatusCountRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).StatusCountRefund(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).Update(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).UpdateConfig(ctx, req.(*ConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_UpdateConfigSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSkuUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).UpdateConfigSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_UpdateConfigSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).UpdateConfigSku(ctx, req.(*ConfigSkuUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_UpdateOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).UpdateOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_UpdateOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).UpdateOrderDetail(ctx, req.(*OrderDetailUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderController_UpdateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderControllerServer).UpdateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderController_UpdateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderControllerServer).UpdateRefund(ctx, req.(*RefundUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderController_ServiceDesc is the grpc.ServiceDesc for OrderController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpa_service.rpa_order.OrderController",
	HandlerType: (*OrderControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderController_Create_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _OrderController_CreateConfig_Handler,
		},
		{
			MethodName: "CreateConfigSku",
			Handler:    _OrderController_CreateConfigSku_Handler,
		},
		{
			MethodName: "CreateOrderLog",
			Handler:    _OrderController_CreateOrderLog_Handler,
		},
		{
			MethodName: "CreateRefund",
			Handler:    _OrderController_CreateRefund_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _OrderController_Destroy_Handler,
		},
		{
			MethodName: "DestroyConfig",
			Handler:    _OrderController_DestroyConfig_Handler,
		},
		{
			MethodName: "DestroyConfigSku",
			Handler:    _OrderController_DestroyConfigSku_Handler,
		},
		{
			MethodName: "ExecuteCmd",
			Handler:    _OrderController_ExecuteCmd_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OrderController_List_Handler,
		},
		{
			MethodName: "ListConfig",
			Handler:    _OrderController_ListConfig_Handler,
		},
		{
			MethodName: "ListConfigSku",
			Handler:    _OrderController_ListConfigSku_Handler,
		},
		{
			MethodName: "ListRefund",
			Handler:    _OrderController_ListRefund_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _OrderController_Options_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _OrderController_PartialUpdate_Handler,
		},
		{
			MethodName: "PushRefund",
			Handler:    _OrderController_PushRefund_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _OrderController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveRefund",
			Handler:    _OrderController_RetrieveRefund_Handler,
		},
		{
			MethodName: "StatusCount",
			Handler:    _OrderController_StatusCount_Handler,
		},
		{
			MethodName: "StatusCountRefund",
			Handler:    _OrderController_StatusCountRefund_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderController_Update_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _OrderController_UpdateConfig_Handler,
		},
		{
			MethodName: "UpdateConfigSku",
			Handler:    _OrderController_UpdateConfigSku_Handler,
		},
		{
			MethodName: "UpdateOrderDetail",
			Handler:    _OrderController_UpdateOrderDetail_Handler,
		},
		{
			MethodName: "UpdateRefund",
			Handler:    _OrderController_UpdateRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpa_order.proto",
}
