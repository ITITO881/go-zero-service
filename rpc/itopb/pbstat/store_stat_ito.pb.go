// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: store_stat_ito.proto

package pbstat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*structpb.Struct `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CustomerResponse) Reset() {
	*x = CustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerResponse) ProtoMessage() {}

func (x *CustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerResponse.ProtoReflect.Descriptor instead.
func (*CustomerResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{0}
}

func (x *CustomerResponse) GetResults() []*structpb.Struct {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CustomerResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ItoTradeDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId           int32    `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	StockoutNo      *string  `protobuf:"bytes,2,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	SpecId          *int32   `protobuf:"varint,3,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	PlatformId      *int32   `protobuf:"varint,4,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	SrcOid          *string  `protobuf:"bytes,5,opt,name=src_oid,json=srcOid,proto3,oneof" json:"src_oid,omitempty"`
	PlatformGoodsId *string  `protobuf:"bytes,6,opt,name=platform_goods_id,json=platformGoodsId,proto3,oneof" json:"platform_goods_id,omitempty"`
	PlatformSpecId  *string  `protobuf:"bytes,7,opt,name=platform_spec_id,json=platformSpecId,proto3,oneof" json:"platform_spec_id,omitempty"`
	SuiteId         *int32   `protobuf:"varint,8,opt,name=suite_id,json=suiteId,proto3,oneof" json:"suite_id,omitempty"`
	Flag            *int32   `protobuf:"varint,9,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	SrcTid          *string  `protobuf:"bytes,10,opt,name=src_tid,json=srcTid,proto3,oneof" json:"src_tid,omitempty"`
	GiftType        *int32   `protobuf:"varint,11,opt,name=gift_type,json=giftType,proto3,oneof" json:"gift_type,omitempty"`
	RefundStatus    *int32   `protobuf:"varint,12,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GuaranteeMode   *int32   `protobuf:"varint,13,opt,name=guarantee_mode,json=guaranteeMode,proto3,oneof" json:"guarantee_mode,omitempty"`
	DeliveryTerm    *int32   `protobuf:"varint,14,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BindOid         *string  `protobuf:"bytes,15,opt,name=bind_oid,json=bindOid,proto3,oneof" json:"bind_oid,omitempty"`
	Num             *float64 `protobuf:"fixed64,16,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Price           *float64 `protobuf:"fixed64,17,opt,name=price,proto3,oneof" json:"price,omitempty"`
	ActualNum       *float64 `protobuf:"fixed64,18,opt,name=actual_num,json=actualNum,proto3,oneof" json:"actual_num,omitempty"`
	RefundNum       *float64 `protobuf:"fixed64,19,opt,name=refund_num,json=refundNum,proto3,oneof" json:"refund_num,omitempty"`
	OrderPrice      *float64 `protobuf:"fixed64,20,opt,name=order_price,json=orderPrice,proto3,oneof" json:"order_price,omitempty"`
	SharePrice      *float64 `protobuf:"fixed64,21,opt,name=share_price,json=sharePrice,proto3,oneof" json:"share_price,omitempty"`
	Adjust          *float64 `protobuf:"fixed64,22,opt,name=adjust,proto3,oneof" json:"adjust,omitempty"`
	Discount        *float64 `protobuf:"fixed64,23,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	ShareAmount     *float64 `protobuf:"fixed64,24,opt,name=share_amount,json=shareAmount,proto3,oneof" json:"share_amount,omitempty"`
	SharePost       *float64 `protobuf:"fixed64,25,opt,name=share_post,json=sharePost,proto3,oneof" json:"share_post,omitempty"`
	Paid            *float64 `protobuf:"fixed64,26,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	GoodsName       *string  `protobuf:"bytes,27,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	Prop2           *string  `protobuf:"bytes,28,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Barcode         *string  `protobuf:"bytes,29,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	GoodsId         *int32   `protobuf:"varint,30,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	SpecName        *string  `protobuf:"bytes,31,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo          *string  `protobuf:"bytes,32,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode        *string  `protobuf:"bytes,33,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	SuiteNo         *string  `protobuf:"bytes,34,opt,name=suite_no,json=suiteNo,proto3,oneof" json:"suite_no,omitempty"`
	SuiteName       *string  `protobuf:"bytes,35,opt,name=suite_name,json=suiteName,proto3,oneof" json:"suite_name,omitempty"`
	SuiteNum        *float64 `protobuf:"fixed64,36,opt,name=suite_num,json=suiteNum,proto3,oneof" json:"suite_num,omitempty"`
	SuiteAmount     *float64 `protobuf:"fixed64,37,opt,name=suite_amount,json=suiteAmount,proto3,oneof" json:"suite_amount,omitempty"`
	SuiteDiscount   *float64 `protobuf:"fixed64,38,opt,name=suite_discount,json=suiteDiscount,proto3,oneof" json:"suite_discount,omitempty"`
	ShareAmount2    *float64 `protobuf:"fixed64,39,opt,name=share_amount2,json=shareAmount2,proto3,oneof" json:"share_amount2,omitempty"`
	IsPrintSuite    *int32   `protobuf:"varint,40,opt,name=is_print_suite,json=isPrintSuite,proto3,oneof" json:"is_print_suite,omitempty"`
	IsZeroCost      *int32   `protobuf:"varint,41,opt,name=is_zero_cost,json=isZeroCost,proto3,oneof" json:"is_zero_cost,omitempty"`
	StockReserved   *int32   `protobuf:"varint,42,opt,name=stock_reserved,json=stockReserved,proto3,oneof" json:"stock_reserved,omitempty"`
	IsConsigned     *int32   `protobuf:"varint,43,opt,name=is_consigned,json=isConsigned,proto3,oneof" json:"is_consigned,omitempty"`
	IsReceived      *int32   `protobuf:"varint,44,opt,name=is_received,json=isReceived,proto3,oneof" json:"is_received,omitempty"`
	IsMaster        *int32   `protobuf:"varint,45,opt,name=is_master,json=isMaster,proto3,oneof" json:"is_master,omitempty"`
	ApiGoodsName    *string  `protobuf:"bytes,46,opt,name=api_goods_name,json=apiGoodsName,proto3,oneof" json:"api_goods_name,omitempty"`
	ApiSpecName     *string  `protobuf:"bytes,47,opt,name=api_spec_name,json=apiSpecName,proto3,oneof" json:"api_spec_name,omitempty"`
	Weight          *float64 `protobuf:"fixed64,48,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Commission      *float64 `protobuf:"fixed64,49,opt,name=commission,proto3,oneof" json:"commission,omitempty"`
	GoodsType       *int32   `protobuf:"varint,50,opt,name=goods_type,json=goodsType,proto3,oneof" json:"goods_type,omitempty"`
	LargeType       *int32   `protobuf:"varint,51,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	InvoiceType     *int32   `protobuf:"varint,52,opt,name=invoice_type,json=invoiceType,proto3,oneof" json:"invoice_type,omitempty"`
	InvoiceContent  *string  `protobuf:"bytes,53,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	FromMask        *int32   `protobuf:"varint,54,opt,name=from_mask,json=fromMask,proto3,oneof" json:"from_mask,omitempty"`
	Cid             *int32   `protobuf:"varint,55,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	Remark          *string  `protobuf:"bytes,56,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified        *string  `protobuf:"bytes,57,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created         *string  `protobuf:"bytes,58,opt,name=created,proto3,oneof" json:"created,omitempty"`
	TaxRate         *float64 `protobuf:"fixed64,59,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	BaseUnitId      *int32   `protobuf:"varint,60,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	UnitName        *string  `protobuf:"bytes,61,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	PayId           *string  `protobuf:"bytes,62,opt,name=pay_id,json=payId,proto3,oneof" json:"pay_id,omitempty"`
	PayStatus       *int32   `protobuf:"varint,63,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime         *string  `protobuf:"bytes,64,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DealCode        *string  `protobuf:"bytes,65,opt,name=deal_code,json=dealCode,proto3,oneof" json:"deal_code,omitempty"`
	Trade           *int32   `protobuf:"varint,66,opt,name=trade,proto3,oneof" json:"trade,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,67,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
}

func (x *ItoTradeDetailsResponse) Reset() {
	*x = ItoTradeDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTradeDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTradeDetailsResponse) ProtoMessage() {}

func (x *ItoTradeDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTradeDetailsResponse.ProtoReflect.Descriptor instead.
func (*ItoTradeDetailsResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{1}
}

func (x *ItoTradeDetailsResponse) GetRecId() int32 {
	if x != nil {
		return x.RecId
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetSrcOid() string {
	if x != nil && x.SrcOid != nil {
		return *x.SrcOid
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetPlatformGoodsId() string {
	if x != nil && x.PlatformGoodsId != nil {
		return *x.PlatformGoodsId
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetPlatformSpecId() string {
	if x != nil && x.PlatformSpecId != nil {
		return *x.PlatformSpecId
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetSuiteId() int32 {
	if x != nil && x.SuiteId != nil {
		return *x.SuiteId
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetSrcTid() string {
	if x != nil && x.SrcTid != nil {
		return *x.SrcTid
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetGiftType() int32 {
	if x != nil && x.GiftType != nil {
		return *x.GiftType
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetGuaranteeMode() int32 {
	if x != nil && x.GuaranteeMode != nil {
		return *x.GuaranteeMode
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetBindOid() string {
	if x != nil && x.BindOid != nil {
		return *x.BindOid
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetActualNum() float64 {
	if x != nil && x.ActualNum != nil {
		return *x.ActualNum
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetRefundNum() float64 {
	if x != nil && x.RefundNum != nil {
		return *x.RefundNum
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetOrderPrice() float64 {
	if x != nil && x.OrderPrice != nil {
		return *x.OrderPrice
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetSharePrice() float64 {
	if x != nil && x.SharePrice != nil {
		return *x.SharePrice
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetAdjust() float64 {
	if x != nil && x.Adjust != nil {
		return *x.Adjust
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetShareAmount() float64 {
	if x != nil && x.ShareAmount != nil {
		return *x.ShareAmount
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetSharePost() float64 {
	if x != nil && x.SharePost != nil {
		return *x.SharePost
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetSuiteNo() string {
	if x != nil && x.SuiteNo != nil {
		return *x.SuiteNo
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetSuiteName() string {
	if x != nil && x.SuiteName != nil {
		return *x.SuiteName
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetSuiteNum() float64 {
	if x != nil && x.SuiteNum != nil {
		return *x.SuiteNum
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetSuiteAmount() float64 {
	if x != nil && x.SuiteAmount != nil {
		return *x.SuiteAmount
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetSuiteDiscount() float64 {
	if x != nil && x.SuiteDiscount != nil {
		return *x.SuiteDiscount
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetShareAmount2() float64 {
	if x != nil && x.ShareAmount2 != nil {
		return *x.ShareAmount2
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetIsPrintSuite() int32 {
	if x != nil && x.IsPrintSuite != nil {
		return *x.IsPrintSuite
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetIsZeroCost() int32 {
	if x != nil && x.IsZeroCost != nil {
		return *x.IsZeroCost
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetStockReserved() int32 {
	if x != nil && x.StockReserved != nil {
		return *x.StockReserved
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetIsConsigned() int32 {
	if x != nil && x.IsConsigned != nil {
		return *x.IsConsigned
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetIsReceived() int32 {
	if x != nil && x.IsReceived != nil {
		return *x.IsReceived
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetIsMaster() int32 {
	if x != nil && x.IsMaster != nil {
		return *x.IsMaster
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetApiGoodsName() string {
	if x != nil && x.ApiGoodsName != nil {
		return *x.ApiGoodsName
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetApiSpecName() string {
	if x != nil && x.ApiSpecName != nil {
		return *x.ApiSpecName
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetGoodsType() int32 {
	if x != nil && x.GoodsType != nil {
		return *x.GoodsType
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetInvoiceType() int32 {
	if x != nil && x.InvoiceType != nil {
		return *x.InvoiceType
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetInvoiceContent() string {
	if x != nil && x.InvoiceContent != nil {
		return *x.InvoiceContent
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetFromMask() int32 {
	if x != nil && x.FromMask != nil {
		return *x.FromMask
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetCid() int32 {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetPayId() string {
	if x != nil && x.PayId != nil {
		return *x.PayId
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetDealCode() string {
	if x != nil && x.DealCode != nil {
		return *x.DealCode
	}
	return ""
}

func (x *ItoTradeDetailsResponse) GetTrade() int32 {
	if x != nil && x.Trade != nil {
		return *x.Trade
	}
	return 0
}

func (x *ItoTradeDetailsResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

type ItoTradesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ItoTradesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ItoTradesListResponse) Reset() {
	*x = ItoTradesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTradesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTradesListResponse) ProtoMessage() {}

func (x *ItoTradesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTradesListResponse.ProtoReflect.Descriptor instead.
func (*ItoTradesListResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{2}
}

func (x *ItoTradesListResponse) GetResults() []*ItoTradesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ItoTradesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ItoTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *string `protobuf:"bytes,1,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
}

func (x *ItoTradesRequest) Reset() {
	*x = ItoTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTradesRequest) ProtoMessage() {}

func (x *ItoTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTradesRequest.ProtoReflect.Descriptor instead.
func (*ItoTradesRequest) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{3}
}

func (x *ItoTradesRequest) GetFilters() string {
	if x != nil && x.Filters != nil {
		return *x.Filters
	}
	return ""
}

type ItoTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId             int32                      `protobuf:"varint,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TradeDetails        []*ItoTradeDetailsResponse `protobuf:"bytes,2,rep,name=trade_details,json=tradeDetails,proto3" json:"trade_details,omitempty"`
	Created             string                     `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	TradeNo             *string                    `protobuf:"bytes,4,opt,name=trade_no,json=tradeNo,proto3,oneof" json:"trade_no,omitempty"`
	PlatformId          *int32                     `protobuf:"varint,5,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	ShopName            *string                    `protobuf:"bytes,6,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ShopRemark          *string                    `protobuf:"bytes,7,opt,name=shop_remark,json=shopRemark,proto3,oneof" json:"shop_remark,omitempty"`
	WarehouseType       *int32                     `protobuf:"varint,8,opt,name=warehouse_type,json=warehouseType,proto3,oneof" json:"warehouse_type,omitempty"`
	WarehouseNo         *string                    `protobuf:"bytes,9,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	SrcTids             *string                    `protobuf:"bytes,10,opt,name=src_tids,json=srcTids,proto3,oneof" json:"src_tids,omitempty"`
	TradeStatus         *int32                     `protobuf:"varint,11,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	ConsignStatus       *int32                     `protobuf:"varint,12,opt,name=consign_status,json=consignStatus,proto3,oneof" json:"consign_status,omitempty"`
	TradeType           *int32                     `protobuf:"varint,13,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	DeliveryTerm        *int32                     `protobuf:"varint,14,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	FreezeReason        *int32                     `protobuf:"varint,15,opt,name=freeze_reason,json=freezeReason,proto3,oneof" json:"freeze_reason,omitempty"`
	RefundStatus        *int32                     `protobuf:"varint,16,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	FenxiaoType         *int32                     `protobuf:"varint,17,opt,name=fenxiao_type,json=fenxiaoType,proto3,oneof" json:"fenxiao_type,omitempty"`
	FenxiaoNick         *string                    `protobuf:"bytes,18,opt,name=fenxiao_nick,json=fenxiaoNick,proto3,oneof" json:"fenxiao_nick,omitempty"`
	TradeTime           *string                    `protobuf:"bytes,19,opt,name=trade_time,json=tradeTime,proto3,oneof" json:"trade_time,omitempty"`
	PayTime             *string                    `protobuf:"bytes,20,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	CustomerName        *string                    `protobuf:"bytes,21,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	CustomerNo          *string                    `protobuf:"bytes,22,opt,name=customer_no,json=customerNo,proto3,oneof" json:"customer_no,omitempty"`
	PayAccount          *string                    `protobuf:"bytes,23,opt,name=pay_account,json=payAccount,proto3,oneof" json:"pay_account,omitempty"`
	BuyerNick           *string                    `protobuf:"bytes,24,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	ReceiverName        *string                    `protobuf:"bytes,25,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince    *int32                     `protobuf:"varint,26,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity        *int32                     `protobuf:"varint,27,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict    *int32                     `protobuf:"varint,28,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress     *string                    `protobuf:"bytes,29,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile      *string                    `protobuf:"bytes,30,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	ReceiverTelno       *string                    `protobuf:"bytes,31,opt,name=receiver_telno,json=receiverTelno,proto3,oneof" json:"receiver_telno,omitempty"`
	ReceiverZip         *string                    `protobuf:"bytes,32,opt,name=receiver_zip,json=receiverZip,proto3,oneof" json:"receiver_zip,omitempty"`
	ReceiverArea        *string                    `protobuf:"bytes,33,opt,name=receiver_area,json=receiverArea,proto3,oneof" json:"receiver_area,omitempty"`
	ReceiverRing        *string                    `protobuf:"bytes,34,opt,name=receiver_ring,json=receiverRing,proto3,oneof" json:"receiver_ring,omitempty"`
	ReceiverDtb         *string                    `protobuf:"bytes,35,opt,name=receiver_dtb,json=receiverDtb,proto3,oneof" json:"receiver_dtb,omitempty"`
	ToDeliverTime       *string                    `protobuf:"bytes,36,opt,name=to_deliver_time,json=toDeliverTime,proto3,oneof" json:"to_deliver_time,omitempty"`
	BadReason           *int32                     `protobuf:"varint,37,opt,name=bad_reason,json=badReason,proto3,oneof" json:"bad_reason,omitempty"`
	LogisticsId         *int32                     `protobuf:"varint,38,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	LogisticsName       *string                    `protobuf:"bytes,39,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode       *string                    `protobuf:"bytes,40,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsType       *int32                     `protobuf:"varint,41,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo         *string                    `protobuf:"bytes,42,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ShopId              *int32                     `protobuf:"varint,43,opt,name=shop_id,json=shopId,proto3,oneof" json:"shop_id,omitempty"`
	WarehouseId         *int32                     `protobuf:"varint,44,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	CheckStep           *int32                     `protobuf:"varint,45,opt,name=check_step,json=checkStep,proto3,oneof" json:"check_step,omitempty"`
	UnmergeMask         *int32                     `protobuf:"varint,46,opt,name=unmerge_mask,json=unmergeMask,proto3,oneof" json:"unmerge_mask,omitempty"`
	DelayToTime         *string                    `protobuf:"bytes,47,opt,name=delay_to_time,json=delayToTime,proto3,oneof" json:"delay_to_time,omitempty"`
	CustomerType        *int32                     `protobuf:"varint,48,opt,name=customer_type,json=customerType,proto3,oneof" json:"customer_type,omitempty"`
	CustomerId          *string                    `protobuf:"bytes,49,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	ReceiverCountry     *int32                     `protobuf:"varint,50,opt,name=receiver_country,json=receiverCountry,proto3,oneof" json:"receiver_country,omitempty"`
	PreChargeTime       *string                    `protobuf:"bytes,51,opt,name=pre_charge_time,json=preChargeTime,proto3,oneof" json:"pre_charge_time,omitempty"`
	IsPrevNotify        *int32                     `protobuf:"varint,52,opt,name=is_prev_notify,json=isPrevNotify,proto3,oneof" json:"is_prev_notify,omitempty"`
	NoteCount           *int32                     `protobuf:"varint,53,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	BuyerMessageCount   *int32                     `protobuf:"varint,54,opt,name=buyer_message_count,json=buyerMessageCount,proto3,oneof" json:"buyer_message_count,omitempty"`
	CsRemarkCount       *int32                     `protobuf:"varint,55,opt,name=cs_remark_count,json=csRemarkCount,proto3,oneof" json:"cs_remark_count,omitempty"`
	CsRemarkChangeCount *int32                     `protobuf:"varint,56,opt,name=cs_remark_change_count,json=csRemarkChangeCount,proto3,oneof" json:"cs_remark_change_count,omitempty"`
	DiscountChange      *float64                   `protobuf:"fixed64,57,opt,name=discount_change,json=discountChange,proto3,oneof" json:"discount_change,omitempty"`
	TradePrepay         *float64                   `protobuf:"fixed64,58,opt,name=trade_prepay,json=tradePrepay,proto3,oneof" json:"trade_prepay,omitempty"`
	PiAmount            *float64                   `protobuf:"fixed64,59,opt,name=pi_amount,json=piAmount,proto3,oneof" json:"pi_amount,omitempty"`
	OtherCost           *float64                   `protobuf:"fixed64,60,opt,name=other_cost,json=otherCost,proto3,oneof" json:"other_cost,omitempty"`
	Volume              *float64                   `protobuf:"fixed64,61,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	SalesScore          *string                    `protobuf:"bytes,62,opt,name=sales_score,json=salesScore,proto3,oneof" json:"sales_score,omitempty"`
	FlagId              *int32                     `protobuf:"varint,63,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	IsSealed            *int32                     `protobuf:"varint,64,opt,name=is_sealed,json=isSealed,proto3,oneof" json:"is_sealed,omitempty"`
	GiftMask            *int32                     `protobuf:"varint,65,opt,name=gift_mask,json=giftMask,proto3,oneof" json:"gift_mask,omitempty"`
	SplitFromTradeId    *string                    `protobuf:"bytes,66,opt,name=split_from_trade_id,json=splitFromTradeId,proto3,oneof" json:"split_from_trade_id,omitempty"`
	LogisticsTemplateId *string                    `protobuf:"bytes,67,opt,name=logistics_template_id,json=logisticsTemplateId,proto3,oneof" json:"logistics_template_id,omitempty"`
	SendbillTemplateId  *string                    `protobuf:"bytes,68,opt,name=sendbill_template_id,json=sendbillTemplateId,proto3,oneof" json:"sendbill_template_id,omitempty"`
	RevertReason        *int32                     `protobuf:"varint,69,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	CancelReason        *int32                     `protobuf:"varint,70,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	IsUnpaymentSms      *int32                     `protobuf:"varint,71,opt,name=is_unpayment_sms,json=isUnpaymentSms,proto3,oneof" json:"is_unpayment_sms,omitempty"`
	PackageId           *string                    `protobuf:"bytes,72,opt,name=package_id,json=packageId,proto3,oneof" json:"package_id,omitempty"`
	TradeMask           *string                    `protobuf:"bytes,73,opt,name=trade_mask,json=tradeMask,proto3,oneof" json:"trade_mask,omitempty"`
	Reserve             *string                    `protobuf:"bytes,74,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	LargeType           *int32                     `protobuf:"varint,75,opt,name=large_type,json=largeType,proto3,oneof" json:"large_type,omitempty"`
	BuyerMessage        *string                    `protobuf:"bytes,76,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	CsRemark            *string                    `protobuf:"bytes,77,opt,name=cs_remark,json=csRemark,proto3,oneof" json:"cs_remark,omitempty"`
	RemarkFlag          *int32                     `protobuf:"varint,78,opt,name=remark_flag,json=remarkFlag,proto3,oneof" json:"remark_flag,omitempty"`
	PrintRemark         *string                    `protobuf:"bytes,79,opt,name=print_remark,json=printRemark,proto3,oneof" json:"print_remark,omitempty"`
	GoodsTypeCount      *int32                     `protobuf:"varint,80,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsCount          *float64                   `protobuf:"fixed64,81,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsAmount         *float64                   `protobuf:"fixed64,82,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostAmount          *float64                   `protobuf:"fixed64,83,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount         *float64                   `protobuf:"fixed64,84,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	Discount            *float64                   `protobuf:"fixed64,85,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	Receivable          *float64                   `protobuf:"fixed64,86,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	DapAmount           *float64                   `protobuf:"fixed64,87,opt,name=dap_amount,json=dapAmount,proto3,oneof" json:"dap_amount,omitempty"`
	CodAmount           *float64                   `protobuf:"fixed64,88,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	ExtCodFee           *float64                   `protobuf:"fixed64,89,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	GoodsCost           *float64                   `protobuf:"fixed64,90,opt,name=goods_cost,json=goodsCost,proto3,oneof" json:"goods_cost,omitempty"`
	PostCost            *float64                   `protobuf:"fixed64,91,opt,name=post_cost,json=postCost,proto3,oneof" json:"post_cost,omitempty"`
	Paid                *float64                   `protobuf:"fixed64,92,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	Weight              *float64                   `protobuf:"fixed64,93,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Profit              *float64                   `protobuf:"fixed64,94,opt,name=profit,proto3,oneof" json:"profit,omitempty"`
	Tax                 *float64                   `protobuf:"fixed64,95,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TaxRate             *float64                   `protobuf:"fixed64,96,opt,name=tax_rate,json=taxRate,proto3,oneof" json:"tax_rate,omitempty"`
	Commission          *float64                   `protobuf:"fixed64,97,opt,name=commission,proto3,oneof" json:"commission,omitempty"`
	InvoiceType         *int32                     `protobuf:"varint,98,opt,name=invoice_type,json=invoiceType,proto3,oneof" json:"invoice_type,omitempty"`
	InvoiceTitle        *string                    `protobuf:"bytes,99,opt,name=invoice_title,json=invoiceTitle,proto3,oneof" json:"invoice_title,omitempty"`
	InvoiceContent      *string                    `protobuf:"bytes,100,opt,name=invoice_content,json=invoiceContent,proto3,oneof" json:"invoice_content,omitempty"`
	SalesmanId          *int32                     `protobuf:"varint,101,opt,name=salesman_id,json=salesmanId,proto3,oneof" json:"salesman_id,omitempty"`
	CheckerId           *int32                     `protobuf:"varint,102,opt,name=checker_id,json=checkerId,proto3,oneof" json:"checker_id,omitempty"`
	Fullname            *string                    `protobuf:"bytes,103,opt,name=fullname,proto3,oneof" json:"fullname,omitempty"`
	CheckerName         *string                    `protobuf:"bytes,104,opt,name=checker_name,json=checkerName,proto3,oneof" json:"checker_name,omitempty"`
	FcheckerId          *int32                     `protobuf:"varint,105,opt,name=fchecker_id,json=fcheckerId,proto3,oneof" json:"fchecker_id,omitempty"`
	CheckouterId        *int32                     `protobuf:"varint,106,opt,name=checkouter_id,json=checkouterId,proto3,oneof" json:"checkouter_id,omitempty"`
	StockoutNo          *string                    `protobuf:"bytes,107,opt,name=stockout_no,json=stockoutNo,proto3,oneof" json:"stockout_no,omitempty"`
	FlagName            *string                    `protobuf:"bytes,108,opt,name=flag_name,json=flagName,proto3,oneof" json:"flag_name,omitempty"`
	TradeFrom           *int32                     `protobuf:"varint,109,opt,name=trade_from,json=tradeFrom,proto3,oneof" json:"trade_from,omitempty"`
	SingleSpecNo        *string                    `protobuf:"bytes,110,opt,name=single_spec_no,json=singleSpecNo,proto3,oneof" json:"single_spec_no,omitempty"`
	RawGoodsCount       *float64                   `protobuf:"fixed64,111,opt,name=raw_goods_count,json=rawGoodsCount,proto3,oneof" json:"raw_goods_count,omitempty"`
	RawGoodsTypeCount   *int32                     `protobuf:"varint,112,opt,name=raw_goods_type_count,json=rawGoodsTypeCount,proto3,oneof" json:"raw_goods_type_count,omitempty"`
	Currency            *string                    `protobuf:"bytes,113,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	SplitPackageNum     *int32                     `protobuf:"varint,114,opt,name=split_package_num,json=splitPackageNum,proto3,oneof" json:"split_package_num,omitempty"`
	InvoiceId           *int32                     `protobuf:"varint,115,opt,name=invoice_id,json=invoiceId,proto3,oneof" json:"invoice_id,omitempty"`
	VersionId           *int32                     `protobuf:"varint,116,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	Modified            *string                    `protobuf:"bytes,117,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	IdCardType          *int32                     `protobuf:"varint,118,opt,name=id_card_type,json=idCardType,proto3,oneof" json:"id_card_type,omitempty"`
	IdCard              *string                    `protobuf:"bytes,119,opt,name=id_card,json=idCard,proto3,oneof" json:"id_card,omitempty"`
	ColorFlag           *int32                     `protobuf:"varint,120,opt,name=color_flag,json=colorFlag,proto3,oneof" json:"color_flag,omitempty"`
	Oaid                *string                    `protobuf:"bytes,121,opt,name=oaid,proto3,oneof" json:"oaid,omitempty"`
	Valid               int32                      `protobuf:"varint,122,opt,name=valid,proto3" json:"valid,omitempty"`
	ConsignTime         *string                    `protobuf:"bytes,123,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	ShopNo              *string                    `protobuf:"bytes,124,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
}

func (x *ItoTradesResponse) Reset() {
	*x = ItoTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItoTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItoTradesResponse) ProtoMessage() {}

func (x *ItoTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItoTradesResponse.ProtoReflect.Descriptor instead.
func (*ItoTradesResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{4}
}

func (x *ItoTradesResponse) GetTradeId() int32 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *ItoTradesResponse) GetTradeDetails() []*ItoTradeDetailsResponse {
	if x != nil {
		return x.TradeDetails
	}
	return nil
}

func (x *ItoTradesResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ItoTradesResponse) GetTradeNo() string {
	if x != nil && x.TradeNo != nil {
		return *x.TradeNo
	}
	return ""
}

func (x *ItoTradesResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *ItoTradesResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ItoTradesResponse) GetShopRemark() string {
	if x != nil && x.ShopRemark != nil {
		return *x.ShopRemark
	}
	return ""
}

func (x *ItoTradesResponse) GetWarehouseType() int32 {
	if x != nil && x.WarehouseType != nil {
		return *x.WarehouseType
	}
	return 0
}

func (x *ItoTradesResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *ItoTradesResponse) GetSrcTids() string {
	if x != nil && x.SrcTids != nil {
		return *x.SrcTids
	}
	return ""
}

func (x *ItoTradesResponse) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *ItoTradesResponse) GetConsignStatus() int32 {
	if x != nil && x.ConsignStatus != nil {
		return *x.ConsignStatus
	}
	return 0
}

func (x *ItoTradesResponse) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *ItoTradesResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *ItoTradesResponse) GetFreezeReason() int32 {
	if x != nil && x.FreezeReason != nil {
		return *x.FreezeReason
	}
	return 0
}

func (x *ItoTradesResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *ItoTradesResponse) GetFenxiaoType() int32 {
	if x != nil && x.FenxiaoType != nil {
		return *x.FenxiaoType
	}
	return 0
}

func (x *ItoTradesResponse) GetFenxiaoNick() string {
	if x != nil && x.FenxiaoNick != nil {
		return *x.FenxiaoNick
	}
	return ""
}

func (x *ItoTradesResponse) GetTradeTime() string {
	if x != nil && x.TradeTime != nil {
		return *x.TradeTime
	}
	return ""
}

func (x *ItoTradesResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *ItoTradesResponse) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *ItoTradesResponse) GetCustomerNo() string {
	if x != nil && x.CustomerNo != nil {
		return *x.CustomerNo
	}
	return ""
}

func (x *ItoTradesResponse) GetPayAccount() string {
	if x != nil && x.PayAccount != nil {
		return *x.PayAccount
	}
	return ""
}

func (x *ItoTradesResponse) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverProvince() int32 {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return 0
}

func (x *ItoTradesResponse) GetReceiverCity() int32 {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return 0
}

func (x *ItoTradesResponse) GetReceiverDistrict() int32 {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return 0
}

func (x *ItoTradesResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverTelno() string {
	if x != nil && x.ReceiverTelno != nil {
		return *x.ReceiverTelno
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverZip() string {
	if x != nil && x.ReceiverZip != nil {
		return *x.ReceiverZip
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverArea() string {
	if x != nil && x.ReceiverArea != nil {
		return *x.ReceiverArea
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverRing() string {
	if x != nil && x.ReceiverRing != nil {
		return *x.ReceiverRing
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverDtb() string {
	if x != nil && x.ReceiverDtb != nil {
		return *x.ReceiverDtb
	}
	return ""
}

func (x *ItoTradesResponse) GetToDeliverTime() string {
	if x != nil && x.ToDeliverTime != nil {
		return *x.ToDeliverTime
	}
	return ""
}

func (x *ItoTradesResponse) GetBadReason() int32 {
	if x != nil && x.BadReason != nil {
		return *x.BadReason
	}
	return 0
}

func (x *ItoTradesResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *ItoTradesResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *ItoTradesResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *ItoTradesResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *ItoTradesResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *ItoTradesResponse) GetShopId() int32 {
	if x != nil && x.ShopId != nil {
		return *x.ShopId
	}
	return 0
}

func (x *ItoTradesResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *ItoTradesResponse) GetCheckStep() int32 {
	if x != nil && x.CheckStep != nil {
		return *x.CheckStep
	}
	return 0
}

func (x *ItoTradesResponse) GetUnmergeMask() int32 {
	if x != nil && x.UnmergeMask != nil {
		return *x.UnmergeMask
	}
	return 0
}

func (x *ItoTradesResponse) GetDelayToTime() string {
	if x != nil && x.DelayToTime != nil {
		return *x.DelayToTime
	}
	return ""
}

func (x *ItoTradesResponse) GetCustomerType() int32 {
	if x != nil && x.CustomerType != nil {
		return *x.CustomerType
	}
	return 0
}

func (x *ItoTradesResponse) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *ItoTradesResponse) GetReceiverCountry() int32 {
	if x != nil && x.ReceiverCountry != nil {
		return *x.ReceiverCountry
	}
	return 0
}

func (x *ItoTradesResponse) GetPreChargeTime() string {
	if x != nil && x.PreChargeTime != nil {
		return *x.PreChargeTime
	}
	return ""
}

func (x *ItoTradesResponse) GetIsPrevNotify() int32 {
	if x != nil && x.IsPrevNotify != nil {
		return *x.IsPrevNotify
	}
	return 0
}

func (x *ItoTradesResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *ItoTradesResponse) GetBuyerMessageCount() int32 {
	if x != nil && x.BuyerMessageCount != nil {
		return *x.BuyerMessageCount
	}
	return 0
}

func (x *ItoTradesResponse) GetCsRemarkCount() int32 {
	if x != nil && x.CsRemarkCount != nil {
		return *x.CsRemarkCount
	}
	return 0
}

func (x *ItoTradesResponse) GetCsRemarkChangeCount() int32 {
	if x != nil && x.CsRemarkChangeCount != nil {
		return *x.CsRemarkChangeCount
	}
	return 0
}

func (x *ItoTradesResponse) GetDiscountChange() float64 {
	if x != nil && x.DiscountChange != nil {
		return *x.DiscountChange
	}
	return 0
}

func (x *ItoTradesResponse) GetTradePrepay() float64 {
	if x != nil && x.TradePrepay != nil {
		return *x.TradePrepay
	}
	return 0
}

func (x *ItoTradesResponse) GetPiAmount() float64 {
	if x != nil && x.PiAmount != nil {
		return *x.PiAmount
	}
	return 0
}

func (x *ItoTradesResponse) GetOtherCost() float64 {
	if x != nil && x.OtherCost != nil {
		return *x.OtherCost
	}
	return 0
}

func (x *ItoTradesResponse) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ItoTradesResponse) GetSalesScore() string {
	if x != nil && x.SalesScore != nil {
		return *x.SalesScore
	}
	return ""
}

func (x *ItoTradesResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *ItoTradesResponse) GetIsSealed() int32 {
	if x != nil && x.IsSealed != nil {
		return *x.IsSealed
	}
	return 0
}

func (x *ItoTradesResponse) GetGiftMask() int32 {
	if x != nil && x.GiftMask != nil {
		return *x.GiftMask
	}
	return 0
}

func (x *ItoTradesResponse) GetSplitFromTradeId() string {
	if x != nil && x.SplitFromTradeId != nil {
		return *x.SplitFromTradeId
	}
	return ""
}

func (x *ItoTradesResponse) GetLogisticsTemplateId() string {
	if x != nil && x.LogisticsTemplateId != nil {
		return *x.LogisticsTemplateId
	}
	return ""
}

func (x *ItoTradesResponse) GetSendbillTemplateId() string {
	if x != nil && x.SendbillTemplateId != nil {
		return *x.SendbillTemplateId
	}
	return ""
}

func (x *ItoTradesResponse) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *ItoTradesResponse) GetCancelReason() int32 {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return 0
}

func (x *ItoTradesResponse) GetIsUnpaymentSms() int32 {
	if x != nil && x.IsUnpaymentSms != nil {
		return *x.IsUnpaymentSms
	}
	return 0
}

func (x *ItoTradesResponse) GetPackageId() string {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return ""
}

func (x *ItoTradesResponse) GetTradeMask() string {
	if x != nil && x.TradeMask != nil {
		return *x.TradeMask
	}
	return ""
}

func (x *ItoTradesResponse) GetReserve() string {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return ""
}

func (x *ItoTradesResponse) GetLargeType() int32 {
	if x != nil && x.LargeType != nil {
		return *x.LargeType
	}
	return 0
}

func (x *ItoTradesResponse) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *ItoTradesResponse) GetCsRemark() string {
	if x != nil && x.CsRemark != nil {
		return *x.CsRemark
	}
	return ""
}

func (x *ItoTradesResponse) GetRemarkFlag() int32 {
	if x != nil && x.RemarkFlag != nil {
		return *x.RemarkFlag
	}
	return 0
}

func (x *ItoTradesResponse) GetPrintRemark() string {
	if x != nil && x.PrintRemark != nil {
		return *x.PrintRemark
	}
	return ""
}

func (x *ItoTradesResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *ItoTradesResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *ItoTradesResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *ItoTradesResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *ItoTradesResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *ItoTradesResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *ItoTradesResponse) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *ItoTradesResponse) GetDapAmount() float64 {
	if x != nil && x.DapAmount != nil {
		return *x.DapAmount
	}
	return 0
}

func (x *ItoTradesResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *ItoTradesResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *ItoTradesResponse) GetGoodsCost() float64 {
	if x != nil && x.GoodsCost != nil {
		return *x.GoodsCost
	}
	return 0
}

func (x *ItoTradesResponse) GetPostCost() float64 {
	if x != nil && x.PostCost != nil {
		return *x.PostCost
	}
	return 0
}

func (x *ItoTradesResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *ItoTradesResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *ItoTradesResponse) GetProfit() float64 {
	if x != nil && x.Profit != nil {
		return *x.Profit
	}
	return 0
}

func (x *ItoTradesResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *ItoTradesResponse) GetTaxRate() float64 {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return 0
}

func (x *ItoTradesResponse) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ItoTradesResponse) GetInvoiceType() int32 {
	if x != nil && x.InvoiceType != nil {
		return *x.InvoiceType
	}
	return 0
}

func (x *ItoTradesResponse) GetInvoiceTitle() string {
	if x != nil && x.InvoiceTitle != nil {
		return *x.InvoiceTitle
	}
	return ""
}

func (x *ItoTradesResponse) GetInvoiceContent() string {
	if x != nil && x.InvoiceContent != nil {
		return *x.InvoiceContent
	}
	return ""
}

func (x *ItoTradesResponse) GetSalesmanId() int32 {
	if x != nil && x.SalesmanId != nil {
		return *x.SalesmanId
	}
	return 0
}

func (x *ItoTradesResponse) GetCheckerId() int32 {
	if x != nil && x.CheckerId != nil {
		return *x.CheckerId
	}
	return 0
}

func (x *ItoTradesResponse) GetFullname() string {
	if x != nil && x.Fullname != nil {
		return *x.Fullname
	}
	return ""
}

func (x *ItoTradesResponse) GetCheckerName() string {
	if x != nil && x.CheckerName != nil {
		return *x.CheckerName
	}
	return ""
}

func (x *ItoTradesResponse) GetFcheckerId() int32 {
	if x != nil && x.FcheckerId != nil {
		return *x.FcheckerId
	}
	return 0
}

func (x *ItoTradesResponse) GetCheckouterId() int32 {
	if x != nil && x.CheckouterId != nil {
		return *x.CheckouterId
	}
	return 0
}

func (x *ItoTradesResponse) GetStockoutNo() string {
	if x != nil && x.StockoutNo != nil {
		return *x.StockoutNo
	}
	return ""
}

func (x *ItoTradesResponse) GetFlagName() string {
	if x != nil && x.FlagName != nil {
		return *x.FlagName
	}
	return ""
}

func (x *ItoTradesResponse) GetTradeFrom() int32 {
	if x != nil && x.TradeFrom != nil {
		return *x.TradeFrom
	}
	return 0
}

func (x *ItoTradesResponse) GetSingleSpecNo() string {
	if x != nil && x.SingleSpecNo != nil {
		return *x.SingleSpecNo
	}
	return ""
}

func (x *ItoTradesResponse) GetRawGoodsCount() float64 {
	if x != nil && x.RawGoodsCount != nil {
		return *x.RawGoodsCount
	}
	return 0
}

func (x *ItoTradesResponse) GetRawGoodsTypeCount() int32 {
	if x != nil && x.RawGoodsTypeCount != nil {
		return *x.RawGoodsTypeCount
	}
	return 0
}

func (x *ItoTradesResponse) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ItoTradesResponse) GetSplitPackageNum() int32 {
	if x != nil && x.SplitPackageNum != nil {
		return *x.SplitPackageNum
	}
	return 0
}

func (x *ItoTradesResponse) GetInvoiceId() int32 {
	if x != nil && x.InvoiceId != nil {
		return *x.InvoiceId
	}
	return 0
}

func (x *ItoTradesResponse) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *ItoTradesResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *ItoTradesResponse) GetIdCardType() int32 {
	if x != nil && x.IdCardType != nil {
		return *x.IdCardType
	}
	return 0
}

func (x *ItoTradesResponse) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

func (x *ItoTradesResponse) GetColorFlag() int32 {
	if x != nil && x.ColorFlag != nil {
		return *x.ColorFlag
	}
	return 0
}

func (x *ItoTradesResponse) GetOaid() string {
	if x != nil && x.Oaid != nil {
		return *x.Oaid
	}
	return ""
}

func (x *ItoTradesResponse) GetValid() int32 {
	if x != nil {
		return x.Valid
	}
	return 0
}

func (x *ItoTradesResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *ItoTradesResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

type StatHmxSalesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatMonth    *string  `protobuf:"bytes,1,opt,name=stat_month,json=statMonth,proto3,oneof" json:"stat_month,omitempty"`
	TradeDate    *string  `protobuf:"bytes,2,opt,name=trade_date,json=tradeDate,proto3,oneof" json:"trade_date,omitempty"`
	RetailAmount float32  `protobuf:"fixed32,3,opt,name=retail_amount,json=retailAmount,proto3" json:"retail_amount,omitempty"`
	Num          int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	ColName      *string  `protobuf:"bytes,5,opt,name=col_name,json=colName,proto3,oneof" json:"col_name,omitempty"`
	Filters      *string  `protobuf:"bytes,6,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
	ShareAmount  *float32 `protobuf:"fixed32,7,opt,name=share_amount,json=shareAmount,proto3,oneof" json:"share_amount,omitempty"`
}

func (x *StatHmxSalesListRequest) Reset() {
	*x = StatHmxSalesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatHmxSalesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatHmxSalesListRequest) ProtoMessage() {}

func (x *StatHmxSalesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatHmxSalesListRequest.ProtoReflect.Descriptor instead.
func (*StatHmxSalesListRequest) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{5}
}

func (x *StatHmxSalesListRequest) GetStatMonth() string {
	if x != nil && x.StatMonth != nil {
		return *x.StatMonth
	}
	return ""
}

func (x *StatHmxSalesListRequest) GetTradeDate() string {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return ""
}

func (x *StatHmxSalesListRequest) GetRetailAmount() float32 {
	if x != nil {
		return x.RetailAmount
	}
	return 0
}

func (x *StatHmxSalesListRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *StatHmxSalesListRequest) GetColName() string {
	if x != nil && x.ColName != nil {
		return *x.ColName
	}
	return ""
}

func (x *StatHmxSalesListRequest) GetFilters() string {
	if x != nil && x.Filters != nil {
		return *x.Filters
	}
	return ""
}

func (x *StatHmxSalesListRequest) GetShareAmount() float32 {
	if x != nil && x.ShareAmount != nil {
		return *x.ShareAmount
	}
	return 0
}

type StatHmxSalesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*StatHmxSalesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StatHmxSalesListResponse) Reset() {
	*x = StatHmxSalesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatHmxSalesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatHmxSalesListResponse) ProtoMessage() {}

func (x *StatHmxSalesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatHmxSalesListResponse.ProtoReflect.Descriptor instead.
func (*StatHmxSalesListResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{6}
}

func (x *StatHmxSalesListResponse) GetResults() []*StatHmxSalesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *StatHmxSalesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type StatHmxSalesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatMonth    *string  `protobuf:"bytes,1,opt,name=stat_month,json=statMonth,proto3,oneof" json:"stat_month,omitempty"`
	TradeDate    *string  `protobuf:"bytes,2,opt,name=trade_date,json=tradeDate,proto3,oneof" json:"trade_date,omitempty"`
	RetailAmount float32  `protobuf:"fixed32,3,opt,name=retail_amount,json=retailAmount,proto3" json:"retail_amount,omitempty"`
	Num          int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	ColName      *string  `protobuf:"bytes,5,opt,name=col_name,json=colName,proto3,oneof" json:"col_name,omitempty"`
	ShareAmount  *float32 `protobuf:"fixed32,6,opt,name=share_amount,json=shareAmount,proto3,oneof" json:"share_amount,omitempty"`
}

func (x *StatHmxSalesResponse) Reset() {
	*x = StatHmxSalesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatHmxSalesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatHmxSalesResponse) ProtoMessage() {}

func (x *StatHmxSalesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatHmxSalesResponse.ProtoReflect.Descriptor instead.
func (*StatHmxSalesResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{7}
}

func (x *StatHmxSalesResponse) GetStatMonth() string {
	if x != nil && x.StatMonth != nil {
		return *x.StatMonth
	}
	return ""
}

func (x *StatHmxSalesResponse) GetTradeDate() string {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return ""
}

func (x *StatHmxSalesResponse) GetRetailAmount() float32 {
	if x != nil {
		return x.RetailAmount
	}
	return 0
}

func (x *StatHmxSalesResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *StatHmxSalesResponse) GetColName() string {
	if x != nil && x.ColName != nil {
		return *x.ColName
	}
	return ""
}

func (x *StatHmxSalesResponse) GetShareAmount() float32 {
	if x != nil && x.ShareAmount != nil {
		return *x.ShareAmount
	}
	return 0
}

type StoreTradesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*StoreTradesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StoreTradesListResponse) Reset() {
	*x = StoreTradesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreTradesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTradesListResponse) ProtoMessage() {}

func (x *StoreTradesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTradesListResponse.ProtoReflect.Descriptor instead.
func (*StoreTradesListResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{8}
}

func (x *StoreTradesListResponse) GetResults() []*StoreTradesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *StoreTradesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type StoreTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *string `protobuf:"bytes,1,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
}

func (x *StoreTradesRequest) Reset() {
	*x = StoreTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTradesRequest) ProtoMessage() {}

func (x *StoreTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTradesRequest.ProtoReflect.Descriptor instead.
func (*StoreTradesRequest) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{9}
}

func (x *StoreTradesRequest) GetFilters() string {
	if x != nil && x.Filters != nil {
		return *x.Filters
	}
	return ""
}

type StoreTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeEmployees []*TradeEmployeesResponse `protobuf:"bytes,2,rep,name=trade_employees,json=tradeEmployees,proto3" json:"trade_employees,omitempty"`
	TradeDetails   []*TradeDetailsResponse   `protobuf:"bytes,3,rep,name=trade_details,json=tradeDetails,proto3" json:"trade_details,omitempty"`
	Created        string                    `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Tid            string                    `protobuf:"bytes,5,opt,name=tid,proto3" json:"tid,omitempty"`
	TradeDate      string                    `protobuf:"bytes,6,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	StoreNo        string                    `protobuf:"bytes,7,opt,name=store_no,json=storeNo,proto3" json:"store_no,omitempty"`
	StoreName      string                    `protobuf:"bytes,8,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
}

func (x *StoreTradesResponse) Reset() {
	*x = StoreTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTradesResponse) ProtoMessage() {}

func (x *StoreTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTradesResponse.ProtoReflect.Descriptor instead.
func (*StoreTradesResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{10}
}

func (x *StoreTradesResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreTradesResponse) GetTradeEmployees() []*TradeEmployeesResponse {
	if x != nil {
		return x.TradeEmployees
	}
	return nil
}

func (x *StoreTradesResponse) GetTradeDetails() []*TradeDetailsResponse {
	if x != nil {
		return x.TradeDetails
	}
	return nil
}

func (x *StoreTradesResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *StoreTradesResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *StoreTradesResponse) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *StoreTradesResponse) GetStoreNo() string {
	if x != nil {
		return x.StoreNo
	}
	return ""
}

func (x *StoreTradesResponse) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

type TradeDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdCode     *string  `protobuf:"bytes,2,opt,name=prod_code,json=prodCode,proto3,oneof" json:"prod_code,omitempty"`
	SpecCode     *string  `protobuf:"bytes,3,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	ProdName     *string  `protobuf:"bytes,4,opt,name=prod_name,json=prodName,proto3,oneof" json:"prod_name,omitempty"`
	RetailPrice  float32  `protobuf:"fixed32,5,opt,name=retail_price,json=retailPrice,proto3" json:"retail_price,omitempty"`
	RetailAmount float32  `protobuf:"fixed32,6,opt,name=retail_amount,json=retailAmount,proto3" json:"retail_amount,omitempty"`
	Num          int32    `protobuf:"varint,7,opt,name=num,proto3" json:"num,omitempty"`
	Status       string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Style        *string  `protobuf:"bytes,9,opt,name=style,proto3,oneof" json:"style,omitempty"`
	Trade        int64    `protobuf:"varint,10,opt,name=trade,proto3" json:"trade,omitempty"`
	SharePrice   *float32 `protobuf:"fixed32,11,opt,name=share_price,json=sharePrice,proto3,oneof" json:"share_price,omitempty"`
	ShareAmount  *float32 `protobuf:"fixed32,12,opt,name=share_amount,json=shareAmount,proto3,oneof" json:"share_amount,omitempty"`
}

func (x *TradeDetailsResponse) Reset() {
	*x = TradeDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeDetailsResponse) ProtoMessage() {}

func (x *TradeDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeDetailsResponse.ProtoReflect.Descriptor instead.
func (*TradeDetailsResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{11}
}

func (x *TradeDetailsResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradeDetailsResponse) GetProdCode() string {
	if x != nil && x.ProdCode != nil {
		return *x.ProdCode
	}
	return ""
}

func (x *TradeDetailsResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *TradeDetailsResponse) GetProdName() string {
	if x != nil && x.ProdName != nil {
		return *x.ProdName
	}
	return ""
}

func (x *TradeDetailsResponse) GetRetailPrice() float32 {
	if x != nil {
		return x.RetailPrice
	}
	return 0
}

func (x *TradeDetailsResponse) GetRetailAmount() float32 {
	if x != nil {
		return x.RetailAmount
	}
	return 0
}

func (x *TradeDetailsResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TradeDetailsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TradeDetailsResponse) GetStyle() string {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return ""
}

func (x *TradeDetailsResponse) GetTrade() int64 {
	if x != nil {
		return x.Trade
	}
	return 0
}

func (x *TradeDetailsResponse) GetSharePrice() float32 {
	if x != nil && x.SharePrice != nil {
		return *x.SharePrice
	}
	return 0
}

func (x *TradeDetailsResponse) GetShareAmount() float32 {
	if x != nil && x.ShareAmount != nil {
		return *x.ShareAmount
	}
	return 0
}

type TradeEmployeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployeeNo   string  `protobuf:"bytes,2,opt,name=employee_no,json=employeeNo,proto3" json:"employee_no,omitempty"`
	EmployeeName string  `protobuf:"bytes,3,opt,name=employee_name,json=employeeName,proto3" json:"employee_name,omitempty"`
	SharePercent float32 `protobuf:"fixed32,4,opt,name=share_percent,json=sharePercent,proto3" json:"share_percent,omitempty"`
	Trade        int64   `protobuf:"varint,5,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *TradeEmployeesResponse) Reset() {
	*x = TradeEmployeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_stat_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeEmployeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeEmployeesResponse) ProtoMessage() {}

func (x *TradeEmployeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_stat_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeEmployeesResponse.ProtoReflect.Descriptor instead.
func (*TradeEmployeesResponse) Descriptor() ([]byte, []int) {
	return file_store_stat_ito_proto_rawDescGZIP(), []int{12}
}

func (x *TradeEmployeesResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradeEmployeesResponse) GetEmployeeNo() string {
	if x != nil {
		return x.EmployeeNo
	}
	return ""
}

func (x *TradeEmployeesResponse) GetEmployeeName() string {
	if x != nil {
		return x.EmployeeName
	}
	return ""
}

func (x *TradeEmployeesResponse) GetSharePercent() float32 {
	if x != nil {
		return x.SharePercent
	}
	return 0
}

func (x *TradeEmployeesResponse) GetTrade() int64 {
	if x != nil {
		return x.Trade
	}
	return 0
}

var File_store_stat_ito_proto protoreflect.FileDescriptor

var file_store_stat_ito_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x69, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xf8, 0x19, 0x0a, 0x17, 0x49, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x73, 0x72, 0x63, 0x4f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73, 0x72, 0x63, 0x54, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x4f, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0e, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x12, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x06, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x18, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1a, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52,
	0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20,
	0x52, 0x07, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x21, 0x52, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x08, 0x73, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x0b, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x24, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x26, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x27, 0x52, 0x0a, 0x69, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0a, 0x69,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x2b, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x70, 0x69,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2d, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x2e, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x2f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x31, 0x52, 0x09,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x32, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x73,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x35, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x39, 0x52, 0x07, 0x74, 0x61,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3a,
	0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x3b, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x3c, 0x52, 0x05, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x3d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x3f, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x40, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x41, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x74, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x6f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x22, 0x78, 0x0a, 0x15, 0x49, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x10, 0x49, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xec, 0x35, 0x0a, 0x11, 0x49, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x69, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0c, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78,
	0x69, 0x61, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x65,
	0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x18, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x19, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1a, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x6e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x7a,
	0x69, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x72, 0x65,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x62, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x44, 0x74, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x20, 0x52, 0x0d, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x09, 0x62, 0x61, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x25, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x27, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x28, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x0b, 0x75,
	0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x2e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2f, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x0c, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x31, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x32, 0x52, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x33, 0x52, 0x0d, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x34, 0x52, 0x13, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x48, 0x35, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x36, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x37, 0x52, 0x08, 0x70, 0x69, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x38, 0x52, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x39, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3a, 0x52, 0x0a,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3b,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3c,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x3d, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3e, 0x52, 0x10,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x3f, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14,
	0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x12, 0x73, 0x65,
	0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x41, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x42, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x75, 0x6e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x43, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x46, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x47, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x49,
	0x52, 0x08, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x4a, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x46, 0x6c, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x4c, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x4d, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x01, 0x48, 0x4e, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x01, 0x48, 0x4f, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x50, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x48, 0x51, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01, 0x48, 0x52, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x64, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x53, 0x52, 0x09, 0x64, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x54, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x01, 0x48, 0x55, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x56, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x57, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x58, 0x52,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x59, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5a, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x5b, 0x52, 0x03, 0x74, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5c, 0x52, 0x07, 0x74,
	0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x61, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5d, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x62,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5f, 0x52,
	0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x60, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x61, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x48, 0x62, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x63, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x64, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x48, 0x65, 0x52, 0x0a, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x66,
	0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x67, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x68, 0x52, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x69, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6a, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x6b, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x6c, 0x52, 0x11, 0x72, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6d, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x48, 0x6e, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x05, 0x48, 0x70, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x48, 0x71, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x48, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x48, 0x73,
	0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x74, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x48, 0x75, 0x52,
	0x04, 0x6f, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x76, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x77, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x69, 0x64, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x65,
	0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66,
	0x65, 0x6e, 0x78, 0x69, 0x61, 0x6f, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x62, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x74, 0x61, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x61,
	0x77, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6f, 0x61, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x08, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7e, 0x0a, 0x18,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x02, 0x0a,
	0x14, 0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x03, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x32, 0x8c, 0x02,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x35, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x30, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf8, 0x02, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x74, 0x49, 0x74, 0x6f, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x48, 0x6d, 0x78, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x2e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x49, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x49, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70, 0x62,
	0x73, 0x74, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_store_stat_ito_proto_rawDescOnce sync.Once
	file_store_stat_ito_proto_rawDescData = file_store_stat_ito_proto_rawDesc
)

func file_store_stat_ito_proto_rawDescGZIP() []byte {
	file_store_stat_ito_proto_rawDescOnce.Do(func() {
		file_store_stat_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_store_stat_ito_proto_rawDescData)
	})
	return file_store_stat_ito_proto_rawDescData
}

var file_store_stat_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_store_stat_ito_proto_goTypes = []interface{}{
	(*CustomerResponse)(nil),         // 0: store_service.store_stat_ito.CustomerResponse
	(*ItoTradeDetailsResponse)(nil),  // 1: store_service.store_stat_ito.ItoTradeDetailsResponse
	(*ItoTradesListResponse)(nil),    // 2: store_service.store_stat_ito.ItoTradesListResponse
	(*ItoTradesRequest)(nil),         // 3: store_service.store_stat_ito.ItoTradesRequest
	(*ItoTradesResponse)(nil),        // 4: store_service.store_stat_ito.ItoTradesResponse
	(*StatHmxSalesListRequest)(nil),  // 5: store_service.store_stat_ito.StatHmxSalesListRequest
	(*StatHmxSalesListResponse)(nil), // 6: store_service.store_stat_ito.StatHmxSalesListResponse
	(*StatHmxSalesResponse)(nil),     // 7: store_service.store_stat_ito.StatHmxSalesResponse
	(*StoreTradesListResponse)(nil),  // 8: store_service.store_stat_ito.StoreTradesListResponse
	(*StoreTradesRequest)(nil),       // 9: store_service.store_stat_ito.StoreTradesRequest
	(*StoreTradesResponse)(nil),      // 10: store_service.store_stat_ito.StoreTradesResponse
	(*TradeDetailsResponse)(nil),     // 11: store_service.store_stat_ito.TradeDetailsResponse
	(*TradeEmployeesResponse)(nil),   // 12: store_service.store_stat_ito.TradeEmployeesResponse
	(*structpb.Struct)(nil),          // 13: google.protobuf.Struct
}
var file_store_stat_ito_proto_depIdxs = []int32{
	13, // 0: store_service.store_stat_ito.CustomerResponse.results:type_name -> google.protobuf.Struct
	4,  // 1: store_service.store_stat_ito.ItoTradesListResponse.results:type_name -> store_service.store_stat_ito.ItoTradesResponse
	1,  // 2: store_service.store_stat_ito.ItoTradesResponse.trade_details:type_name -> store_service.store_stat_ito.ItoTradeDetailsResponse
	7,  // 3: store_service.store_stat_ito.StatHmxSalesListResponse.results:type_name -> store_service.store_stat_ito.StatHmxSalesResponse
	10, // 4: store_service.store_stat_ito.StoreTradesListResponse.results:type_name -> store_service.store_stat_ito.StoreTradesResponse
	12, // 5: store_service.store_stat_ito.StoreTradesResponse.trade_employees:type_name -> store_service.store_stat_ito.TradeEmployeesResponse
	11, // 6: store_service.store_stat_ito.StoreTradesResponse.trade_details:type_name -> store_service.store_stat_ito.TradeDetailsResponse
	5,  // 7: store_service.store_stat_ito.StatHmxSalesController.List:input_type -> store_service.store_stat_ito.StatHmxSalesListRequest
	9,  // 8: store_service.store_stat_ito.StatHmxSalesController.TradeDetails:input_type -> store_service.store_stat_ito.StoreTradesRequest
	5,  // 9: store_service.store_stat_ito.StatItoSalesController.List:input_type -> store_service.store_stat_ito.StatHmxSalesListRequest
	3,  // 10: store_service.store_stat_ito.StatItoSalesController.TradeCount:input_type -> store_service.store_stat_ito.ItoTradesRequest
	3,  // 11: store_service.store_stat_ito.StatItoSalesController.TradeDetails:input_type -> store_service.store_stat_ito.ItoTradesRequest
	6,  // 12: store_service.store_stat_ito.StatHmxSalesController.List:output_type -> store_service.store_stat_ito.StatHmxSalesListResponse
	8,  // 13: store_service.store_stat_ito.StatHmxSalesController.TradeDetails:output_type -> store_service.store_stat_ito.StoreTradesListResponse
	6,  // 14: store_service.store_stat_ito.StatItoSalesController.List:output_type -> store_service.store_stat_ito.StatHmxSalesListResponse
	0,  // 15: store_service.store_stat_ito.StatItoSalesController.TradeCount:output_type -> store_service.store_stat_ito.CustomerResponse
	2,  // 16: store_service.store_stat_ito.StatItoSalesController.TradeDetails:output_type -> store_service.store_stat_ito.ItoTradesListResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_store_stat_ito_proto_init() }
func file_store_stat_ito_proto_init() {
	if File_store_stat_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_store_stat_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTradeDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTradesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItoTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatHmxSalesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatHmxSalesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatHmxSalesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreTradesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_stat_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeEmployeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_store_stat_ito_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_store_stat_ito_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_store_stat_ito_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_store_stat_ito_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_store_stat_ito_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_store_stat_ito_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_store_stat_ito_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_store_stat_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_store_stat_ito_proto_goTypes,
		DependencyIndexes: file_store_stat_ito_proto_depIdxs,
		MessageInfos:      file_store_stat_ito_proto_msgTypes,
	}.Build()
	File_store_stat_ito_proto = out.File
	file_store_stat_ito_proto_rawDesc = nil
	file_store_stat_ito_proto_goTypes = nil
	file_store_stat_ito_proto_depIdxs = nil
}
