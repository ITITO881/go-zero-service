// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: manager_ito.proto

package pbmgrito

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountStaffTypeOptionsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AccountStaffTypeOptionsResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AccountStaffTypeOptionsListResponse) Reset() {
	*x = AccountStaffTypeOptionsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStaffTypeOptionsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStaffTypeOptionsListResponse) ProtoMessage() {}

func (x *AccountStaffTypeOptionsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStaffTypeOptionsListResponse.ProtoReflect.Descriptor instead.
func (*AccountStaffTypeOptionsListResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{0}
}

func (x *AccountStaffTypeOptionsListResponse) GetResults() []*AccountStaffTypeOptionsResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AccountStaffTypeOptionsListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AccountStaffTypeOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccountStaffTypeOptionsRequest) Reset() {
	*x = AccountStaffTypeOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStaffTypeOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStaffTypeOptionsRequest) ProtoMessage() {}

func (x *AccountStaffTypeOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStaffTypeOptionsRequest.ProtoReflect.Descriptor instead.
func (*AccountStaffTypeOptionsRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{1}
}

type AccountStaffTypeOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *AccountStaffTypeOptionsResponse) Reset() {
	*x = AccountStaffTypeOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStaffTypeOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStaffTypeOptionsResponse) ProtoMessage() {}

func (x *AccountStaffTypeOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStaffTypeOptionsResponse.ProtoReflect.Descriptor instead.
func (*AccountStaffTypeOptionsResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{2}
}

func (x *AccountStaffTypeOptionsResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AccountStaffTypeOptionsResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type AccountsUsersinfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string                `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Dept     []*DepartmentResponse `protobuf:"bytes,7,rep,name=dept,proto3" json:"dept,omitempty"`
}

func (x *AccountsUsersinfoResponse) Reset() {
	*x = AccountsUsersinfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsUsersinfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsUsersinfoResponse) ProtoMessage() {}

func (x *AccountsUsersinfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsUsersinfoResponse.ProtoReflect.Descriptor instead.
func (*AccountsUsersinfoResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{3}
}

func (x *AccountsUsersinfoResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountsUsersinfoResponse) GetDept() []*DepartmentResponse {
	if x != nil {
		return x.Dept
	}
	return nil
}

type DepartmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DepartmentResponse) Reset() {
	*x = DepartmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentResponse) ProtoMessage() {}

func (x *DepartmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentResponse.ProtoReflect.Descriptor instead.
func (*DepartmentResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{4}
}

func (x *DepartmentResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DepartmentResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ManagerWebModelDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManagerWebModelDestroyRequest) Reset() {
	*x = ManagerWebModelDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWebModelDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWebModelDestroyRequest) ProtoMessage() {}

func (x *ManagerWebModelDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerWebModelDestroyRequest.ProtoReflect.Descriptor instead.
func (*ManagerWebModelDestroyRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{5}
}

func (x *ManagerWebModelDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ManagerWebModelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Password        string  `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Filters         string  `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	DateJoined      string  `protobuf:"bytes,4,opt,name=date_joined,json=dateJoined,proto3" json:"date_joined,omitempty"`
	LastLogin       *string `protobuf:"bytes,5,opt,name=last_login,json=lastLogin,proto3,oneof" json:"last_login,omitempty"`
	IsSuperuser     bool    `protobuf:"varint,6,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	Username        string  `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	FirstName       string  `protobuf:"bytes,8,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string  `protobuf:"bytes,9,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email           string  `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	IsStaff         bool    `protobuf:"varint,11,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	IsActive        bool    `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Nickname        string  `protobuf:"bytes,13,opt,name=nickname,proto3" json:"nickname,omitempty"`
	MobilePhone     string  `protobuf:"bytes,14,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Describe        *string `protobuf:"bytes,15,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	UserAvatar      *string `protobuf:"bytes,16,opt,name=user_avatar,json=userAvatar,proto3,oneof" json:"user_avatar,omitempty"`
	ExpirationTime  *string `protobuf:"bytes,17,opt,name=expiration_time,json=expirationTime,proto3,oneof" json:"expiration_time,omitempty"`
	Groups          []int32 `protobuf:"varint,19,rep,packed,name=groups,proto3" json:"groups,omitempty"`
	UserPermissions []int32 `protobuf:"varint,20,rep,packed,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
	Creator         int32   `protobuf:"varint,21,opt,name=creator,proto3" json:"creator,omitempty"`
	StaffType       *int32  `protobuf:"varint,22,opt,name=staff_type,json=staffType,proto3,oneof" json:"staff_type,omitempty"`
	WebName         string  `protobuf:"bytes,23,opt,name=web_name,json=webName,proto3" json:"web_name,omitempty"`
}

func (x *ManagerWebModelListRequest) Reset() {
	*x = ManagerWebModelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWebModelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWebModelListRequest) ProtoMessage() {}

func (x *ManagerWebModelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerWebModelListRequest.ProtoReflect.Descriptor instead.
func (*ManagerWebModelListRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{6}
}

func (x *ManagerWebModelListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ManagerWebModelListRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetDateJoined() string {
	if x != nil {
		return x.DateJoined
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetLastLogin() string {
	if x != nil && x.LastLogin != nil {
		return *x.LastLogin
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetIsSuperuser() bool {
	if x != nil {
		return x.IsSuperuser
	}
	return false
}

func (x *ManagerWebModelListRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetIsStaff() bool {
	if x != nil {
		return x.IsStaff
	}
	return false
}

func (x *ManagerWebModelListRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ManagerWebModelListRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetUserAvatar() string {
	if x != nil && x.UserAvatar != nil {
		return *x.UserAvatar
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetExpirationTime() string {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return ""
}

func (x *ManagerWebModelListRequest) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ManagerWebModelListRequest) GetUserPermissions() []int32 {
	if x != nil {
		return x.UserPermissions
	}
	return nil
}

func (x *ManagerWebModelListRequest) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ManagerWebModelListRequest) GetStaffType() int32 {
	if x != nil && x.StaffType != nil {
		return *x.StaffType
	}
	return 0
}

func (x *ManagerWebModelListRequest) GetWebName() string {
	if x != nil {
		return x.WebName
	}
	return ""
}

type ManagerWebModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ManagerWebModelResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ManagerWebModelListResponse) Reset() {
	*x = ManagerWebModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWebModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWebModelListResponse) ProtoMessage() {}

func (x *ManagerWebModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerWebModelListResponse.ProtoReflect.Descriptor instead.
func (*ManagerWebModelListResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{7}
}

func (x *ManagerWebModelListResponse) GetResults() []*ManagerWebModelResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ManagerWebModelListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ManagerWebModelPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Filters              string   `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	DateJoined           string   `protobuf:"bytes,4,opt,name=date_joined,json=dateJoined,proto3" json:"date_joined,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	LastLogin            *string  `protobuf:"bytes,6,opt,name=last_login,json=lastLogin,proto3,oneof" json:"last_login,omitempty"`
	IsSuperuser          bool     `protobuf:"varint,7,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	Username             string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	FirstName            string   `protobuf:"bytes,9,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,10,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email                string   `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	IsStaff              bool     `protobuf:"varint,12,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	IsActive             bool     `protobuf:"varint,13,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Nickname             string   `protobuf:"bytes,14,opt,name=nickname,proto3" json:"nickname,omitempty"`
	MobilePhone          string   `protobuf:"bytes,15,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Describe             *string  `protobuf:"bytes,16,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	UserAvatar           *string  `protobuf:"bytes,17,opt,name=user_avatar,json=userAvatar,proto3,oneof" json:"user_avatar,omitempty"`
	ExpirationTime       *string  `protobuf:"bytes,18,opt,name=expiration_time,json=expirationTime,proto3,oneof" json:"expiration_time,omitempty"`
	Groups               []int32  `protobuf:"varint,20,rep,packed,name=groups,proto3" json:"groups,omitempty"`
	UserPermissions      []int32  `protobuf:"varint,21,rep,packed,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
	Creator              int32    `protobuf:"varint,22,opt,name=creator,proto3" json:"creator,omitempty"`
	StaffType            *int32   `protobuf:"varint,23,opt,name=staff_type,json=staffType,proto3,oneof" json:"staff_type,omitempty"`
	WebName              string   `protobuf:"bytes,24,opt,name=web_name,json=webName,proto3" json:"web_name,omitempty"`
}

func (x *ManagerWebModelPartialUpdateRequest) Reset() {
	*x = ManagerWebModelPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWebModelPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWebModelPartialUpdateRequest) ProtoMessage() {}

func (x *ManagerWebModelPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerWebModelPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ManagerWebModelPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{8}
}

func (x *ManagerWebModelPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ManagerWebModelPartialUpdateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetDateJoined() string {
	if x != nil {
		return x.DateJoined
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ManagerWebModelPartialUpdateRequest) GetLastLogin() string {
	if x != nil && x.LastLogin != nil {
		return *x.LastLogin
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetIsSuperuser() bool {
	if x != nil {
		return x.IsSuperuser
	}
	return false
}

func (x *ManagerWebModelPartialUpdateRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetIsStaff() bool {
	if x != nil {
		return x.IsStaff
	}
	return false
}

func (x *ManagerWebModelPartialUpdateRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ManagerWebModelPartialUpdateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetUserAvatar() string {
	if x != nil && x.UserAvatar != nil {
		return *x.UserAvatar
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetExpirationTime() string {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return ""
}

func (x *ManagerWebModelPartialUpdateRequest) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ManagerWebModelPartialUpdateRequest) GetUserPermissions() []int32 {
	if x != nil {
		return x.UserPermissions
	}
	return nil
}

func (x *ManagerWebModelPartialUpdateRequest) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ManagerWebModelPartialUpdateRequest) GetStaffType() int32 {
	if x != nil && x.StaffType != nil {
		return *x.StaffType
	}
	return 0
}

func (x *ManagerWebModelPartialUpdateRequest) GetWebName() string {
	if x != nil {
		return x.WebName
	}
	return ""
}

type ManagerWebModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Password        string  `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Filters         string  `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	DateJoined      string  `protobuf:"bytes,4,opt,name=date_joined,json=dateJoined,proto3" json:"date_joined,omitempty"`
	LastLogin       *string `protobuf:"bytes,5,opt,name=last_login,json=lastLogin,proto3,oneof" json:"last_login,omitempty"`
	IsSuperuser     bool    `protobuf:"varint,6,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	Username        string  `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	FirstName       string  `protobuf:"bytes,8,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string  `protobuf:"bytes,9,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email           string  `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	IsStaff         bool    `protobuf:"varint,11,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	IsActive        bool    `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Nickname        string  `protobuf:"bytes,13,opt,name=nickname,proto3" json:"nickname,omitempty"`
	MobilePhone     string  `protobuf:"bytes,14,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Describe        *string `protobuf:"bytes,15,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	UserAvatar      *string `protobuf:"bytes,16,opt,name=user_avatar,json=userAvatar,proto3,oneof" json:"user_avatar,omitempty"`
	ExpirationTime  *string `protobuf:"bytes,17,opt,name=expiration_time,json=expirationTime,proto3,oneof" json:"expiration_time,omitempty"`
	Groups          []int32 `protobuf:"varint,19,rep,packed,name=groups,proto3" json:"groups,omitempty"`
	UserPermissions []int32 `protobuf:"varint,20,rep,packed,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
	Creator         int32   `protobuf:"varint,21,opt,name=creator,proto3" json:"creator,omitempty"`
	StaffType       *int32  `protobuf:"varint,22,opt,name=staff_type,json=staffType,proto3,oneof" json:"staff_type,omitempty"`
	WebName         string  `protobuf:"bytes,23,opt,name=web_name,json=webName,proto3" json:"web_name,omitempty"`
}

func (x *ManagerWebModelRequest) Reset() {
	*x = ManagerWebModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWebModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWebModelRequest) ProtoMessage() {}

func (x *ManagerWebModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerWebModelRequest.ProtoReflect.Descriptor instead.
func (*ManagerWebModelRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{9}
}

func (x *ManagerWebModelRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ManagerWebModelRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ManagerWebModelRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ManagerWebModelRequest) GetDateJoined() string {
	if x != nil {
		return x.DateJoined
	}
	return ""
}

func (x *ManagerWebModelRequest) GetLastLogin() string {
	if x != nil && x.LastLogin != nil {
		return *x.LastLogin
	}
	return ""
}

func (x *ManagerWebModelRequest) GetIsSuperuser() bool {
	if x != nil {
		return x.IsSuperuser
	}
	return false
}

func (x *ManagerWebModelRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ManagerWebModelRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ManagerWebModelRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ManagerWebModelRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ManagerWebModelRequest) GetIsStaff() bool {
	if x != nil {
		return x.IsStaff
	}
	return false
}

func (x *ManagerWebModelRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ManagerWebModelRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ManagerWebModelRequest) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *ManagerWebModelRequest) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *ManagerWebModelRequest) GetUserAvatar() string {
	if x != nil && x.UserAvatar != nil {
		return *x.UserAvatar
	}
	return ""
}

func (x *ManagerWebModelRequest) GetExpirationTime() string {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return ""
}

func (x *ManagerWebModelRequest) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ManagerWebModelRequest) GetUserPermissions() []int32 {
	if x != nil {
		return x.UserPermissions
	}
	return nil
}

func (x *ManagerWebModelRequest) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ManagerWebModelRequest) GetStaffType() int32 {
	if x != nil && x.StaffType != nil {
		return *x.StaffType
	}
	return 0
}

func (x *ManagerWebModelRequest) GetWebName() string {
	if x != nil {
		return x.WebName
	}
	return ""
}

type ManagerWebModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DateJoined      string                   `protobuf:"bytes,2,opt,name=date_joined,json=dateJoined,proto3" json:"date_joined,omitempty"`
	LastLogin       *string                  `protobuf:"bytes,3,opt,name=last_login,json=lastLogin,proto3,oneof" json:"last_login,omitempty"`
	IsSuperuser     bool                     `protobuf:"varint,4,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	Username        string                   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	FirstName       string                   `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string                   `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email           string                   `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	IsStaff         bool                     `protobuf:"varint,9,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	IsActive        bool                     `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Nickname        string                   `protobuf:"bytes,11,opt,name=nickname,proto3" json:"nickname,omitempty"`
	MobilePhone     string                   `protobuf:"bytes,12,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Describe        *string                  `protobuf:"bytes,13,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	UserAvatar      *string                  `protobuf:"bytes,14,opt,name=user_avatar,json=userAvatar,proto3,oneof" json:"user_avatar,omitempty"`
	ExpirationTime  *string                  `protobuf:"bytes,15,opt,name=expiration_time,json=expirationTime,proto3,oneof" json:"expiration_time,omitempty"`
	Created         string                   `protobuf:"bytes,16,opt,name=created,proto3" json:"created,omitempty"`
	Modified        string                   `protobuf:"bytes,17,opt,name=modified,proto3" json:"modified,omitempty"`
	Groups          []int32                  `protobuf:"varint,19,rep,packed,name=groups,proto3" json:"groups,omitempty"`
	UserPermissions []int32                  `protobuf:"varint,20,rep,packed,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
	StaffTypeName   string                   `protobuf:"bytes,21,opt,name=staff_type_name,json=staffTypeName,proto3" json:"staff_type_name,omitempty"`
	StaffType       *int32                   `protobuf:"varint,22,opt,name=staff_type,json=staffType,proto3,oneof" json:"staff_type,omitempty"`
	WebRoutes       []*WebRouteModelResponse `protobuf:"bytes,23,rep,name=web_routes,json=webRoutes,proto3" json:"web_routes,omitempty"`
}

func (x *ManagerWebModelResponse) Reset() {
	*x = ManagerWebModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWebModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWebModelResponse) ProtoMessage() {}

func (x *ManagerWebModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerWebModelResponse.ProtoReflect.Descriptor instead.
func (*ManagerWebModelResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{10}
}

func (x *ManagerWebModelResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ManagerWebModelResponse) GetDateJoined() string {
	if x != nil {
		return x.DateJoined
	}
	return ""
}

func (x *ManagerWebModelResponse) GetLastLogin() string {
	if x != nil && x.LastLogin != nil {
		return *x.LastLogin
	}
	return ""
}

func (x *ManagerWebModelResponse) GetIsSuperuser() bool {
	if x != nil {
		return x.IsSuperuser
	}
	return false
}

func (x *ManagerWebModelResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ManagerWebModelResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ManagerWebModelResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ManagerWebModelResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ManagerWebModelResponse) GetIsStaff() bool {
	if x != nil {
		return x.IsStaff
	}
	return false
}

func (x *ManagerWebModelResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ManagerWebModelResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ManagerWebModelResponse) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *ManagerWebModelResponse) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *ManagerWebModelResponse) GetUserAvatar() string {
	if x != nil && x.UserAvatar != nil {
		return *x.UserAvatar
	}
	return ""
}

func (x *ManagerWebModelResponse) GetExpirationTime() string {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return ""
}

func (x *ManagerWebModelResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ManagerWebModelResponse) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *ManagerWebModelResponse) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ManagerWebModelResponse) GetUserPermissions() []int32 {
	if x != nil {
		return x.UserPermissions
	}
	return nil
}

func (x *ManagerWebModelResponse) GetStaffTypeName() string {
	if x != nil {
		return x.StaffTypeName
	}
	return ""
}

func (x *ManagerWebModelResponse) GetStaffType() int32 {
	if x != nil && x.StaffType != nil {
		return *x.StaffType
	}
	return 0
}

func (x *ManagerWebModelResponse) GetWebRoutes() []*WebRouteModelResponse {
	if x != nil {
		return x.WebRoutes
	}
	return nil
}

type ManagerWebModelRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManagerWebModelRetrieveRequest) Reset() {
	*x = ManagerWebModelRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWebModelRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWebModelRetrieveRequest) ProtoMessage() {}

func (x *ManagerWebModelRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerWebModelRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ManagerWebModelRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{11}
}

func (x *ManagerWebModelRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MgrDeleteWebRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MgrDeleteWebRouteRequest) Reset() {
	*x = MgrDeleteWebRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgrDeleteWebRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgrDeleteWebRouteRequest) ProtoMessage() {}

func (x *MgrDeleteWebRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgrDeleteWebRouteRequest.ProtoReflect.Descriptor instead.
func (*MgrDeleteWebRouteRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{12}
}

func (x *MgrDeleteWebRouteRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MgrManagerWebRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int32   `protobuf:"varint,1,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	Action    string  `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	WebRoutes []int32 `protobuf:"varint,3,rep,packed,name=web_routes,json=webRoutes,proto3" json:"web_routes,omitempty"`
}

func (x *MgrManagerWebRouteRequest) Reset() {
	*x = MgrManagerWebRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgrManagerWebRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgrManagerWebRouteRequest) ProtoMessage() {}

func (x *MgrManagerWebRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgrManagerWebRouteRequest.ProtoReflect.Descriptor instead.
func (*MgrManagerWebRouteRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{13}
}

func (x *MgrManagerWebRouteRequest) GetManagerId() int32 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MgrManagerWebRouteRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *MgrManagerWebRouteRequest) GetWebRoutes() []int32 {
	if x != nil {
		return x.WebRoutes
	}
	return nil
}

type MgrWebLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	WebName  string `protobuf:"bytes,3,opt,name=web_name,json=webName,proto3" json:"web_name,omitempty"`
}

func (x *MgrWebLoginRequest) Reset() {
	*x = MgrWebLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgrWebLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgrWebLoginRequest) ProtoMessage() {}

func (x *MgrWebLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgrWebLoginRequest.ProtoReflect.Descriptor instead.
func (*MgrWebLoginRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{14}
}

func (x *MgrWebLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MgrWebLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MgrWebLoginRequest) GetWebName() string {
	if x != nil {
		return x.WebName
	}
	return ""
}

type PartialUpdateRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Parent               *int64   `protobuf:"varint,2,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Icon                 *string  `protobuf:"bytes,4,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Link                 *string  `protobuf:"bytes,5,opt,name=link,proto3,oneof" json:"link,omitempty"`
	IsHide               bool     `protobuf:"varint,6,opt,name=is_hide,json=isHide,proto3" json:"is_hide,omitempty"`
	IsKeepAlive          bool     `protobuf:"varint,7,opt,name=is_keep_alive,json=isKeepAlive,proto3" json:"is_keep_alive,omitempty"`
	IsAffix              bool     `protobuf:"varint,8,opt,name=is_affix,json=isAffix,proto3" json:"is_affix,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,10,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 string   `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string   `protobuf:"bytes,12,opt,name=path,proto3" json:"path,omitempty"`
	Component            string   `protobuf:"bytes,13,opt,name=component,proto3" json:"component,omitempty"`
	Redirect             *string  `protobuf:"bytes,14,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	MenuSort             *int32   `protobuf:"varint,15,opt,name=menu_sort,json=menuSort,proto3,oneof" json:"menu_sort,omitempty"`
	IsActive             bool     `protobuf:"varint,16,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Filters              *string  `protobuf:"bytes,17,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
	ParentId             *int32   `protobuf:"varint,18,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	IsIframe             bool     `protobuf:"varint,19,opt,name=is_iframe,json=isIframe,proto3" json:"is_iframe,omitempty"`
	WebName              *string  `protobuf:"bytes,20,opt,name=web_name,json=webName,proto3,oneof" json:"web_name,omitempty"`
}

func (x *PartialUpdateRequestRequest) Reset() {
	*x = PartialUpdateRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialUpdateRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialUpdateRequestRequest) ProtoMessage() {}

func (x *PartialUpdateRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialUpdateRequestRequest.ProtoReflect.Descriptor instead.
func (*PartialUpdateRequestRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{15}
}

func (x *PartialUpdateRequestRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartialUpdateRequestRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *PartialUpdateRequestRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

func (x *PartialUpdateRequestRequest) GetIsKeepAlive() bool {
	if x != nil {
		return x.IsKeepAlive
	}
	return false
}

func (x *PartialUpdateRequestRequest) GetIsAffix() bool {
	if x != nil {
		return x.IsAffix
	}
	return false
}

func (x *PartialUpdateRequestRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *PartialUpdateRequestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetMenuSort() int32 {
	if x != nil && x.MenuSort != nil {
		return *x.MenuSort
	}
	return 0
}

func (x *PartialUpdateRequestRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PartialUpdateRequestRequest) GetFilters() string {
	if x != nil && x.Filters != nil {
		return *x.Filters
	}
	return ""
}

func (x *PartialUpdateRequestRequest) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *PartialUpdateRequestRequest) GetIsIframe() bool {
	if x != nil {
		return x.IsIframe
	}
	return false
}

func (x *PartialUpdateRequestRequest) GetWebName() string {
	if x != nil && x.WebName != nil {
		return *x.WebName
	}
	return ""
}

type WebRouteMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Icon        string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	IsLink      string `protobuf:"bytes,3,opt,name=isLink,proto3" json:"isLink,omitempty"`
	IsHide      bool   `protobuf:"varint,4,opt,name=isHide,proto3" json:"isHide,omitempty"`
	IsKeepAlive bool   `protobuf:"varint,5,opt,name=isKeepAlive,proto3" json:"isKeepAlive,omitempty"`
	IsAffix     bool   `protobuf:"varint,6,opt,name=isAffix,proto3" json:"isAffix,omitempty"`
	IsIframe    bool   `protobuf:"varint,7,opt,name=isIframe,proto3" json:"isIframe,omitempty"`
}

func (x *WebRouteMetaResponse) Reset() {
	*x = WebRouteMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRouteMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRouteMetaResponse) ProtoMessage() {}

func (x *WebRouteMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRouteMetaResponse.ProtoReflect.Descriptor instead.
func (*WebRouteMetaResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{16}
}

func (x *WebRouteMetaResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebRouteMetaResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *WebRouteMetaResponse) GetIsLink() string {
	if x != nil {
		return x.IsLink
	}
	return ""
}

func (x *WebRouteMetaResponse) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

func (x *WebRouteMetaResponse) GetIsKeepAlive() bool {
	if x != nil {
		return x.IsKeepAlive
	}
	return false
}

func (x *WebRouteMetaResponse) GetIsAffix() bool {
	if x != nil {
		return x.IsAffix
	}
	return false
}

func (x *WebRouteMetaResponse) GetIsIframe() bool {
	if x != nil {
		return x.IsIframe
	}
	return false
}

type WebRouteModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WebRouteModelResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WebRouteModelListResponse) Reset() {
	*x = WebRouteModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRouteModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRouteModelListResponse) ProtoMessage() {}

func (x *WebRouteModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRouteModelListResponse.ProtoReflect.Descriptor instead.
func (*WebRouteModelListResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{17}
}

func (x *WebRouteModelListResponse) GetResults() []*WebRouteModelResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WebRouteModelListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WebRouteModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Parent      *int64  `protobuf:"varint,2,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Title       string  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Icon        *string `protobuf:"bytes,4,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Link        *string `protobuf:"bytes,5,opt,name=link,proto3,oneof" json:"link,omitempty"`
	IsHide      bool    `protobuf:"varint,6,opt,name=is_hide,json=isHide,proto3" json:"is_hide,omitempty"`
	IsKeepAlive bool    `protobuf:"varint,7,opt,name=is_keep_alive,json=isKeepAlive,proto3" json:"is_keep_alive,omitempty"`
	IsAffix     bool    `protobuf:"varint,8,opt,name=is_affix,json=isAffix,proto3" json:"is_affix,omitempty"`
	Name        string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Path        string  `protobuf:"bytes,11,opt,name=path,proto3" json:"path,omitempty"`
	Component   string  `protobuf:"bytes,12,opt,name=component,proto3" json:"component,omitempty"`
	Redirect    *string `protobuf:"bytes,13,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	MenuSort    *int32  `protobuf:"varint,14,opt,name=menu_sort,json=menuSort,proto3,oneof" json:"menu_sort,omitempty"`
	IsActive    bool    `protobuf:"varint,15,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Filters     *string `protobuf:"bytes,16,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
	ParentId    *int32  `protobuf:"varint,17,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	IsIframe    bool    `protobuf:"varint,18,opt,name=is_iframe,json=isIframe,proto3" json:"is_iframe,omitempty"`
	WebName     *string `protobuf:"bytes,19,opt,name=web_name,json=webName,proto3,oneof" json:"web_name,omitempty"`
}

func (x *WebRouteModelRequest) Reset() {
	*x = WebRouteModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRouteModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRouteModelRequest) ProtoMessage() {}

func (x *WebRouteModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRouteModelRequest.ProtoReflect.Descriptor instead.
func (*WebRouteModelRequest) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{18}
}

func (x *WebRouteModelRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebRouteModelRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *WebRouteModelRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebRouteModelRequest) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *WebRouteModelRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *WebRouteModelRequest) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

func (x *WebRouteModelRequest) GetIsKeepAlive() bool {
	if x != nil {
		return x.IsKeepAlive
	}
	return false
}

func (x *WebRouteModelRequest) GetIsAffix() bool {
	if x != nil {
		return x.IsAffix
	}
	return false
}

func (x *WebRouteModelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebRouteModelRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WebRouteModelRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *WebRouteModelRequest) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *WebRouteModelRequest) GetMenuSort() int32 {
	if x != nil && x.MenuSort != nil {
		return *x.MenuSort
	}
	return 0
}

func (x *WebRouteModelRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *WebRouteModelRequest) GetFilters() string {
	if x != nil && x.Filters != nil {
		return *x.Filters
	}
	return ""
}

func (x *WebRouteModelRequest) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *WebRouteModelRequest) GetIsIframe() bool {
	if x != nil {
		return x.IsIframe
	}
	return false
}

func (x *WebRouteModelRequest) GetWebName() string {
	if x != nil && x.WebName != nil {
		return *x.WebName
	}
	return ""
}

type WebRouteModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta      *WebRouteMetaResponse    `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Parent    *int64                   `protobuf:"varint,3,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Name      string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Path      string                   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Component string                   `protobuf:"bytes,6,opt,name=component,proto3" json:"component,omitempty"`
	Redirect  *string                  `protobuf:"bytes,7,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	MenuSort  *int32                   `protobuf:"varint,8,opt,name=menu_sort,json=menuSort,proto3,oneof" json:"menu_sort,omitempty"`
	IsActive  bool                     `protobuf:"varint,9,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Created   string                   `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	Modified  string                   `protobuf:"bytes,11,opt,name=modified,proto3" json:"modified,omitempty"`
	Children  []*WebRouteModelResponse `protobuf:"bytes,12,rep,name=children,proto3" json:"children,omitempty"`
	ParentId  *int32                   `protobuf:"varint,13,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	WebName   *string                  `protobuf:"bytes,14,opt,name=web_name,json=webName,proto3,oneof" json:"web_name,omitempty"`
}

func (x *WebRouteModelResponse) Reset() {
	*x = WebRouteModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_ito_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRouteModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRouteModelResponse) ProtoMessage() {}

func (x *WebRouteModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_ito_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRouteModelResponse.ProtoReflect.Descriptor instead.
func (*WebRouteModelResponse) Descriptor() ([]byte, []int) {
	return file_manager_ito_proto_rawDescGZIP(), []int{19}
}

func (x *WebRouteModelResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebRouteModelResponse) GetMeta() *WebRouteMetaResponse {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WebRouteModelResponse) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *WebRouteModelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebRouteModelResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WebRouteModelResponse) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *WebRouteModelResponse) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *WebRouteModelResponse) GetMenuSort() int32 {
	if x != nil && x.MenuSort != nil {
		return *x.MenuSort
	}
	return 0
}

func (x *WebRouteModelResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *WebRouteModelResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *WebRouteModelResponse) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *WebRouteModelResponse) GetChildren() []*WebRouteModelResponse {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *WebRouteModelResponse) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *WebRouteModelResponse) GetWebName() string {
	if x != nil && x.WebName != nil {
		return *x.WebName
	}
	return ""
}

var File_manager_ito_proto protoreflect.FileDescriptor

var file_manager_ito_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01,
	0x0a, 0x23, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x7c, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x04, 0x64, 0x65, 0x70, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x65,
	0x70, 0x74, 0x22, 0x3c, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2f, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x8f, 0x06, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x65, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57,
	0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcd, 0x06, 0x0a, 0x23, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x06, 0x0a, 0x16, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x06, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x77, 0x65,
	0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x77, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x1e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a,
	0x0a, 0x18, 0x4d, 0x67, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x19, 0x4d, 0x67,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x77, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x67, 0x0a,
	0x12, 0x4d, 0x67, 0x72, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x05, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x48, 0x69, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x53, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x14,
	0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x49, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x49, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x19, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x04, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x53,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x77, 0x65, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xba, 0x04, 0x0a, 0x15, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75,
	0x53, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xd3, 0x0d,
	0x0a, 0x0d, 0x4d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x78, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x74, 0x12, 0x2f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x67, 0x72,
	0x57, 0x65, 0x62, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x17, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x31, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x67, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x07, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x3a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x2f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x67,
	0x72, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x67, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x12, 0x3b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x65,
	0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x6d, 0x67, 0x72, 0x69,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_manager_ito_proto_rawDescOnce sync.Once
	file_manager_ito_proto_rawDescData = file_manager_ito_proto_rawDesc
)

func file_manager_ito_proto_rawDescGZIP() []byte {
	file_manager_ito_proto_rawDescOnce.Do(func() {
		file_manager_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_manager_ito_proto_rawDescData)
	})
	return file_manager_ito_proto_rawDescData
}

var file_manager_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_manager_ito_proto_goTypes = []interface{}{
	(*AccountStaffTypeOptionsListResponse)(nil), // 0: manager_service.manager_ito.AccountStaffTypeOptionsListResponse
	(*AccountStaffTypeOptionsRequest)(nil),      // 1: manager_service.manager_ito.AccountStaffTypeOptionsRequest
	(*AccountStaffTypeOptionsResponse)(nil),     // 2: manager_service.manager_ito.AccountStaffTypeOptionsResponse
	(*AccountsUsersinfoResponse)(nil),           // 3: manager_service.manager_ito.AccountsUsersinfoResponse
	(*DepartmentResponse)(nil),                  // 4: manager_service.manager_ito.DepartmentResponse
	(*ManagerWebModelDestroyRequest)(nil),       // 5: manager_service.manager_ito.ManagerWebModelDestroyRequest
	(*ManagerWebModelListRequest)(nil),          // 6: manager_service.manager_ito.ManagerWebModelListRequest
	(*ManagerWebModelListResponse)(nil),         // 7: manager_service.manager_ito.ManagerWebModelListResponse
	(*ManagerWebModelPartialUpdateRequest)(nil), // 8: manager_service.manager_ito.ManagerWebModelPartialUpdateRequest
	(*ManagerWebModelRequest)(nil),              // 9: manager_service.manager_ito.ManagerWebModelRequest
	(*ManagerWebModelResponse)(nil),             // 10: manager_service.manager_ito.ManagerWebModelResponse
	(*ManagerWebModelRetrieveRequest)(nil),      // 11: manager_service.manager_ito.ManagerWebModelRetrieveRequest
	(*MgrDeleteWebRouteRequest)(nil),            // 12: manager_service.manager_ito.MgrDeleteWebRouteRequest
	(*MgrManagerWebRouteRequest)(nil),           // 13: manager_service.manager_ito.MgrManagerWebRouteRequest
	(*MgrWebLoginRequest)(nil),                  // 14: manager_service.manager_ito.MgrWebLoginRequest
	(*PartialUpdateRequestRequest)(nil),         // 15: manager_service.manager_ito.PartialUpdateRequestRequest
	(*WebRouteMetaResponse)(nil),                // 16: manager_service.manager_ito.WebRouteMetaResponse
	(*WebRouteModelListResponse)(nil),           // 17: manager_service.manager_ito.WebRouteModelListResponse
	(*WebRouteModelRequest)(nil),                // 18: manager_service.manager_ito.WebRouteModelRequest
	(*WebRouteModelResponse)(nil),               // 19: manager_service.manager_ito.WebRouteModelResponse
	(*emptypb.Empty)(nil),                       // 20: google.protobuf.Empty
}
var file_manager_ito_proto_depIdxs = []int32{
	2,  // 0: manager_service.manager_ito.AccountStaffTypeOptionsListResponse.results:type_name -> manager_service.manager_ito.AccountStaffTypeOptionsResponse
	4,  // 1: manager_service.manager_ito.AccountsUsersinfoResponse.dept:type_name -> manager_service.manager_ito.DepartmentResponse
	10, // 2: manager_service.manager_ito.ManagerWebModelListResponse.results:type_name -> manager_service.manager_ito.ManagerWebModelResponse
	19, // 3: manager_service.manager_ito.ManagerWebModelResponse.web_routes:type_name -> manager_service.manager_ito.WebRouteModelResponse
	19, // 4: manager_service.manager_ito.WebRouteModelListResponse.results:type_name -> manager_service.manager_ito.WebRouteModelResponse
	16, // 5: manager_service.manager_ito.WebRouteModelResponse.meta:type_name -> manager_service.manager_ito.WebRouteMetaResponse
	19, // 6: manager_service.manager_ito.WebRouteModelResponse.children:type_name -> manager_service.manager_ito.WebRouteModelResponse
	14, // 7: manager_service.manager_ito.MgrController.AccountDept:input_type -> manager_service.manager_ito.MgrWebLoginRequest
	1,  // 8: manager_service.manager_ito.MgrController.AccountStaffTypeOptions:input_type -> manager_service.manager_ito.AccountStaffTypeOptionsRequest
	9,  // 9: manager_service.manager_ito.MgrController.Create:input_type -> manager_service.manager_ito.ManagerWebModelRequest
	18, // 10: manager_service.manager_ito.MgrController.CreateWebRoute:input_type -> manager_service.manager_ito.WebRouteModelRequest
	12, // 11: manager_service.manager_ito.MgrController.DeleteWebRoute:input_type -> manager_service.manager_ito.MgrDeleteWebRouteRequest
	5,  // 12: manager_service.manager_ito.MgrController.Destroy:input_type -> manager_service.manager_ito.ManagerWebModelDestroyRequest
	6,  // 13: manager_service.manager_ito.MgrController.List:input_type -> manager_service.manager_ito.ManagerWebModelListRequest
	18, // 14: manager_service.manager_ito.MgrController.ListWebRoute:input_type -> manager_service.manager_ito.WebRouteModelRequest
	14, // 15: manager_service.manager_ito.MgrController.Login:input_type -> manager_service.manager_ito.MgrWebLoginRequest
	13, // 16: manager_service.manager_ito.MgrController.ManagerWebRoute:input_type -> manager_service.manager_ito.MgrManagerWebRouteRequest
	8,  // 17: manager_service.manager_ito.MgrController.PartialUpdate:input_type -> manager_service.manager_ito.ManagerWebModelPartialUpdateRequest
	11, // 18: manager_service.manager_ito.MgrController.Retrieve:input_type -> manager_service.manager_ito.ManagerWebModelRetrieveRequest
	9,  // 19: manager_service.manager_ito.MgrController.Update:input_type -> manager_service.manager_ito.ManagerWebModelRequest
	15, // 20: manager_service.manager_ito.MgrController.UpdateWebRoute:input_type -> manager_service.manager_ito.PartialUpdateRequestRequest
	3,  // 21: manager_service.manager_ito.MgrController.AccountDept:output_type -> manager_service.manager_ito.AccountsUsersinfoResponse
	0,  // 22: manager_service.manager_ito.MgrController.AccountStaffTypeOptions:output_type -> manager_service.manager_ito.AccountStaffTypeOptionsListResponse
	10, // 23: manager_service.manager_ito.MgrController.Create:output_type -> manager_service.manager_ito.ManagerWebModelResponse
	19, // 24: manager_service.manager_ito.MgrController.CreateWebRoute:output_type -> manager_service.manager_ito.WebRouteModelResponse
	20, // 25: manager_service.manager_ito.MgrController.DeleteWebRoute:output_type -> google.protobuf.Empty
	20, // 26: manager_service.manager_ito.MgrController.Destroy:output_type -> google.protobuf.Empty
	7,  // 27: manager_service.manager_ito.MgrController.List:output_type -> manager_service.manager_ito.ManagerWebModelListResponse
	17, // 28: manager_service.manager_ito.MgrController.ListWebRoute:output_type -> manager_service.manager_ito.WebRouteModelListResponse
	10, // 29: manager_service.manager_ito.MgrController.Login:output_type -> manager_service.manager_ito.ManagerWebModelResponse
	10, // 30: manager_service.manager_ito.MgrController.ManagerWebRoute:output_type -> manager_service.manager_ito.ManagerWebModelResponse
	10, // 31: manager_service.manager_ito.MgrController.PartialUpdate:output_type -> manager_service.manager_ito.ManagerWebModelResponse
	10, // 32: manager_service.manager_ito.MgrController.Retrieve:output_type -> manager_service.manager_ito.ManagerWebModelResponse
	10, // 33: manager_service.manager_ito.MgrController.Update:output_type -> manager_service.manager_ito.ManagerWebModelResponse
	19, // 34: manager_service.manager_ito.MgrController.UpdateWebRoute:output_type -> manager_service.manager_ito.WebRouteModelResponse
	21, // [21:35] is the sub-list for method output_type
	7,  // [7:21] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_manager_ito_proto_init() }
func file_manager_ito_proto_init() {
	if File_manager_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_manager_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStaffTypeOptionsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStaffTypeOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStaffTypeOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsUsersinfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWebModelDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWebModelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWebModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWebModelPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWebModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWebModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWebModelRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgrDeleteWebRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgrManagerWebRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgrWebLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialUpdateRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRouteMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRouteModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRouteModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_ito_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRouteModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_manager_ito_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_manager_ito_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_manager_ito_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_manager_ito_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_manager_ito_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_manager_ito_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_manager_ito_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_manager_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manager_ito_proto_goTypes,
		DependencyIndexes: file_manager_ito_proto_depIdxs,
		MessageInfos:      file_manager_ito_proto_msgTypes,
	}.Build()
	File_manager_ito_proto = out.File
	file_manager_ito_proto_rawDesc = nil
	file_manager_ito_proto_goTypes = nil
	file_manager_ito_proto_depIdxs = nil
}
