// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rawgoods.proto

package pbRawGoodsIto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProdPropertiesController_List_FullMethodName = "/product_service.prod_ito.ProdPropertiesController/List"
)

// ProdPropertiesControllerClient is the client API for ProdPropertiesController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdPropertiesControllerClient interface {
	List(ctx context.Context, in *ProdPropertiesListRequest, opts ...grpc.CallOption) (*ProdPropertiesListResponse, error)
}

type prodPropertiesControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProdPropertiesControllerClient(cc grpc.ClientConnInterface) ProdPropertiesControllerClient {
	return &prodPropertiesControllerClient{cc}
}

func (c *prodPropertiesControllerClient) List(ctx context.Context, in *ProdPropertiesListRequest, opts ...grpc.CallOption) (*ProdPropertiesListResponse, error) {
	out := new(ProdPropertiesListResponse)
	err := c.cc.Invoke(ctx, ProdPropertiesController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdPropertiesControllerServer is the server API for ProdPropertiesController service.
// All implementations must embed UnimplementedProdPropertiesControllerServer
// for forward compatibility
type ProdPropertiesControllerServer interface {
	List(context.Context, *ProdPropertiesListRequest) (*ProdPropertiesListResponse, error)
	mustEmbedUnimplementedProdPropertiesControllerServer()
}

// UnimplementedProdPropertiesControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProdPropertiesControllerServer struct {
}

func (UnimplementedProdPropertiesControllerServer) List(context.Context, *ProdPropertiesListRequest) (*ProdPropertiesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProdPropertiesControllerServer) mustEmbedUnimplementedProdPropertiesControllerServer() {
}

// UnsafeProdPropertiesControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdPropertiesControllerServer will
// result in compilation errors.
type UnsafeProdPropertiesControllerServer interface {
	mustEmbedUnimplementedProdPropertiesControllerServer()
}

func RegisterProdPropertiesControllerServer(s grpc.ServiceRegistrar, srv ProdPropertiesControllerServer) {
	s.RegisterService(&ProdPropertiesController_ServiceDesc, srv)
}

func _ProdPropertiesController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdPropertiesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdPropertiesControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdPropertiesController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdPropertiesControllerServer).List(ctx, req.(*ProdPropertiesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdPropertiesController_ServiceDesc is the grpc.ServiceDesc for ProdPropertiesController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdPropertiesController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.prod_ito.ProdPropertiesController",
	HandlerType: (*ProdPropertiesControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProdPropertiesController_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawgoods.proto",
}

const (
	ProdRepairsController_Create_FullMethodName                  = "/product_service.prod_ito.ProdRepairsController/Create"
	ProdRepairsController_Destroy_FullMethodName                 = "/product_service.prod_ito.ProdRepairsController/Destroy"
	ProdRepairsController_GetRepairPartsCatChoice_FullMethodName = "/product_service.prod_ito.ProdRepairsController/GetRepairPartsCatChoice"
	ProdRepairsController_List_FullMethodName                    = "/product_service.prod_ito.ProdRepairsController/List"
	ProdRepairsController_PartialUpdate_FullMethodName           = "/product_service.prod_ito.ProdRepairsController/PartialUpdate"
	ProdRepairsController_RepairPartsBulkUpdate_FullMethodName   = "/product_service.prod_ito.ProdRepairsController/RepairPartsBulkUpdate"
	ProdRepairsController_Retrieve_FullMethodName                = "/product_service.prod_ito.ProdRepairsController/Retrieve"
	ProdRepairsController_Update_FullMethodName                  = "/product_service.prod_ito.ProdRepairsController/Update"
)

// ProdRepairsControllerClient is the client API for ProdRepairsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdRepairsControllerClient interface {
	Create(ctx context.Context, in *RepairPartsRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error)
	Destroy(ctx context.Context, in *RepairPartsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRepairPartsCatChoice(ctx context.Context, in *RepairPartsCatChoiceRequest, opts ...grpc.CallOption) (*RepairPartsCatChoiceListResponse, error)
	List(ctx context.Context, in *RepairPartsListRequest, opts ...grpc.CallOption) (*RepairPartsListResponse, error)
	PartialUpdate(ctx context.Context, in *RepairPartsPartialUpdateRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error)
	RepairPartsBulkUpdate(ctx context.Context, in *RepairPartsBulkUpdateRequest, opts ...grpc.CallOption) (*RepairPartsBulkUpdateResponse, error)
	Retrieve(ctx context.Context, in *RepairPartsRetrieveRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error)
	Update(ctx context.Context, in *RepairPartsRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error)
}

type prodRepairsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProdRepairsControllerClient(cc grpc.ClientConnInterface) ProdRepairsControllerClient {
	return &prodRepairsControllerClient{cc}
}

func (c *prodRepairsControllerClient) Create(ctx context.Context, in *RepairPartsRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error) {
	out := new(RepairPartsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsControllerClient) Destroy(ctx context.Context, in *RepairPartsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProdRepairsController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsControllerClient) GetRepairPartsCatChoice(ctx context.Context, in *RepairPartsCatChoiceRequest, opts ...grpc.CallOption) (*RepairPartsCatChoiceListResponse, error) {
	out := new(RepairPartsCatChoiceListResponse)
	err := c.cc.Invoke(ctx, ProdRepairsController_GetRepairPartsCatChoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsControllerClient) List(ctx context.Context, in *RepairPartsListRequest, opts ...grpc.CallOption) (*RepairPartsListResponse, error) {
	out := new(RepairPartsListResponse)
	err := c.cc.Invoke(ctx, ProdRepairsController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsControllerClient) PartialUpdate(ctx context.Context, in *RepairPartsPartialUpdateRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error) {
	out := new(RepairPartsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsControllerClient) RepairPartsBulkUpdate(ctx context.Context, in *RepairPartsBulkUpdateRequest, opts ...grpc.CallOption) (*RepairPartsBulkUpdateResponse, error) {
	out := new(RepairPartsBulkUpdateResponse)
	err := c.cc.Invoke(ctx, ProdRepairsController_RepairPartsBulkUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsControllerClient) Retrieve(ctx context.Context, in *RepairPartsRetrieveRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error) {
	out := new(RepairPartsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsControllerClient) Update(ctx context.Context, in *RepairPartsRequest, opts ...grpc.CallOption) (*RepairPartsResponse, error) {
	out := new(RepairPartsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdRepairsControllerServer is the server API for ProdRepairsController service.
// All implementations must embed UnimplementedProdRepairsControllerServer
// for forward compatibility
type ProdRepairsControllerServer interface {
	Create(context.Context, *RepairPartsRequest) (*RepairPartsResponse, error)
	Destroy(context.Context, *RepairPartsDestroyRequest) (*emptypb.Empty, error)
	GetRepairPartsCatChoice(context.Context, *RepairPartsCatChoiceRequest) (*RepairPartsCatChoiceListResponse, error)
	List(context.Context, *RepairPartsListRequest) (*RepairPartsListResponse, error)
	PartialUpdate(context.Context, *RepairPartsPartialUpdateRequest) (*RepairPartsResponse, error)
	RepairPartsBulkUpdate(context.Context, *RepairPartsBulkUpdateRequest) (*RepairPartsBulkUpdateResponse, error)
	Retrieve(context.Context, *RepairPartsRetrieveRequest) (*RepairPartsResponse, error)
	Update(context.Context, *RepairPartsRequest) (*RepairPartsResponse, error)
	mustEmbedUnimplementedProdRepairsControllerServer()
}

// UnimplementedProdRepairsControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProdRepairsControllerServer struct {
}

func (UnimplementedProdRepairsControllerServer) Create(context.Context, *RepairPartsRequest) (*RepairPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProdRepairsControllerServer) Destroy(context.Context, *RepairPartsDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedProdRepairsControllerServer) GetRepairPartsCatChoice(context.Context, *RepairPartsCatChoiceRequest) (*RepairPartsCatChoiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepairPartsCatChoice not implemented")
}
func (UnimplementedProdRepairsControllerServer) List(context.Context, *RepairPartsListRequest) (*RepairPartsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProdRepairsControllerServer) PartialUpdate(context.Context, *RepairPartsPartialUpdateRequest) (*RepairPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedProdRepairsControllerServer) RepairPartsBulkUpdate(context.Context, *RepairPartsBulkUpdateRequest) (*RepairPartsBulkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepairPartsBulkUpdate not implemented")
}
func (UnimplementedProdRepairsControllerServer) Retrieve(context.Context, *RepairPartsRetrieveRequest) (*RepairPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedProdRepairsControllerServer) Update(context.Context, *RepairPartsRequest) (*RepairPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProdRepairsControllerServer) mustEmbedUnimplementedProdRepairsControllerServer() {}

// UnsafeProdRepairsControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdRepairsControllerServer will
// result in compilation errors.
type UnsafeProdRepairsControllerServer interface {
	mustEmbedUnimplementedProdRepairsControllerServer()
}

func RegisterProdRepairsControllerServer(s grpc.ServiceRegistrar, srv ProdRepairsControllerServer) {
	s.RegisterService(&ProdRepairsController_ServiceDesc, srv)
}

func _ProdRepairsController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).Create(ctx, req.(*RepairPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).Destroy(ctx, req.(*RepairPartsDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsController_GetRepairPartsCatChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsCatChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).GetRepairPartsCatChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_GetRepairPartsCatChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).GetRepairPartsCatChoice(ctx, req.(*RepairPartsCatChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).List(ctx, req.(*RepairPartsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).PartialUpdate(ctx, req.(*RepairPartsPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsController_RepairPartsBulkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsBulkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).RepairPartsBulkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_RepairPartsBulkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).RepairPartsBulkUpdate(ctx, req.(*RepairPartsBulkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).Retrieve(ctx, req.(*RepairPartsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsControllerServer).Update(ctx, req.(*RepairPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdRepairsController_ServiceDesc is the grpc.ServiceDesc for ProdRepairsController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdRepairsController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.prod_ito.ProdRepairsController",
	HandlerType: (*ProdRepairsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProdRepairsController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ProdRepairsController_Destroy_Handler,
		},
		{
			MethodName: "GetRepairPartsCatChoice",
			Handler:    _ProdRepairsController_GetRepairPartsCatChoice_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProdRepairsController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ProdRepairsController_PartialUpdate_Handler,
		},
		{
			MethodName: "RepairPartsBulkUpdate",
			Handler:    _ProdRepairsController_RepairPartsBulkUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ProdRepairsController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProdRepairsController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawgoods.proto",
}

const (
	ProdRepairsRelationController_BulkCreate_FullMethodName    = "/product_service.prod_ito.ProdRepairsRelationController/BulkCreate"
	ProdRepairsRelationController_Create_FullMethodName        = "/product_service.prod_ito.ProdRepairsRelationController/Create"
	ProdRepairsRelationController_Destroy_FullMethodName       = "/product_service.prod_ito.ProdRepairsRelationController/Destroy"
	ProdRepairsRelationController_GetProdCode_FullMethodName   = "/product_service.prod_ito.ProdRepairsRelationController/GetProdCode"
	ProdRepairsRelationController_List_FullMethodName          = "/product_service.prod_ito.ProdRepairsRelationController/List"
	ProdRepairsRelationController_PartialUpdate_FullMethodName = "/product_service.prod_ito.ProdRepairsRelationController/PartialUpdate"
	ProdRepairsRelationController_Retrieve_FullMethodName      = "/product_service.prod_ito.ProdRepairsRelationController/Retrieve"
	ProdRepairsRelationController_Update_FullMethodName        = "/product_service.prod_ito.ProdRepairsRelationController/Update"
)

// ProdRepairsRelationControllerClient is the client API for ProdRepairsRelationController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdRepairsRelationControllerClient interface {
	BulkCreate(ctx context.Context, in *RelProdRepairsBulkCreateListRequest, opts ...grpc.CallOption) (*RelProdRepairsBulkCreateResponse, error)
	Create(ctx context.Context, in *RelProdRepairsRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error)
	Destroy(ctx context.Context, in *RelProdRepairsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProdCode(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductListResponse, error)
	List(ctx context.Context, in *RelProdRepairsListRequest, opts ...grpc.CallOption) (*RelProdRepairsListResponse, error)
	PartialUpdate(ctx context.Context, in *RelProdRepairsPartialUpdateRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error)
	Retrieve(ctx context.Context, in *RelProdRepairsRetrieveRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error)
	Update(ctx context.Context, in *RelProdRepairsRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error)
}

type prodRepairsRelationControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProdRepairsRelationControllerClient(cc grpc.ClientConnInterface) ProdRepairsRelationControllerClient {
	return &prodRepairsRelationControllerClient{cc}
}

func (c *prodRepairsRelationControllerClient) BulkCreate(ctx context.Context, in *RelProdRepairsBulkCreateListRequest, opts ...grpc.CallOption) (*RelProdRepairsBulkCreateResponse, error) {
	out := new(RelProdRepairsBulkCreateResponse)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_BulkCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsRelationControllerClient) Create(ctx context.Context, in *RelProdRepairsRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error) {
	out := new(RelProdRepairsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsRelationControllerClient) Destroy(ctx context.Context, in *RelProdRepairsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsRelationControllerClient) GetProdCode(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductListResponse, error) {
	out := new(ProductListResponse)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_GetProdCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsRelationControllerClient) List(ctx context.Context, in *RelProdRepairsListRequest, opts ...grpc.CallOption) (*RelProdRepairsListResponse, error) {
	out := new(RelProdRepairsListResponse)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsRelationControllerClient) PartialUpdate(ctx context.Context, in *RelProdRepairsPartialUpdateRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error) {
	out := new(RelProdRepairsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsRelationControllerClient) Retrieve(ctx context.Context, in *RelProdRepairsRetrieveRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error) {
	out := new(RelProdRepairsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodRepairsRelationControllerClient) Update(ctx context.Context, in *RelProdRepairsRequest, opts ...grpc.CallOption) (*RelProdRepairsResponse, error) {
	out := new(RelProdRepairsResponse)
	err := c.cc.Invoke(ctx, ProdRepairsRelationController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdRepairsRelationControllerServer is the server API for ProdRepairsRelationController service.
// All implementations must embed UnimplementedProdRepairsRelationControllerServer
// for forward compatibility
type ProdRepairsRelationControllerServer interface {
	BulkCreate(context.Context, *RelProdRepairsBulkCreateListRequest) (*RelProdRepairsBulkCreateResponse, error)
	Create(context.Context, *RelProdRepairsRequest) (*RelProdRepairsResponse, error)
	Destroy(context.Context, *RelProdRepairsDestroyRequest) (*emptypb.Empty, error)
	GetProdCode(context.Context, *ProductRequest) (*ProductListResponse, error)
	List(context.Context, *RelProdRepairsListRequest) (*RelProdRepairsListResponse, error)
	PartialUpdate(context.Context, *RelProdRepairsPartialUpdateRequest) (*RelProdRepairsResponse, error)
	Retrieve(context.Context, *RelProdRepairsRetrieveRequest) (*RelProdRepairsResponse, error)
	Update(context.Context, *RelProdRepairsRequest) (*RelProdRepairsResponse, error)
	mustEmbedUnimplementedProdRepairsRelationControllerServer()
}

// UnimplementedProdRepairsRelationControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProdRepairsRelationControllerServer struct {
}

func (UnimplementedProdRepairsRelationControllerServer) BulkCreate(context.Context, *RelProdRepairsBulkCreateListRequest) (*RelProdRepairsBulkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreate not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) Create(context.Context, *RelProdRepairsRequest) (*RelProdRepairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) Destroy(context.Context, *RelProdRepairsDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) GetProdCode(context.Context, *ProductRequest) (*ProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProdCode not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) List(context.Context, *RelProdRepairsListRequest) (*RelProdRepairsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) PartialUpdate(context.Context, *RelProdRepairsPartialUpdateRequest) (*RelProdRepairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) Retrieve(context.Context, *RelProdRepairsRetrieveRequest) (*RelProdRepairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) Update(context.Context, *RelProdRepairsRequest) (*RelProdRepairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProdRepairsRelationControllerServer) mustEmbedUnimplementedProdRepairsRelationControllerServer() {
}

// UnsafeProdRepairsRelationControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdRepairsRelationControllerServer will
// result in compilation errors.
type UnsafeProdRepairsRelationControllerServer interface {
	mustEmbedUnimplementedProdRepairsRelationControllerServer()
}

func RegisterProdRepairsRelationControllerServer(s grpc.ServiceRegistrar, srv ProdRepairsRelationControllerServer) {
	s.RegisterService(&ProdRepairsRelationController_ServiceDesc, srv)
}

func _ProdRepairsRelationController_BulkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelProdRepairsBulkCreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).BulkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_BulkCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).BulkCreate(ctx, req.(*RelProdRepairsBulkCreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsRelationController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelProdRepairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).Create(ctx, req.(*RelProdRepairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsRelationController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelProdRepairsDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).Destroy(ctx, req.(*RelProdRepairsDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsRelationController_GetProdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).GetProdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_GetProdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).GetProdCode(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsRelationController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelProdRepairsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).List(ctx, req.(*RelProdRepairsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsRelationController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelProdRepairsPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).PartialUpdate(ctx, req.(*RelProdRepairsPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsRelationController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelProdRepairsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).Retrieve(ctx, req.(*RelProdRepairsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdRepairsRelationController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelProdRepairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdRepairsRelationControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdRepairsRelationController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdRepairsRelationControllerServer).Update(ctx, req.(*RelProdRepairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdRepairsRelationController_ServiceDesc is the grpc.ServiceDesc for ProdRepairsRelationController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdRepairsRelationController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.prod_ito.ProdRepairsRelationController",
	HandlerType: (*ProdRepairsRelationControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BulkCreate",
			Handler:    _ProdRepairsRelationController_BulkCreate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProdRepairsRelationController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ProdRepairsRelationController_Destroy_Handler,
		},
		{
			MethodName: "GetProdCode",
			Handler:    _ProdRepairsRelationController_GetProdCode_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProdRepairsRelationController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ProdRepairsRelationController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ProdRepairsRelationController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProdRepairsRelationController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawgoods.proto",
}

const (
	ProductController_Create_FullMethodName          = "/product_service.prod_ito.ProductController/Create"
	ProductController_Destroy_FullMethodName         = "/product_service.prod_ito.ProductController/Destroy"
	ProductController_List_FullMethodName            = "/product_service.prod_ito.ProductController/List"
	ProductController_PartialUpdate_FullMethodName   = "/product_service.prod_ito.ProductController/PartialUpdate"
	ProductController_Retrieve_FullMethodName        = "/product_service.prod_ito.ProductController/Retrieve"
	ProductController_SyncProdToMongo_FullMethodName = "/product_service.prod_ito.ProductController/SyncProdToMongo"
	ProductController_Update_FullMethodName          = "/product_service.prod_ito.ProductController/Update"
)

// ProductControllerClient is the client API for ProductController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductControllerClient interface {
	Create(ctx context.Context, in *ProductModelRequest, opts ...grpc.CallOption) (*ProductModelResponse, error)
	Destroy(ctx context.Context, in *ProductModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ProductModelListRequest, opts ...grpc.CallOption) (*ProductModelListResponse, error)
	PartialUpdate(ctx context.Context, in *ProductModelPartialUpdateRequest, opts ...grpc.CallOption) (*ProductModelResponse, error)
	Retrieve(ctx context.Context, in *ProductModelRetrieveRequest, opts ...grpc.CallOption) (*ProductModelResponse, error)
	SyncProdToMongo(ctx context.Context, in *SyncProdRequest, opts ...grpc.CallOption) (*SyncProdResponse, error)
	Update(ctx context.Context, in *ProductModelRequest, opts ...grpc.CallOption) (*ProductModelResponse, error)
}

type productControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductControllerClient(cc grpc.ClientConnInterface) ProductControllerClient {
	return &productControllerClient{cc}
}

func (c *productControllerClient) Create(ctx context.Context, in *ProductModelRequest, opts ...grpc.CallOption) (*ProductModelResponse, error) {
	out := new(ProductModelResponse)
	err := c.cc.Invoke(ctx, ProductController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productControllerClient) Destroy(ctx context.Context, in *ProductModelDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productControllerClient) List(ctx context.Context, in *ProductModelListRequest, opts ...grpc.CallOption) (*ProductModelListResponse, error) {
	out := new(ProductModelListResponse)
	err := c.cc.Invoke(ctx, ProductController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productControllerClient) PartialUpdate(ctx context.Context, in *ProductModelPartialUpdateRequest, opts ...grpc.CallOption) (*ProductModelResponse, error) {
	out := new(ProductModelResponse)
	err := c.cc.Invoke(ctx, ProductController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productControllerClient) Retrieve(ctx context.Context, in *ProductModelRetrieveRequest, opts ...grpc.CallOption) (*ProductModelResponse, error) {
	out := new(ProductModelResponse)
	err := c.cc.Invoke(ctx, ProductController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productControllerClient) SyncProdToMongo(ctx context.Context, in *SyncProdRequest, opts ...grpc.CallOption) (*SyncProdResponse, error) {
	out := new(SyncProdResponse)
	err := c.cc.Invoke(ctx, ProductController_SyncProdToMongo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productControllerClient) Update(ctx context.Context, in *ProductModelRequest, opts ...grpc.CallOption) (*ProductModelResponse, error) {
	out := new(ProductModelResponse)
	err := c.cc.Invoke(ctx, ProductController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductControllerServer is the server API for ProductController service.
// All implementations must embed UnimplementedProductControllerServer
// for forward compatibility
type ProductControllerServer interface {
	Create(context.Context, *ProductModelRequest) (*ProductModelResponse, error)
	Destroy(context.Context, *ProductModelDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *ProductModelListRequest) (*ProductModelListResponse, error)
	PartialUpdate(context.Context, *ProductModelPartialUpdateRequest) (*ProductModelResponse, error)
	Retrieve(context.Context, *ProductModelRetrieveRequest) (*ProductModelResponse, error)
	SyncProdToMongo(context.Context, *SyncProdRequest) (*SyncProdResponse, error)
	Update(context.Context, *ProductModelRequest) (*ProductModelResponse, error)
	mustEmbedUnimplementedProductControllerServer()
}

// UnimplementedProductControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProductControllerServer struct {
}

func (UnimplementedProductControllerServer) Create(context.Context, *ProductModelRequest) (*ProductModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductControllerServer) Destroy(context.Context, *ProductModelDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedProductControllerServer) List(context.Context, *ProductModelListRequest) (*ProductModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductControllerServer) PartialUpdate(context.Context, *ProductModelPartialUpdateRequest) (*ProductModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedProductControllerServer) Retrieve(context.Context, *ProductModelRetrieveRequest) (*ProductModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedProductControllerServer) SyncProdToMongo(context.Context, *SyncProdRequest) (*SyncProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProdToMongo not implemented")
}
func (UnimplementedProductControllerServer) Update(context.Context, *ProductModelRequest) (*ProductModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductControllerServer) mustEmbedUnimplementedProductControllerServer() {}

// UnsafeProductControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductControllerServer will
// result in compilation errors.
type UnsafeProductControllerServer interface {
	mustEmbedUnimplementedProductControllerServer()
}

func RegisterProductControllerServer(s grpc.ServiceRegistrar, srv ProductControllerServer) {
	s.RegisterService(&ProductController_ServiceDesc, srv)
}

func _ProductController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).Create(ctx, req.(*ProductModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductModelDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).Destroy(ctx, req.(*ProductModelDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).List(ctx, req.(*ProductModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductModelPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).PartialUpdate(ctx, req.(*ProductModelPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductModelRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).Retrieve(ctx, req.(*ProductModelRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductController_SyncProdToMongo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).SyncProdToMongo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_SyncProdToMongo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).SyncProdToMongo(ctx, req.(*SyncProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductControllerServer).Update(ctx, req.(*ProductModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductController_ServiceDesc is the grpc.ServiceDesc for ProductController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.prod_ito.ProductController",
	HandlerType: (*ProductControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ProductController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProductController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ProductController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ProductController_Retrieve_Handler,
		},
		{
			MethodName: "SyncProdToMongo",
			Handler:    _ProductController_SyncProdToMongo_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawgoods.proto",
}

const (
	WorkshopController_ClubSkuCreate_FullMethodName        = "/product_service.prod_ito.WorkshopController/ClubSkuCreate"
	WorkshopController_ClubSkuDestroy_FullMethodName       = "/product_service.prod_ito.WorkshopController/ClubSkuDestroy"
	WorkshopController_ClubSkuList_FullMethodName          = "/product_service.prod_ito.WorkshopController/ClubSkuList"
	WorkshopController_ClubSkuRetrieve_FullMethodName      = "/product_service.prod_ito.WorkshopController/ClubSkuRetrieve"
	WorkshopController_ClubSkuUpdate_FullMethodName        = "/product_service.prod_ito.WorkshopController/ClubSkuUpdate"
	WorkshopController_ClubSpuCreate_FullMethodName        = "/product_service.prod_ito.WorkshopController/ClubSpuCreate"
	WorkshopController_ClubSpuDestroy_FullMethodName       = "/product_service.prod_ito.WorkshopController/ClubSpuDestroy"
	WorkshopController_ClubSpuList_FullMethodName          = "/product_service.prod_ito.WorkshopController/ClubSpuList"
	WorkshopController_ClubSpuUpdate_FullMethodName        = "/product_service.prod_ito.WorkshopController/ClubSpuUpdate"
	WorkshopController_ClubSpuValues_FullMethodName        = "/product_service.prod_ito.WorkshopController/ClubSpuValues"
	WorkshopController_ClubWorkshopCreate_FullMethodName   = "/product_service.prod_ito.WorkshopController/ClubWorkshopCreate"
	WorkshopController_ClubWorkshopDestroy_FullMethodName  = "/product_service.prod_ito.WorkshopController/ClubWorkshopDestroy"
	WorkshopController_ClubWorkshopList_FullMethodName     = "/product_service.prod_ito.WorkshopController/ClubWorkshopList"
	WorkshopController_ClubWorkshopRetrieve_FullMethodName = "/product_service.prod_ito.WorkshopController/ClubWorkshopRetrieve"
	WorkshopController_ClubWorkshopUpdate_FullMethodName   = "/product_service.prod_ito.WorkshopController/ClubWorkshopUpdate"
	WorkshopController_Create_FullMethodName               = "/product_service.prod_ito.WorkshopController/Create"
	WorkshopController_CreateList_FullMethodName           = "/product_service.prod_ito.WorkshopController/CreateList"
	WorkshopController_Destroy_FullMethodName              = "/product_service.prod_ito.WorkshopController/Destroy"
	WorkshopController_FilterRetrieve_FullMethodName       = "/product_service.prod_ito.WorkshopController/FilterRetrieve"
	WorkshopController_List_FullMethodName                 = "/product_service.prod_ito.WorkshopController/List"
	WorkshopController_PartialUpdate_FullMethodName        = "/product_service.prod_ito.WorkshopController/PartialUpdate"
	WorkshopController_Properties_FullMethodName           = "/product_service.prod_ito.WorkshopController/Properties"
	WorkshopController_Retrieve_FullMethodName             = "/product_service.prod_ito.WorkshopController/Retrieve"
	WorkshopController_SkuSpareParts_FullMethodName        = "/product_service.prod_ito.WorkshopController/SkuSpareParts"
	WorkshopController_SpuProperties_FullMethodName        = "/product_service.prod_ito.WorkshopController/SpuProperties"
	WorkshopController_Update_FullMethodName               = "/product_service.prod_ito.WorkshopController/Update"
	WorkshopController_WorkshopColorList_FullMethodName    = "/product_service.prod_ito.WorkshopController/WorkshopColorList"
	WorkshopController_WorkshopConfigList_FullMethodName   = "/product_service.prod_ito.WorkshopController/WorkshopConfigList"
)

// WorkshopControllerClient is the client API for WorkshopController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkshopControllerClient interface {
	ClubSkuCreate(ctx context.Context, in *ClubProductRequest, opts ...grpc.CallOption) (*ClubProductResponse, error)
	ClubSkuDestroy(ctx context.Context, in *ClubProductDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClubSkuList(ctx context.Context, in *ClubProductRequest, opts ...grpc.CallOption) (*ClubProductListResponse, error)
	ClubSkuRetrieve(ctx context.Context, in *ClubProductRetrieveRequest, opts ...grpc.CallOption) (*ClubProductResponse, error)
	ClubSkuUpdate(ctx context.Context, in *ClubProductUpdateRequest, opts ...grpc.CallOption) (*ClubProductResponse, error)
	ClubSpuCreate(ctx context.Context, in *ClubProductSpuRequest, opts ...grpc.CallOption) (*ClubProductSpuResponse, error)
	ClubSpuDestroy(ctx context.Context, in *ClubProductSpuDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClubSpuList(ctx context.Context, in *ClubProductSpuRequest, opts ...grpc.CallOption) (*ClubProductSpuListResponse, error)
	ClubSpuUpdate(ctx context.Context, in *ClubProductSpuUpdateRequest, opts ...grpc.CallOption) (*ClubProductSpuResponse, error)
	ClubSpuValues(ctx context.Context, in *ValuesListRequest, opts ...grpc.CallOption) (*WorkshopClubSpuValuesResponse, error)
	ClubWorkshopCreate(ctx context.Context, in *ClubWorkshopRequest, opts ...grpc.CallOption) (*ClubWorkshopResponse, error)
	ClubWorkshopDestroy(ctx context.Context, in *ClubWorkshopDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClubWorkshopList(ctx context.Context, in *ClubWorkshopRequest, opts ...grpc.CallOption) (*ClubWorkshopListResponse, error)
	ClubWorkshopRetrieve(ctx context.Context, in *ClubWorkshopRetrieveRequest, opts ...grpc.CallOption) (*ClubWorkshopResponse, error)
	ClubWorkshopUpdate(ctx context.Context, in *ClubWorkshopUpdateRequest, opts ...grpc.CallOption) (*ClubWorkshopResponse, error)
	Create(ctx context.Context, in *ProdWorkshopRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error)
	CreateList(ctx context.Context, in *ProdWorkshopListRequest, opts ...grpc.CallOption) (*ProdWorkshopListResponse, error)
	Destroy(ctx context.Context, in *ProdWorkshopDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FilterRetrieve(ctx context.Context, in *ProdWorkshopPartRequest, opts ...grpc.CallOption) (*ProdWorkshopPartResponse, error)
	List(ctx context.Context, in *ProdWorkshopPartListRequest, opts ...grpc.CallOption) (*ProdWorkshopPartListResponse, error)
	PartialUpdate(ctx context.Context, in *ProdWorkshopPartialUpdateRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error)
	Properties(ctx context.Context, in *ProdWorkshopPartRequest, opts ...grpc.CallOption) (*WorkshopPropertiesListResponse, error)
	Retrieve(ctx context.Context, in *ProdWorkshopRetrieveRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error)
	SkuSpareParts(ctx context.Context, in *RawSkuSparePartsRequest, opts ...grpc.CallOption) (*RawSkuSparePartsListResponse, error)
	SpuProperties(ctx context.Context, in *ProdWorkshopPartRequest, opts ...grpc.CallOption) (*WorkshopSpuListResponse, error)
	Update(ctx context.Context, in *ProdWorkshopRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error)
	WorkshopColorList(ctx context.Context, in *WorkshopColorRequest, opts ...grpc.CallOption) (*WorkshopColorListResponse, error)
	WorkshopConfigList(ctx context.Context, in *WorkshopConfigRequest, opts ...grpc.CallOption) (*WorkshopConfigListResponse, error)
}

type workshopControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkshopControllerClient(cc grpc.ClientConnInterface) WorkshopControllerClient {
	return &workshopControllerClient{cc}
}

func (c *workshopControllerClient) ClubSkuCreate(ctx context.Context, in *ClubProductRequest, opts ...grpc.CallOption) (*ClubProductResponse, error) {
	out := new(ClubProductResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSkuCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSkuDestroy(ctx context.Context, in *ClubProductDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSkuDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSkuList(ctx context.Context, in *ClubProductRequest, opts ...grpc.CallOption) (*ClubProductListResponse, error) {
	out := new(ClubProductListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSkuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSkuRetrieve(ctx context.Context, in *ClubProductRetrieveRequest, opts ...grpc.CallOption) (*ClubProductResponse, error) {
	out := new(ClubProductResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSkuRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSkuUpdate(ctx context.Context, in *ClubProductUpdateRequest, opts ...grpc.CallOption) (*ClubProductResponse, error) {
	out := new(ClubProductResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSkuUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSpuCreate(ctx context.Context, in *ClubProductSpuRequest, opts ...grpc.CallOption) (*ClubProductSpuResponse, error) {
	out := new(ClubProductSpuResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSpuCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSpuDestroy(ctx context.Context, in *ClubProductSpuDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSpuDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSpuList(ctx context.Context, in *ClubProductSpuRequest, opts ...grpc.CallOption) (*ClubProductSpuListResponse, error) {
	out := new(ClubProductSpuListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSpuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSpuUpdate(ctx context.Context, in *ClubProductSpuUpdateRequest, opts ...grpc.CallOption) (*ClubProductSpuResponse, error) {
	out := new(ClubProductSpuResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSpuUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubSpuValues(ctx context.Context, in *ValuesListRequest, opts ...grpc.CallOption) (*WorkshopClubSpuValuesResponse, error) {
	out := new(WorkshopClubSpuValuesResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubSpuValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubWorkshopCreate(ctx context.Context, in *ClubWorkshopRequest, opts ...grpc.CallOption) (*ClubWorkshopResponse, error) {
	out := new(ClubWorkshopResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubWorkshopCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubWorkshopDestroy(ctx context.Context, in *ClubWorkshopDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkshopController_ClubWorkshopDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubWorkshopList(ctx context.Context, in *ClubWorkshopRequest, opts ...grpc.CallOption) (*ClubWorkshopListResponse, error) {
	out := new(ClubWorkshopListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubWorkshopList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubWorkshopRetrieve(ctx context.Context, in *ClubWorkshopRetrieveRequest, opts ...grpc.CallOption) (*ClubWorkshopResponse, error) {
	out := new(ClubWorkshopResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubWorkshopRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) ClubWorkshopUpdate(ctx context.Context, in *ClubWorkshopUpdateRequest, opts ...grpc.CallOption) (*ClubWorkshopResponse, error) {
	out := new(ClubWorkshopResponse)
	err := c.cc.Invoke(ctx, WorkshopController_ClubWorkshopUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) Create(ctx context.Context, in *ProdWorkshopRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error) {
	out := new(ProdWorkshopResponse)
	err := c.cc.Invoke(ctx, WorkshopController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) CreateList(ctx context.Context, in *ProdWorkshopListRequest, opts ...grpc.CallOption) (*ProdWorkshopListResponse, error) {
	out := new(ProdWorkshopListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_CreateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) Destroy(ctx context.Context, in *ProdWorkshopDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkshopController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) FilterRetrieve(ctx context.Context, in *ProdWorkshopPartRequest, opts ...grpc.CallOption) (*ProdWorkshopPartResponse, error) {
	out := new(ProdWorkshopPartResponse)
	err := c.cc.Invoke(ctx, WorkshopController_FilterRetrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) List(ctx context.Context, in *ProdWorkshopPartListRequest, opts ...grpc.CallOption) (*ProdWorkshopPartListResponse, error) {
	out := new(ProdWorkshopPartListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) PartialUpdate(ctx context.Context, in *ProdWorkshopPartialUpdateRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error) {
	out := new(ProdWorkshopResponse)
	err := c.cc.Invoke(ctx, WorkshopController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) Properties(ctx context.Context, in *ProdWorkshopPartRequest, opts ...grpc.CallOption) (*WorkshopPropertiesListResponse, error) {
	out := new(WorkshopPropertiesListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_Properties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) Retrieve(ctx context.Context, in *ProdWorkshopRetrieveRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error) {
	out := new(ProdWorkshopResponse)
	err := c.cc.Invoke(ctx, WorkshopController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) SkuSpareParts(ctx context.Context, in *RawSkuSparePartsRequest, opts ...grpc.CallOption) (*RawSkuSparePartsListResponse, error) {
	out := new(RawSkuSparePartsListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_SkuSpareParts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) SpuProperties(ctx context.Context, in *ProdWorkshopPartRequest, opts ...grpc.CallOption) (*WorkshopSpuListResponse, error) {
	out := new(WorkshopSpuListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_SpuProperties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) Update(ctx context.Context, in *ProdWorkshopRequest, opts ...grpc.CallOption) (*ProdWorkshopResponse, error) {
	out := new(ProdWorkshopResponse)
	err := c.cc.Invoke(ctx, WorkshopController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) WorkshopColorList(ctx context.Context, in *WorkshopColorRequest, opts ...grpc.CallOption) (*WorkshopColorListResponse, error) {
	out := new(WorkshopColorListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_WorkshopColorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopControllerClient) WorkshopConfigList(ctx context.Context, in *WorkshopConfigRequest, opts ...grpc.CallOption) (*WorkshopConfigListResponse, error) {
	out := new(WorkshopConfigListResponse)
	err := c.cc.Invoke(ctx, WorkshopController_WorkshopConfigList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkshopControllerServer is the server API for WorkshopController service.
// All implementations must embed UnimplementedWorkshopControllerServer
// for forward compatibility
type WorkshopControllerServer interface {
	ClubSkuCreate(context.Context, *ClubProductRequest) (*ClubProductResponse, error)
	ClubSkuDestroy(context.Context, *ClubProductDestroyRequest) (*emptypb.Empty, error)
	ClubSkuList(context.Context, *ClubProductRequest) (*ClubProductListResponse, error)
	ClubSkuRetrieve(context.Context, *ClubProductRetrieveRequest) (*ClubProductResponse, error)
	ClubSkuUpdate(context.Context, *ClubProductUpdateRequest) (*ClubProductResponse, error)
	ClubSpuCreate(context.Context, *ClubProductSpuRequest) (*ClubProductSpuResponse, error)
	ClubSpuDestroy(context.Context, *ClubProductSpuDestroyRequest) (*emptypb.Empty, error)
	ClubSpuList(context.Context, *ClubProductSpuRequest) (*ClubProductSpuListResponse, error)
	ClubSpuUpdate(context.Context, *ClubProductSpuUpdateRequest) (*ClubProductSpuResponse, error)
	ClubSpuValues(context.Context, *ValuesListRequest) (*WorkshopClubSpuValuesResponse, error)
	ClubWorkshopCreate(context.Context, *ClubWorkshopRequest) (*ClubWorkshopResponse, error)
	ClubWorkshopDestroy(context.Context, *ClubWorkshopDestroyRequest) (*emptypb.Empty, error)
	ClubWorkshopList(context.Context, *ClubWorkshopRequest) (*ClubWorkshopListResponse, error)
	ClubWorkshopRetrieve(context.Context, *ClubWorkshopRetrieveRequest) (*ClubWorkshopResponse, error)
	ClubWorkshopUpdate(context.Context, *ClubWorkshopUpdateRequest) (*ClubWorkshopResponse, error)
	Create(context.Context, *ProdWorkshopRequest) (*ProdWorkshopResponse, error)
	CreateList(context.Context, *ProdWorkshopListRequest) (*ProdWorkshopListResponse, error)
	Destroy(context.Context, *ProdWorkshopDestroyRequest) (*emptypb.Empty, error)
	FilterRetrieve(context.Context, *ProdWorkshopPartRequest) (*ProdWorkshopPartResponse, error)
	List(context.Context, *ProdWorkshopPartListRequest) (*ProdWorkshopPartListResponse, error)
	PartialUpdate(context.Context, *ProdWorkshopPartialUpdateRequest) (*ProdWorkshopResponse, error)
	Properties(context.Context, *ProdWorkshopPartRequest) (*WorkshopPropertiesListResponse, error)
	Retrieve(context.Context, *ProdWorkshopRetrieveRequest) (*ProdWorkshopResponse, error)
	SkuSpareParts(context.Context, *RawSkuSparePartsRequest) (*RawSkuSparePartsListResponse, error)
	SpuProperties(context.Context, *ProdWorkshopPartRequest) (*WorkshopSpuListResponse, error)
	Update(context.Context, *ProdWorkshopRequest) (*ProdWorkshopResponse, error)
	WorkshopColorList(context.Context, *WorkshopColorRequest) (*WorkshopColorListResponse, error)
	WorkshopConfigList(context.Context, *WorkshopConfigRequest) (*WorkshopConfigListResponse, error)
	mustEmbedUnimplementedWorkshopControllerServer()
}

// UnimplementedWorkshopControllerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkshopControllerServer struct {
}

func (UnimplementedWorkshopControllerServer) ClubSkuCreate(context.Context, *ClubProductRequest) (*ClubProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSkuCreate not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSkuDestroy(context.Context, *ClubProductDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSkuDestroy not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSkuList(context.Context, *ClubProductRequest) (*ClubProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSkuList not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSkuRetrieve(context.Context, *ClubProductRetrieveRequest) (*ClubProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSkuRetrieve not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSkuUpdate(context.Context, *ClubProductUpdateRequest) (*ClubProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSkuUpdate not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSpuCreate(context.Context, *ClubProductSpuRequest) (*ClubProductSpuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSpuCreate not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSpuDestroy(context.Context, *ClubProductSpuDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSpuDestroy not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSpuList(context.Context, *ClubProductSpuRequest) (*ClubProductSpuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSpuList not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSpuUpdate(context.Context, *ClubProductSpuUpdateRequest) (*ClubProductSpuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSpuUpdate not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubSpuValues(context.Context, *ValuesListRequest) (*WorkshopClubSpuValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubSpuValues not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubWorkshopCreate(context.Context, *ClubWorkshopRequest) (*ClubWorkshopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubWorkshopCreate not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubWorkshopDestroy(context.Context, *ClubWorkshopDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubWorkshopDestroy not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubWorkshopList(context.Context, *ClubWorkshopRequest) (*ClubWorkshopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubWorkshopList not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubWorkshopRetrieve(context.Context, *ClubWorkshopRetrieveRequest) (*ClubWorkshopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubWorkshopRetrieve not implemented")
}
func (UnimplementedWorkshopControllerServer) ClubWorkshopUpdate(context.Context, *ClubWorkshopUpdateRequest) (*ClubWorkshopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClubWorkshopUpdate not implemented")
}
func (UnimplementedWorkshopControllerServer) Create(context.Context, *ProdWorkshopRequest) (*ProdWorkshopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkshopControllerServer) CreateList(context.Context, *ProdWorkshopListRequest) (*ProdWorkshopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedWorkshopControllerServer) Destroy(context.Context, *ProdWorkshopDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedWorkshopControllerServer) FilterRetrieve(context.Context, *ProdWorkshopPartRequest) (*ProdWorkshopPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterRetrieve not implemented")
}
func (UnimplementedWorkshopControllerServer) List(context.Context, *ProdWorkshopPartListRequest) (*ProdWorkshopPartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkshopControllerServer) PartialUpdate(context.Context, *ProdWorkshopPartialUpdateRequest) (*ProdWorkshopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedWorkshopControllerServer) Properties(context.Context, *ProdWorkshopPartRequest) (*WorkshopPropertiesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Properties not implemented")
}
func (UnimplementedWorkshopControllerServer) Retrieve(context.Context, *ProdWorkshopRetrieveRequest) (*ProdWorkshopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedWorkshopControllerServer) SkuSpareParts(context.Context, *RawSkuSparePartsRequest) (*RawSkuSparePartsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuSpareParts not implemented")
}
func (UnimplementedWorkshopControllerServer) SpuProperties(context.Context, *ProdWorkshopPartRequest) (*WorkshopSpuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpuProperties not implemented")
}
func (UnimplementedWorkshopControllerServer) Update(context.Context, *ProdWorkshopRequest) (*ProdWorkshopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWorkshopControllerServer) WorkshopColorList(context.Context, *WorkshopColorRequest) (*WorkshopColorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkshopColorList not implemented")
}
func (UnimplementedWorkshopControllerServer) WorkshopConfigList(context.Context, *WorkshopConfigRequest) (*WorkshopConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkshopConfigList not implemented")
}
func (UnimplementedWorkshopControllerServer) mustEmbedUnimplementedWorkshopControllerServer() {}

// UnsafeWorkshopControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkshopControllerServer will
// result in compilation errors.
type UnsafeWorkshopControllerServer interface {
	mustEmbedUnimplementedWorkshopControllerServer()
}

func RegisterWorkshopControllerServer(s grpc.ServiceRegistrar, srv WorkshopControllerServer) {
	s.RegisterService(&WorkshopController_ServiceDesc, srv)
}

func _WorkshopController_ClubSkuCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSkuCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSkuCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSkuCreate(ctx, req.(*ClubProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSkuDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSkuDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSkuDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSkuDestroy(ctx, req.(*ClubProductDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSkuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSkuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSkuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSkuList(ctx, req.(*ClubProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSkuRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSkuRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSkuRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSkuRetrieve(ctx, req.(*ClubProductRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSkuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSkuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSkuUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSkuUpdate(ctx, req.(*ClubProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSpuCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductSpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSpuCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSpuCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSpuCreate(ctx, req.(*ClubProductSpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSpuDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductSpuDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSpuDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSpuDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSpuDestroy(ctx, req.(*ClubProductSpuDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSpuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductSpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSpuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSpuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSpuList(ctx, req.(*ClubProductSpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSpuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProductSpuUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSpuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSpuUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSpuUpdate(ctx, req.(*ClubProductSpuUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubSpuValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValuesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubSpuValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubSpuValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubSpuValues(ctx, req.(*ValuesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubWorkshopCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubWorkshopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubWorkshopCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubWorkshopCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubWorkshopCreate(ctx, req.(*ClubWorkshopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubWorkshopDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubWorkshopDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubWorkshopDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubWorkshopDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubWorkshopDestroy(ctx, req.(*ClubWorkshopDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubWorkshopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubWorkshopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubWorkshopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubWorkshopList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubWorkshopList(ctx, req.(*ClubWorkshopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubWorkshopRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubWorkshopRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubWorkshopRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubWorkshopRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubWorkshopRetrieve(ctx, req.(*ClubWorkshopRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_ClubWorkshopUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubWorkshopUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).ClubWorkshopUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_ClubWorkshopUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).ClubWorkshopUpdate(ctx, req.(*ClubWorkshopUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).Create(ctx, req.(*ProdWorkshopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).CreateList(ctx, req.(*ProdWorkshopListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).Destroy(ctx, req.(*ProdWorkshopDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_FilterRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).FilterRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_FilterRetrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).FilterRetrieve(ctx, req.(*ProdWorkshopPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopPartListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).List(ctx, req.(*ProdWorkshopPartListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).PartialUpdate(ctx, req.(*ProdWorkshopPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_Properties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).Properties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_Properties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).Properties(ctx, req.(*ProdWorkshopPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).Retrieve(ctx, req.(*ProdWorkshopRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_SkuSpareParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawSkuSparePartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).SkuSpareParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_SkuSpareParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).SkuSpareParts(ctx, req.(*RawSkuSparePartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_SpuProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).SpuProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_SpuProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).SpuProperties(ctx, req.(*ProdWorkshopPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdWorkshopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).Update(ctx, req.(*ProdWorkshopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_WorkshopColorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkshopColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).WorkshopColorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_WorkshopColorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).WorkshopColorList(ctx, req.(*WorkshopColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopController_WorkshopConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkshopConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopControllerServer).WorkshopConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopController_WorkshopConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopControllerServer).WorkshopConfigList(ctx, req.(*WorkshopConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkshopController_ServiceDesc is the grpc.ServiceDesc for WorkshopController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkshopController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.prod_ito.WorkshopController",
	HandlerType: (*WorkshopControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClubSkuCreate",
			Handler:    _WorkshopController_ClubSkuCreate_Handler,
		},
		{
			MethodName: "ClubSkuDestroy",
			Handler:    _WorkshopController_ClubSkuDestroy_Handler,
		},
		{
			MethodName: "ClubSkuList",
			Handler:    _WorkshopController_ClubSkuList_Handler,
		},
		{
			MethodName: "ClubSkuRetrieve",
			Handler:    _WorkshopController_ClubSkuRetrieve_Handler,
		},
		{
			MethodName: "ClubSkuUpdate",
			Handler:    _WorkshopController_ClubSkuUpdate_Handler,
		},
		{
			MethodName: "ClubSpuCreate",
			Handler:    _WorkshopController_ClubSpuCreate_Handler,
		},
		{
			MethodName: "ClubSpuDestroy",
			Handler:    _WorkshopController_ClubSpuDestroy_Handler,
		},
		{
			MethodName: "ClubSpuList",
			Handler:    _WorkshopController_ClubSpuList_Handler,
		},
		{
			MethodName: "ClubSpuUpdate",
			Handler:    _WorkshopController_ClubSpuUpdate_Handler,
		},
		{
			MethodName: "ClubSpuValues",
			Handler:    _WorkshopController_ClubSpuValues_Handler,
		},
		{
			MethodName: "ClubWorkshopCreate",
			Handler:    _WorkshopController_ClubWorkshopCreate_Handler,
		},
		{
			MethodName: "ClubWorkshopDestroy",
			Handler:    _WorkshopController_ClubWorkshopDestroy_Handler,
		},
		{
			MethodName: "ClubWorkshopList",
			Handler:    _WorkshopController_ClubWorkshopList_Handler,
		},
		{
			MethodName: "ClubWorkshopRetrieve",
			Handler:    _WorkshopController_ClubWorkshopRetrieve_Handler,
		},
		{
			MethodName: "ClubWorkshopUpdate",
			Handler:    _WorkshopController_ClubWorkshopUpdate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _WorkshopController_Create_Handler,
		},
		{
			MethodName: "CreateList",
			Handler:    _WorkshopController_CreateList_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _WorkshopController_Destroy_Handler,
		},
		{
			MethodName: "FilterRetrieve",
			Handler:    _WorkshopController_FilterRetrieve_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkshopController_List_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _WorkshopController_PartialUpdate_Handler,
		},
		{
			MethodName: "Properties",
			Handler:    _WorkshopController_Properties_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _WorkshopController_Retrieve_Handler,
		},
		{
			MethodName: "SkuSpareParts",
			Handler:    _WorkshopController_SkuSpareParts_Handler,
		},
		{
			MethodName: "SpuProperties",
			Handler:    _WorkshopController_SpuProperties_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WorkshopController_Update_Handler,
		},
		{
			MethodName: "WorkshopColorList",
			Handler:    _WorkshopController_WorkshopColorList_Handler,
		},
		{
			MethodName: "WorkshopConfigList",
			Handler:    _WorkshopController_WorkshopConfigList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawgoods.proto",
}
