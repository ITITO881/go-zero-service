// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: rawgoods.proto

package pbRawGoodsIto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClubProductDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClubProductDestroyRequest) Reset() {
	*x = ClubProductDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductDestroyRequest) ProtoMessage() {}

func (x *ClubProductDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductDestroyRequest.ProtoReflect.Descriptor instead.
func (*ClubProductDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{0}
}

func (x *ClubProductDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClubProductListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClubProductResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ClubProductListResponse) Reset() {
	*x = ClubProductListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductListResponse) ProtoMessage() {}

func (x *ClubProductListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductListResponse.ProtoReflect.Descriptor instead.
func (*ClubProductListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{1}
}

func (x *ClubProductListResponse) GetResults() []*ClubProductResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ClubProductListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ClubProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters        string  `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Id             int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Color          *string `protobuf:"bytes,6,opt,name=color,proto3,oneof" json:"color,omitempty"`
	ColorRgb       *string `protobuf:"bytes,7,opt,name=color_rgb,json=colorRgb,proto3,oneof" json:"color_rgb,omitempty"`
	Size           *string `protobuf:"bytes,8,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Stripe         *string `protobuf:"bytes,9,opt,name=stripe,proto3,oneof" json:"stripe,omitempty"`
	HeadImg        *string `protobuf:"bytes,10,opt,name=head_img,json=headImg,proto3,oneof" json:"head_img,omitempty"`
	RenewTimeUnit  *string `protobuf:"bytes,16,opt,name=renew_time_unit,json=renewTimeUnit,proto3,oneof" json:"renew_time_unit,omitempty"`
	RepairTimeUnit *string `protobuf:"bytes,17,opt,name=repair_time_unit,json=repairTimeUnit,proto3,oneof" json:"repair_time_unit,omitempty"`
	Sort           *int32  `protobuf:"varint,18,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Spu            int64   `protobuf:"varint,19,opt,name=spu,proto3" json:"spu,omitempty"`
	Prod           string  `protobuf:"bytes,20,opt,name=prod,proto3" json:"prod,omitempty"`
	WorkshopColor  []int64 `protobuf:"varint,21,rep,packed,name=workshop_color,json=workshopColor,proto3" json:"workshop_color,omitempty"`
	IsValid        bool    `protobuf:"varint,22,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *ClubProductRequest) Reset() {
	*x = ClubProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductRequest) ProtoMessage() {}

func (x *ClubProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductRequest.ProtoReflect.Descriptor instead.
func (*ClubProductRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{2}
}

func (x *ClubProductRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ClubProductRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubProductRequest) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *ClubProductRequest) GetColorRgb() string {
	if x != nil && x.ColorRgb != nil {
		return *x.ColorRgb
	}
	return ""
}

func (x *ClubProductRequest) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *ClubProductRequest) GetStripe() string {
	if x != nil && x.Stripe != nil {
		return *x.Stripe
	}
	return ""
}

func (x *ClubProductRequest) GetHeadImg() string {
	if x != nil && x.HeadImg != nil {
		return *x.HeadImg
	}
	return ""
}

func (x *ClubProductRequest) GetRenewTimeUnit() string {
	if x != nil && x.RenewTimeUnit != nil {
		return *x.RenewTimeUnit
	}
	return ""
}

func (x *ClubProductRequest) GetRepairTimeUnit() string {
	if x != nil && x.RepairTimeUnit != nil {
		return *x.RepairTimeUnit
	}
	return ""
}

func (x *ClubProductRequest) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *ClubProductRequest) GetSpu() int64 {
	if x != nil {
		return x.Spu
	}
	return 0
}

func (x *ClubProductRequest) GetProd() string {
	if x != nil {
		return x.Prod
	}
	return ""
}

func (x *ClubProductRequest) GetWorkshopColor() []int64 {
	if x != nil {
		return x.WorkshopColor
	}
	return nil
}

func (x *ClubProductRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type ClubProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdCat        string                   `protobuf:"bytes,2,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	SpuName        string                   `protobuf:"bytes,3,opt,name=spu_name,json=spuName,proto3" json:"spu_name,omitempty"`
	Alias          string                   `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	ProdCode       string                   `protobuf:"bytes,5,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	OriginCat      string                   `protobuf:"bytes,6,opt,name=origin_cat,json=originCat,proto3" json:"origin_cat,omitempty"`
	FullName       string                   `protobuf:"bytes,7,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Color          *string                  `protobuf:"bytes,8,opt,name=color,proto3,oneof" json:"color,omitempty"`
	ColorRgb       *string                  `protobuf:"bytes,9,opt,name=color_rgb,json=colorRgb,proto3,oneof" json:"color_rgb,omitempty"`
	Size           *string                  `protobuf:"bytes,10,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Stripe         *string                  `protobuf:"bytes,11,opt,name=stripe,proto3,oneof" json:"stripe,omitempty"`
	HeadImg        *string                  `protobuf:"bytes,12,opt,name=head_img,json=headImg,proto3,oneof" json:"head_img,omitempty"`
	Bindable       bool                     `protobuf:"varint,14,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable   bool                     `protobuf:"varint,15,opt,name=customizable,proto3" json:"customizable,omitempty"`
	RenewTime      int32                    `protobuf:"varint,16,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RepairTime     int32                    `protobuf:"varint,17,opt,name=repair_time,json=repairTime,proto3" json:"repair_time,omitempty"`
	RenewTimeUnit  *string                  `protobuf:"bytes,18,opt,name=renew_time_unit,json=renewTimeUnit,proto3,oneof" json:"renew_time_unit,omitempty"`
	RepairTimeUnit *string                  `protobuf:"bytes,19,opt,name=repair_time_unit,json=repairTimeUnit,proto3,oneof" json:"repair_time_unit,omitempty"`
	Sort           *int32                   `protobuf:"varint,20,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	CreateTime     string                   `protobuf:"bytes,21,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string                   `protobuf:"bytes,22,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Spu            int64                    `protobuf:"varint,23,opt,name=spu,proto3" json:"spu,omitempty"`
	Prod           string                   `protobuf:"bytes,24,opt,name=prod,proto3" json:"prod,omitempty"`
	ProdImage      string                   `protobuf:"bytes,25,opt,name=prod_image,json=prodImage,proto3" json:"prod_image,omitempty"`
	WorkshopColor  []int64                  `protobuf:"varint,26,rep,packed,name=workshop_color,json=workshopColor,proto3" json:"workshop_color,omitempty"`
	WorkshopColors []*WorkshopColorResponse `protobuf:"bytes,27,rep,name=workshop_colors,json=workshopColors,proto3" json:"workshop_colors,omitempty"`
	PrintWay       int32                    `protobuf:"varint,28,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
	Sku            string                   `protobuf:"bytes,29,opt,name=sku,proto3" json:"sku,omitempty"`
	IsValid        bool                     `protobuf:"varint,30,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *ClubProductResponse) Reset() {
	*x = ClubProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductResponse) ProtoMessage() {}

func (x *ClubProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductResponse.ProtoReflect.Descriptor instead.
func (*ClubProductResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{3}
}

func (x *ClubProductResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubProductResponse) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ClubProductResponse) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ClubProductResponse) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ClubProductResponse) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ClubProductResponse) GetOriginCat() string {
	if x != nil {
		return x.OriginCat
	}
	return ""
}

func (x *ClubProductResponse) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ClubProductResponse) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *ClubProductResponse) GetColorRgb() string {
	if x != nil && x.ColorRgb != nil {
		return *x.ColorRgb
	}
	return ""
}

func (x *ClubProductResponse) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *ClubProductResponse) GetStripe() string {
	if x != nil && x.Stripe != nil {
		return *x.Stripe
	}
	return ""
}

func (x *ClubProductResponse) GetHeadImg() string {
	if x != nil && x.HeadImg != nil {
		return *x.HeadImg
	}
	return ""
}

func (x *ClubProductResponse) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ClubProductResponse) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

func (x *ClubProductResponse) GetRenewTime() int32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *ClubProductResponse) GetRepairTime() int32 {
	if x != nil {
		return x.RepairTime
	}
	return 0
}

func (x *ClubProductResponse) GetRenewTimeUnit() string {
	if x != nil && x.RenewTimeUnit != nil {
		return *x.RenewTimeUnit
	}
	return ""
}

func (x *ClubProductResponse) GetRepairTimeUnit() string {
	if x != nil && x.RepairTimeUnit != nil {
		return *x.RepairTimeUnit
	}
	return ""
}

func (x *ClubProductResponse) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *ClubProductResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ClubProductResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ClubProductResponse) GetSpu() int64 {
	if x != nil {
		return x.Spu
	}
	return 0
}

func (x *ClubProductResponse) GetProd() string {
	if x != nil {
		return x.Prod
	}
	return ""
}

func (x *ClubProductResponse) GetProdImage() string {
	if x != nil {
		return x.ProdImage
	}
	return ""
}

func (x *ClubProductResponse) GetWorkshopColor() []int64 {
	if x != nil {
		return x.WorkshopColor
	}
	return nil
}

func (x *ClubProductResponse) GetWorkshopColors() []*WorkshopColorResponse {
	if x != nil {
		return x.WorkshopColors
	}
	return nil
}

func (x *ClubProductResponse) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

func (x *ClubProductResponse) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ClubProductResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type ClubProductRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClubProductRetrieveRequest) Reset() {
	*x = ClubProductRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductRetrieveRequest) ProtoMessage() {}

func (x *ClubProductRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ClubProductRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{4}
}

func (x *ClubProductRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClubProductSpuDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClubProductSpuDestroyRequest) Reset() {
	*x = ClubProductSpuDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductSpuDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductSpuDestroyRequest) ProtoMessage() {}

func (x *ClubProductSpuDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductSpuDestroyRequest.ProtoReflect.Descriptor instead.
func (*ClubProductSpuDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{5}
}

func (x *ClubProductSpuDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClubProductSpuListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClubProductSpuResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ClubProductSpuListResponse) Reset() {
	*x = ClubProductSpuListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductSpuListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductSpuListResponse) ProtoMessage() {}

func (x *ClubProductSpuListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductSpuListResponse.ProtoReflect.Descriptor instead.
func (*ClubProductSpuListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{6}
}

func (x *ClubProductSpuListResponse) GetResults() []*ClubProductSpuResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ClubProductSpuListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ClubProductSpuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters   string  `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Id        int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ProdCat   string  `protobuf:"bytes,3,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	OriginCat *string `protobuf:"bytes,4,opt,name=origin_cat,json=originCat,proto3,oneof" json:"origin_cat,omitempty"`
	SpuName   string  `protobuf:"bytes,5,opt,name=spu_name,json=spuName,proto3" json:"spu_name,omitempty"`
	Alias     *string `protobuf:"bytes,6,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	IsValid   bool    `protobuf:"varint,7,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Sort      int32   `protobuf:"varint,10,opt,name=sort,proto3" json:"sort,omitempty"`
	PrintWay  int32   `protobuf:"varint,11,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ClubProductSpuRequest) Reset() {
	*x = ClubProductSpuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductSpuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductSpuRequest) ProtoMessage() {}

func (x *ClubProductSpuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductSpuRequest.ProtoReflect.Descriptor instead.
func (*ClubProductSpuRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{7}
}

func (x *ClubProductSpuRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ClubProductSpuRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubProductSpuRequest) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ClubProductSpuRequest) GetOriginCat() string {
	if x != nil && x.OriginCat != nil {
		return *x.OriginCat
	}
	return ""
}

func (x *ClubProductSpuRequest) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ClubProductSpuRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ClubProductSpuRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ClubProductSpuRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ClubProductSpuRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ClubProductSpuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Color        []string               `protobuf:"bytes,2,rep,name=color,proto3" json:"color,omitempty"`
	ColorRgb     []string               `protobuf:"bytes,3,rep,name=color_rgb,json=colorRgb,proto3" json:"color_rgb,omitempty"`
	Size         []string               `protobuf:"bytes,4,rep,name=size,proto3" json:"size,omitempty"`
	Stripe       []string               `protobuf:"bytes,5,rep,name=stripe,proto3" json:"stripe,omitempty"`
	ProdSkus     []*ClubProductResponse `protobuf:"bytes,6,rep,name=prod_skus,json=prodSkus,proto3" json:"prod_skus,omitempty"`
	ProdCat      string                 `protobuf:"bytes,7,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	OriginCat    *string                `protobuf:"bytes,8,opt,name=origin_cat,json=originCat,proto3,oneof" json:"origin_cat,omitempty"`
	SpuName      string                 `protobuf:"bytes,9,opt,name=spu_name,json=spuName,proto3" json:"spu_name,omitempty"`
	Alias        *string                `protobuf:"bytes,10,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	IsValid      bool                   `protobuf:"varint,11,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Sort         int32                  `protobuf:"varint,14,opt,name=sort,proto3" json:"sort,omitempty"`
	CreateTime   string                 `protobuf:"bytes,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string                 `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	PrintWay     int32                  `protobuf:"varint,17,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
	PrintWayName string                 `protobuf:"bytes,18,opt,name=print_way_name,json=printWayName,proto3" json:"print_way_name,omitempty"`
}

func (x *ClubProductSpuResponse) Reset() {
	*x = ClubProductSpuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductSpuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductSpuResponse) ProtoMessage() {}

func (x *ClubProductSpuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductSpuResponse.ProtoReflect.Descriptor instead.
func (*ClubProductSpuResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{8}
}

func (x *ClubProductSpuResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubProductSpuResponse) GetColor() []string {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ClubProductSpuResponse) GetColorRgb() []string {
	if x != nil {
		return x.ColorRgb
	}
	return nil
}

func (x *ClubProductSpuResponse) GetSize() []string {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ClubProductSpuResponse) GetStripe() []string {
	if x != nil {
		return x.Stripe
	}
	return nil
}

func (x *ClubProductSpuResponse) GetProdSkus() []*ClubProductResponse {
	if x != nil {
		return x.ProdSkus
	}
	return nil
}

func (x *ClubProductSpuResponse) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ClubProductSpuResponse) GetOriginCat() string {
	if x != nil && x.OriginCat != nil {
		return *x.OriginCat
	}
	return ""
}

func (x *ClubProductSpuResponse) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ClubProductSpuResponse) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ClubProductSpuResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ClubProductSpuResponse) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ClubProductSpuResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ClubProductSpuResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ClubProductSpuResponse) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

func (x *ClubProductSpuResponse) GetPrintWayName() string {
	if x != nil {
		return x.PrintWayName
	}
	return ""
}

type ClubProductSpuUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ProdCat              string   `protobuf:"bytes,4,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	OriginCat            *string  `protobuf:"bytes,5,opt,name=origin_cat,json=originCat,proto3,oneof" json:"origin_cat,omitempty"`
	SpuName              string   `protobuf:"bytes,6,opt,name=spu_name,json=spuName,proto3" json:"spu_name,omitempty"`
	Alias                *string  `protobuf:"bytes,7,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	IsValid              bool     `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Sort                 int32    `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	PrintWay             int32    `protobuf:"varint,12,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ClubProductSpuUpdateRequest) Reset() {
	*x = ClubProductSpuUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductSpuUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductSpuUpdateRequest) ProtoMessage() {}

func (x *ClubProductSpuUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductSpuUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClubProductSpuUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{9}
}

func (x *ClubProductSpuUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubProductSpuUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ClubProductSpuUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ClubProductSpuUpdateRequest) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ClubProductSpuUpdateRequest) GetOriginCat() string {
	if x != nil && x.OriginCat != nil {
		return *x.OriginCat
	}
	return ""
}

func (x *ClubProductSpuUpdateRequest) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ClubProductSpuUpdateRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ClubProductSpuUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ClubProductSpuUpdateRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ClubProductSpuUpdateRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ClubProductUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Color                *string  `protobuf:"bytes,7,opt,name=color,proto3,oneof" json:"color,omitempty"`
	ColorRgb             *string  `protobuf:"bytes,8,opt,name=color_rgb,json=colorRgb,proto3,oneof" json:"color_rgb,omitempty"`
	Size                 *string  `protobuf:"bytes,9,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Stripe               *string  `protobuf:"bytes,10,opt,name=stripe,proto3,oneof" json:"stripe,omitempty"`
	HeadImg              *string  `protobuf:"bytes,11,opt,name=head_img,json=headImg,proto3,oneof" json:"head_img,omitempty"`
	RenewTimeUnit        *string  `protobuf:"bytes,17,opt,name=renew_time_unit,json=renewTimeUnit,proto3,oneof" json:"renew_time_unit,omitempty"`
	RepairTimeUnit       *string  `protobuf:"bytes,18,opt,name=repair_time_unit,json=repairTimeUnit,proto3,oneof" json:"repair_time_unit,omitempty"`
	Sort                 *int32   `protobuf:"varint,19,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Spu                  int64    `protobuf:"varint,20,opt,name=spu,proto3" json:"spu,omitempty"`
	Prod                 string   `protobuf:"bytes,21,opt,name=prod,proto3" json:"prod,omitempty"`
	WorkshopColor        []int64  `protobuf:"varint,22,rep,packed,name=workshop_color,json=workshopColor,proto3" json:"workshop_color,omitempty"`
	IsValid              bool     `protobuf:"varint,23,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *ClubProductUpdateRequest) Reset() {
	*x = ClubProductUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubProductUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubProductUpdateRequest) ProtoMessage() {}

func (x *ClubProductUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubProductUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClubProductUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{10}
}

func (x *ClubProductUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubProductUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ClubProductUpdateRequest) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetColorRgb() string {
	if x != nil && x.ColorRgb != nil {
		return *x.ColorRgb
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetStripe() string {
	if x != nil && x.Stripe != nil {
		return *x.Stripe
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetHeadImg() string {
	if x != nil && x.HeadImg != nil {
		return *x.HeadImg
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetRenewTimeUnit() string {
	if x != nil && x.RenewTimeUnit != nil {
		return *x.RenewTimeUnit
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetRepairTimeUnit() string {
	if x != nil && x.RepairTimeUnit != nil {
		return *x.RepairTimeUnit
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *ClubProductUpdateRequest) GetSpu() int64 {
	if x != nil {
		return x.Spu
	}
	return 0
}

func (x *ClubProductUpdateRequest) GetProd() string {
	if x != nil {
		return x.Prod
	}
	return ""
}

func (x *ClubProductUpdateRequest) GetWorkshopColor() []int64 {
	if x != nil {
		return x.WorkshopColor
	}
	return nil
}

func (x *ClubProductUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type ClubWorkshopDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClubWorkshopDestroyRequest) Reset() {
	*x = ClubWorkshopDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubWorkshopDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubWorkshopDestroyRequest) ProtoMessage() {}

func (x *ClubWorkshopDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubWorkshopDestroyRequest.ProtoReflect.Descriptor instead.
func (*ClubWorkshopDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{11}
}

func (x *ClubWorkshopDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClubWorkshopListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClubWorkshopResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ClubWorkshopListResponse) Reset() {
	*x = ClubWorkshopListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubWorkshopListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubWorkshopListResponse) ProtoMessage() {}

func (x *ClubWorkshopListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubWorkshopListResponse.ProtoReflect.Descriptor instead.
func (*ClubWorkshopListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{12}
}

func (x *ClubWorkshopListResponse) GetResults() []*ClubWorkshopResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ClubWorkshopListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ClubWorkshopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters     string  `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Id          int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ProdId      int32   `protobuf:"varint,3,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
	PartName    *string `protobuf:"bytes,4,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid     bool    `protobuf:"varint,5,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage   *string `protobuf:"bytes,6,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	PrintWay    int32   `protobuf:"varint,7,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
	FontRegular *string `protobuf:"bytes,8,opt,name=font_regular,json=fontRegular,proto3,oneof" json:"font_regular,omitempty"`
	Prod        *int64  `protobuf:"varint,9,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
}

func (x *ClubWorkshopRequest) Reset() {
	*x = ClubWorkshopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubWorkshopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubWorkshopRequest) ProtoMessage() {}

func (x *ClubWorkshopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubWorkshopRequest.ProtoReflect.Descriptor instead.
func (*ClubWorkshopRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{13}
}

func (x *ClubWorkshopRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ClubWorkshopRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubWorkshopRequest) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

func (x *ClubWorkshopRequest) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ClubWorkshopRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ClubWorkshopRequest) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ClubWorkshopRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

func (x *ClubWorkshopRequest) GetFontRegular() string {
	if x != nil && x.FontRegular != nil {
		return *x.FontRegular
	}
	return ""
}

func (x *ClubWorkshopRequest) GetProd() int64 {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return 0
}

type ClubWorkshopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartName     *string `protobuf:"bytes,2,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid      bool    `protobuf:"varint,3,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage    *string `protobuf:"bytes,4,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	PrintWay     int32   `protobuf:"varint,5,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
	CreateTime   string  `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string  `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Prod         *int64  `protobuf:"varint,8,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
	ProdCat      string  `protobuf:"bytes,9,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	SpuName      string  `protobuf:"bytes,10,opt,name=spu_name,json=spuName,proto3" json:"spu_name,omitempty"`
	Alias        string  `protobuf:"bytes,11,opt,name=alias,proto3" json:"alias,omitempty"`
	PrintWayName string  `protobuf:"bytes,12,opt,name=print_way_name,json=printWayName,proto3" json:"print_way_name,omitempty"`
	FontRegular  *string `protobuf:"bytes,13,opt,name=font_regular,json=fontRegular,proto3,oneof" json:"font_regular,omitempty"`
	Sku          string  `protobuf:"bytes,15,opt,name=sku,proto3" json:"sku,omitempty"`
	ProdId       int32   `protobuf:"varint,16,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
}

func (x *ClubWorkshopResponse) Reset() {
	*x = ClubWorkshopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubWorkshopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubWorkshopResponse) ProtoMessage() {}

func (x *ClubWorkshopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubWorkshopResponse.ProtoReflect.Descriptor instead.
func (*ClubWorkshopResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{14}
}

func (x *ClubWorkshopResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubWorkshopResponse) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ClubWorkshopResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ClubWorkshopResponse) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ClubWorkshopResponse) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

func (x *ClubWorkshopResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ClubWorkshopResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ClubWorkshopResponse) GetProd() int64 {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return 0
}

func (x *ClubWorkshopResponse) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ClubWorkshopResponse) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ClubWorkshopResponse) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ClubWorkshopResponse) GetPrintWayName() string {
	if x != nil {
		return x.PrintWayName
	}
	return ""
}

func (x *ClubWorkshopResponse) GetFontRegular() string {
	if x != nil && x.FontRegular != nil {
		return *x.FontRegular
	}
	return ""
}

func (x *ClubWorkshopResponse) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ClubWorkshopResponse) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

type ClubWorkshopRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClubWorkshopRetrieveRequest) Reset() {
	*x = ClubWorkshopRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubWorkshopRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubWorkshopRetrieveRequest) ProtoMessage() {}

func (x *ClubWorkshopRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubWorkshopRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ClubWorkshopRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{15}
}

func (x *ClubWorkshopRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClubWorkshopUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ProdId               int32    `protobuf:"varint,3,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PartName             *string  `protobuf:"bytes,5,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid              bool     `protobuf:"varint,6,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage            *string  `protobuf:"bytes,7,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	PrintWay             int32    `protobuf:"varint,8,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
	FontRegular          *string  `protobuf:"bytes,9,opt,name=font_regular,json=fontRegular,proto3,oneof" json:"font_regular,omitempty"`
	Prod                 *int64   `protobuf:"varint,10,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
}

func (x *ClubWorkshopUpdateRequest) Reset() {
	*x = ClubWorkshopUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubWorkshopUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubWorkshopUpdateRequest) ProtoMessage() {}

func (x *ClubWorkshopUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubWorkshopUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClubWorkshopUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{16}
}

func (x *ClubWorkshopUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClubWorkshopUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ClubWorkshopUpdateRequest) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

func (x *ClubWorkshopUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ClubWorkshopUpdateRequest) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ClubWorkshopUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ClubWorkshopUpdateRequest) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ClubWorkshopUpdateRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

func (x *ClubWorkshopUpdateRequest) GetFontRegular() string {
	if x != nil && x.FontRegular != nil {
		return *x.FontRegular
	}
	return ""
}

func (x *ClubWorkshopUpdateRequest) GetProd() int64 {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return 0
}

type ProdPropertiesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProdPropertiesListRequest) Reset() {
	*x = ProdPropertiesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdPropertiesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdPropertiesListRequest) ProtoMessage() {}

func (x *ProdPropertiesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdPropertiesListRequest.ProtoReflect.Descriptor instead.
func (*ProdPropertiesListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{17}
}

type ProdPropertiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ProdPropertiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ProdPropertiesListResponse) Reset() {
	*x = ProdPropertiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdPropertiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdPropertiesListResponse) ProtoMessage() {}

func (x *ProdPropertiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdPropertiesListResponse.ProtoReflect.Descriptor instead.
func (*ProdPropertiesListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{18}
}

func (x *ProdPropertiesListResponse) GetResults() []*ProdPropertiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type ProdPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Col        string `protobuf:"bytes,1,opt,name=col,proto3" json:"col,omitempty"`
	PropertyId string `protobuf:"bytes,2,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	Code       string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProdPropertiesResponse) Reset() {
	*x = ProdPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdPropertiesResponse) ProtoMessage() {}

func (x *ProdPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdPropertiesResponse.ProtoReflect.Descriptor instead.
func (*ProdPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{19}
}

func (x *ProdPropertiesResponse) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

func (x *ProdPropertiesResponse) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (x *ProdPropertiesResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProdPropertiesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProdSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RepairParts *RepairPartsResponse `protobuf:"bytes,2,opt,name=repair_parts,json=repairParts,proto3" json:"repair_parts,omitempty"`
	SerName     string               `protobuf:"bytes,3,opt,name=ser_name,json=serName,proto3" json:"ser_name,omitempty"`
	SerAlias    *string              `protobuf:"bytes,4,opt,name=ser_alias,json=serAlias,proto3,oneof" json:"ser_alias,omitempty"`
	SerCode     *string              `protobuf:"bytes,5,opt,name=ser_code,json=serCode,proto3,oneof" json:"ser_code,omitempty"`
	IsValid     bool                 `protobuf:"varint,6,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsDeletable bool                 `protobuf:"varint,7,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
	ProdCat     int64                `protobuf:"varint,8,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
}

func (x *ProdSeriesResponse) Reset() {
	*x = ProdSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdSeriesResponse) ProtoMessage() {}

func (x *ProdSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdSeriesResponse.ProtoReflect.Descriptor instead.
func (*ProdSeriesResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{20}
}

func (x *ProdSeriesResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdSeriesResponse) GetRepairParts() *RepairPartsResponse {
	if x != nil {
		return x.RepairParts
	}
	return nil
}

func (x *ProdSeriesResponse) GetSerName() string {
	if x != nil {
		return x.SerName
	}
	return ""
}

func (x *ProdSeriesResponse) GetSerAlias() string {
	if x != nil && x.SerAlias != nil {
		return *x.SerAlias
	}
	return ""
}

func (x *ProdSeriesResponse) GetSerCode() string {
	if x != nil && x.SerCode != nil {
		return *x.SerCode
	}
	return ""
}

func (x *ProdSeriesResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdSeriesResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

func (x *ProdSeriesResponse) GetProdCat() int64 {
	if x != nil {
		return x.ProdCat
	}
	return 0
}

type ProdWorkshopDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProdWorkshopDestroyRequest) Reset() {
	*x = ProdWorkshopDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopDestroyRequest) ProtoMessage() {}

func (x *ProdWorkshopDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopDestroyRequest.ProtoReflect.Descriptor instead.
func (*ProdWorkshopDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{21}
}

func (x *ProdWorkshopDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProdWorkshopListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ProdWorkshopRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ProdWorkshopListRequest) Reset() {
	*x = ProdWorkshopListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopListRequest) ProtoMessage() {}

func (x *ProdWorkshopListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopListRequest.ProtoReflect.Descriptor instead.
func (*ProdWorkshopListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{22}
}

func (x *ProdWorkshopListRequest) GetResults() []*ProdWorkshopRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ProdWorkshopListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ProdWorkshopListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ProdWorkshopResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ProdWorkshopListResponse) Reset() {
	*x = ProdWorkshopListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopListResponse) ProtoMessage() {}

func (x *ProdWorkshopListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopListResponse.ProtoReflect.Descriptor instead.
func (*ProdWorkshopListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{23}
}

func (x *ProdWorkshopListResponse) GetResults() []*ProdWorkshopResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ProdWorkshopListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ProdWorkshopPartListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters   string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Prod      *string `protobuf:"bytes,3,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
	PartName  *string `protobuf:"bytes,4,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid   bool    `protobuf:"varint,5,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage *string `protobuf:"bytes,6,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	Parent    *int64  `protobuf:"varint,7,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	ProdCat   *string `protobuf:"bytes,8,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	SpuName   *string `protobuf:"bytes,9,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
	PrintWay  int32   `protobuf:"varint,10,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ProdWorkshopPartListRequest) Reset() {
	*x = ProdWorkshopPartListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopPartListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopPartListRequest) ProtoMessage() {}

func (x *ProdWorkshopPartListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopPartListRequest.ProtoReflect.Descriptor instead.
func (*ProdWorkshopPartListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{24}
}

func (x *ProdWorkshopPartListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdWorkshopPartListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ProdWorkshopPartListRequest) GetProd() string {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return ""
}

func (x *ProdWorkshopPartListRequest) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ProdWorkshopPartListRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdWorkshopPartListRequest) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ProdWorkshopPartListRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *ProdWorkshopPartListRequest) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *ProdWorkshopPartListRequest) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *ProdWorkshopPartListRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ProdWorkshopPartListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ProdWorkshopPartResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ProdWorkshopPartListResponse) Reset() {
	*x = ProdWorkshopPartListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopPartListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopPartListResponse) ProtoMessage() {}

func (x *ProdWorkshopPartListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopPartListResponse.ProtoReflect.Descriptor instead.
func (*ProdWorkshopPartListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{25}
}

func (x *ProdWorkshopPartListResponse) GetResults() []*ProdWorkshopPartResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ProdWorkshopPartListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ProdWorkshopPartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartName  *string `protobuf:"bytes,3,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid   bool    `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage *string `protobuf:"bytes,5,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	Prod      *string `protobuf:"bytes,6,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
	Parent    *int64  `protobuf:"varint,7,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Filters   string  `protobuf:"bytes,8,opt,name=filters,proto3" json:"filters,omitempty"`
	ProdCat   *string `protobuf:"bytes,9,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	SpuName   *string `protobuf:"bytes,10,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
	PrintWay  int32   `protobuf:"varint,11,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ProdWorkshopPartRequest) Reset() {
	*x = ProdWorkshopPartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopPartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopPartRequest) ProtoMessage() {}

func (x *ProdWorkshopPartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopPartRequest.ProtoReflect.Descriptor instead.
func (*ProdWorkshopPartRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{26}
}

func (x *ProdWorkshopPartRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdWorkshopPartRequest) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ProdWorkshopPartRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdWorkshopPartRequest) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ProdWorkshopPartRequest) GetProd() string {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return ""
}

func (x *ProdWorkshopPartRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *ProdWorkshopPartRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ProdWorkshopPartRequest) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *ProdWorkshopPartRequest) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *ProdWorkshopPartRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ProdWorkshopPartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sku           string                  `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku,omitempty"`
	WorkshopParts []*ProdWorkshopResponse `protobuf:"bytes,3,rep,name=workshop_parts,json=workshopParts,proto3" json:"workshop_parts,omitempty"`
	PartName      *string                 `protobuf:"bytes,4,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid       bool                    `protobuf:"varint,5,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage     *string                 `protobuf:"bytes,6,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	CreateTime    string                  `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string                  `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Prod          *string                 `protobuf:"bytes,9,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
	Parent        *int64                  `protobuf:"varint,10,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	ProdBrand     string                  `protobuf:"bytes,11,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat       *string                 `protobuf:"bytes,12,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	ProdBrief     string                  `protobuf:"bytes,13,opt,name=prod_brief,json=prodBrief,proto3" json:"prod_brief,omitempty"`
	ProdColor     string                  `protobuf:"bytes,14,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdSize      string                  `protobuf:"bytes,15,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdSer       string                  `protobuf:"bytes,16,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdBrandCode string                  `protobuf:"bytes,17,opt,name=prod_brand_code,json=prodBrandCode,proto3" json:"prod_brand_code,omitempty"`
	ProdCatCode   string                  `protobuf:"bytes,18,opt,name=prod_cat_code,json=prodCatCode,proto3" json:"prod_cat_code,omitempty"`
	ProdSerCode   string                  `protobuf:"bytes,19,opt,name=prod_ser_code,json=prodSerCode,proto3" json:"prod_ser_code,omitempty"`
	ProdColorCode string                  `protobuf:"bytes,20,opt,name=prod_color_code,json=prodColorCode,proto3" json:"prod_color_code,omitempty"`
	ProdSizeCode  string                  `protobuf:"bytes,21,opt,name=prod_size_code,json=prodSizeCode,proto3" json:"prod_size_code,omitempty"`
	SpuName       *string                 `protobuf:"bytes,22,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
	PrintWay      int32                   `protobuf:"varint,23,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ProdWorkshopPartResponse) Reset() {
	*x = ProdWorkshopPartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopPartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopPartResponse) ProtoMessage() {}

func (x *ProdWorkshopPartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopPartResponse.ProtoReflect.Descriptor instead.
func (*ProdWorkshopPartResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{27}
}

func (x *ProdWorkshopPartResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdWorkshopPartResponse) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetWorkshopParts() []*ProdWorkshopResponse {
	if x != nil {
		return x.WorkshopParts
	}
	return nil
}

func (x *ProdWorkshopPartResponse) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdWorkshopPartResponse) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProd() string {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *ProdWorkshopPartResponse) GetProdBrand() string {
	if x != nil {
		return x.ProdBrand
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdBrief() string {
	if x != nil {
		return x.ProdBrief
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdSize() string {
	if x != nil {
		return x.ProdSize
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdSer() string {
	if x != nil {
		return x.ProdSer
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdBrandCode() string {
	if x != nil {
		return x.ProdBrandCode
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdCatCode() string {
	if x != nil {
		return x.ProdCatCode
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdSerCode() string {
	if x != nil {
		return x.ProdSerCode
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdColorCode() string {
	if x != nil {
		return x.ProdColorCode
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetProdSizeCode() string {
	if x != nil {
		return x.ProdSizeCode
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *ProdWorkshopPartResponse) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ProdWorkshopPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PartName             *string  `protobuf:"bytes,4,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid              bool     `protobuf:"varint,5,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage            *string  `protobuf:"bytes,6,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	Prod                 *string  `protobuf:"bytes,7,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
	Parent               *int64   `protobuf:"varint,8,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	ProdCat              *string  `protobuf:"bytes,9,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	SpuName              *string  `protobuf:"bytes,10,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
	PrintWay             int32    `protobuf:"varint,11,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ProdWorkshopPartialUpdateRequest) Reset() {
	*x = ProdWorkshopPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopPartialUpdateRequest) ProtoMessage() {}

func (x *ProdWorkshopPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProdWorkshopPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{28}
}

func (x *ProdWorkshopPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdWorkshopPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ProdWorkshopPartialUpdateRequest) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ProdWorkshopPartialUpdateRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdWorkshopPartialUpdateRequest) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ProdWorkshopPartialUpdateRequest) GetProd() string {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return ""
}

func (x *ProdWorkshopPartialUpdateRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *ProdWorkshopPartialUpdateRequest) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *ProdWorkshopPartialUpdateRequest) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *ProdWorkshopPartialUpdateRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ProdWorkshopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartName  *string `protobuf:"bytes,3,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid   bool    `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage *string `protobuf:"bytes,5,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	Prod      *string `protobuf:"bytes,6,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
	Parent    *int64  `protobuf:"varint,7,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	ProdCat   *string `protobuf:"bytes,8,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	SpuName   *string `protobuf:"bytes,9,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
	PrintWay  int32   `protobuf:"varint,10,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ProdWorkshopRequest) Reset() {
	*x = ProdWorkshopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopRequest) ProtoMessage() {}

func (x *ProdWorkshopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopRequest.ProtoReflect.Descriptor instead.
func (*ProdWorkshopRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{29}
}

func (x *ProdWorkshopRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdWorkshopRequest) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ProdWorkshopRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdWorkshopRequest) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ProdWorkshopRequest) GetProd() string {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return ""
}

func (x *ProdWorkshopRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *ProdWorkshopRequest) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *ProdWorkshopRequest) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *ProdWorkshopRequest) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ProdWorkshopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartName      *string `protobuf:"bytes,2,opt,name=part_name,json=partName,proto3,oneof" json:"part_name,omitempty"`
	IsValid       bool    `protobuf:"varint,3,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PartImage     *string `protobuf:"bytes,4,opt,name=part_image,json=partImage,proto3,oneof" json:"part_image,omitempty"`
	CreateTime    string  `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string  `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Prod          *string `protobuf:"bytes,7,opt,name=prod,proto3,oneof" json:"prod,omitempty"`
	Parent        *int64  `protobuf:"varint,8,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Sku           string  `protobuf:"bytes,9,opt,name=sku,proto3" json:"sku,omitempty"`
	ProdCat       *string `protobuf:"bytes,10,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	ProdBrand     string  `protobuf:"bytes,11,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdSer       string  `protobuf:"bytes,12,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdBrief     string  `protobuf:"bytes,13,opt,name=prod_brief,json=prodBrief,proto3" json:"prod_brief,omitempty"`
	ProdColor     string  `protobuf:"bytes,14,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdSize      string  `protobuf:"bytes,15,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdBrandCode string  `protobuf:"bytes,16,opt,name=prod_brand_code,json=prodBrandCode,proto3" json:"prod_brand_code,omitempty"`
	ProdCatCode   string  `protobuf:"bytes,17,opt,name=prod_cat_code,json=prodCatCode,proto3" json:"prod_cat_code,omitempty"`
	ProdSerCode   string  `protobuf:"bytes,18,opt,name=prod_ser_code,json=prodSerCode,proto3" json:"prod_ser_code,omitempty"`
	ProdColorCode string  `protobuf:"bytes,19,opt,name=prod_color_code,json=prodColorCode,proto3" json:"prod_color_code,omitempty"`
	ProdSizeCode  string  `protobuf:"bytes,20,opt,name=prod_size_code,json=prodSizeCode,proto3" json:"prod_size_code,omitempty"`
	SpuName       *string `protobuf:"bytes,21,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
	PrintWay      int32   `protobuf:"varint,22,opt,name=print_way,json=printWay,proto3" json:"print_way,omitempty"`
}

func (x *ProdWorkshopResponse) Reset() {
	*x = ProdWorkshopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopResponse) ProtoMessage() {}

func (x *ProdWorkshopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopResponse.ProtoReflect.Descriptor instead.
func (*ProdWorkshopResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{30}
}

func (x *ProdWorkshopResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProdWorkshopResponse) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *ProdWorkshopResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProdWorkshopResponse) GetPartImage() string {
	if x != nil && x.PartImage != nil {
		return *x.PartImage
	}
	return ""
}

func (x *ProdWorkshopResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProdWorkshopResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProd() string {
	if x != nil && x.Prod != nil {
		return *x.Prod
	}
	return ""
}

func (x *ProdWorkshopResponse) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *ProdWorkshopResponse) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdBrand() string {
	if x != nil {
		return x.ProdBrand
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdSer() string {
	if x != nil {
		return x.ProdSer
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdBrief() string {
	if x != nil {
		return x.ProdBrief
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdSize() string {
	if x != nil {
		return x.ProdSize
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdBrandCode() string {
	if x != nil {
		return x.ProdBrandCode
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdCatCode() string {
	if x != nil {
		return x.ProdCatCode
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdSerCode() string {
	if x != nil {
		return x.ProdSerCode
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdColorCode() string {
	if x != nil {
		return x.ProdColorCode
	}
	return ""
}

func (x *ProdWorkshopResponse) GetProdSizeCode() string {
	if x != nil {
		return x.ProdSizeCode
	}
	return ""
}

func (x *ProdWorkshopResponse) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *ProdWorkshopResponse) GetPrintWay() int32 {
	if x != nil {
		return x.PrintWay
	}
	return 0
}

type ProdWorkshopRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProdWorkshopRetrieveRequest) Reset() {
	*x = ProdWorkshopRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdWorkshopRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdWorkshopRetrieveRequest) ProtoMessage() {}

func (x *ProdWorkshopRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdWorkshopRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ProdWorkshopRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{31}
}

func (x *ProdWorkshopRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProductListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ProductResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ProductListResponse) Reset() {
	*x = ProductListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListResponse) ProtoMessage() {}

func (x *ProductListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListResponse.ProtoReflect.Descriptor instead.
func (*ProductListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{32}
}

func (x *ProductListResponse) GetResults() []*ProductResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ProductListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ProductModelDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProdCode string `protobuf:"bytes,1,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
}

func (x *ProductModelDestroyRequest) Reset() {
	*x = ProductModelDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductModelDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductModelDestroyRequest) ProtoMessage() {}

func (x *ProductModelDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductModelDestroyRequest.ProtoReflect.Descriptor instead.
func (*ProductModelDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{33}
}

func (x *ProductModelDestroyRequest) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

type ProductModelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProdBrand       string   `protobuf:"bytes,1,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat         string   `protobuf:"bytes,2,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSer         string   `protobuf:"bytes,3,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdSize        string   `protobuf:"bytes,4,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdTexture     string   `protobuf:"bytes,5,opt,name=prod_texture,json=prodTexture,proto3" json:"prod_texture,omitempty"`
	ProdLining      string   `protobuf:"bytes,6,opt,name=prod_lining,json=prodLining,proto3" json:"prod_lining,omitempty"`
	ProdVersion     string   `protobuf:"bytes,7,opt,name=prod_version,json=prodVersion,proto3" json:"prod_version,omitempty"`
	ProdModel       string   `protobuf:"bytes,8,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor       string   `protobuf:"bytes,9,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode        string   `protobuf:"bytes,10,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode     string   `protobuf:"bytes,11,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode      *string  `protobuf:"bytes,12,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost        *float32 `protobuf:"fixed32,13,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice       *float32 `protobuf:"fixed32,14,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdLength      *float32 `protobuf:"fixed32,15,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth       *float32 `protobuf:"fixed32,16,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight      *float32 `protobuf:"fixed32,17,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight *float32 `protobuf:"fixed32,18,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle   *string  `protobuf:"bytes,19,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription *string  `protobuf:"bytes,20,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief       *string  `protobuf:"bytes,21,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	Renew           *int32   `protobuf:"varint,22,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair          *int32   `protobuf:"varint,23,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	Filters         string   `protobuf:"bytes,24,opt,name=filters,proto3" json:"filters,omitempty"`
	ProdImage       *string  `protobuf:"bytes,25,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	Bindable        bool     `protobuf:"varint,26,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable    bool     `protobuf:"varint,27,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *ProductModelListRequest) Reset() {
	*x = ProductModelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductModelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductModelListRequest) ProtoMessage() {}

func (x *ProductModelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductModelListRequest.ProtoReflect.Descriptor instead.
func (*ProductModelListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{34}
}

func (x *ProductModelListRequest) GetProdBrand() string {
	if x != nil {
		return x.ProdBrand
	}
	return ""
}

func (x *ProductModelListRequest) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ProductModelListRequest) GetProdSer() string {
	if x != nil {
		return x.ProdSer
	}
	return ""
}

func (x *ProductModelListRequest) GetProdSize() string {
	if x != nil {
		return x.ProdSize
	}
	return ""
}

func (x *ProductModelListRequest) GetProdTexture() string {
	if x != nil {
		return x.ProdTexture
	}
	return ""
}

func (x *ProductModelListRequest) GetProdLining() string {
	if x != nil {
		return x.ProdLining
	}
	return ""
}

func (x *ProductModelListRequest) GetProdVersion() string {
	if x != nil {
		return x.ProdVersion
	}
	return ""
}

func (x *ProductModelListRequest) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *ProductModelListRequest) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProductModelListRequest) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ProductModelListRequest) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *ProductModelListRequest) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *ProductModelListRequest) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *ProductModelListRequest) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *ProductModelListRequest) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *ProductModelListRequest) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *ProductModelListRequest) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *ProductModelListRequest) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *ProductModelListRequest) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *ProductModelListRequest) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *ProductModelListRequest) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *ProductModelListRequest) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *ProductModelListRequest) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *ProductModelListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ProductModelListRequest) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *ProductModelListRequest) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ProductModelListRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type ProductModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ProductModelResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ProductModelListResponse) Reset() {
	*x = ProductModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductModelListResponse) ProtoMessage() {}

func (x *ProductModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductModelListResponse.ProtoReflect.Descriptor instead.
func (*ProductModelListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{35}
}

func (x *ProductModelListResponse) GetResults() []*ProductModelResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ProductModelListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ProductModelPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProdBrand            string   `protobuf:"bytes,1,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat              string   `protobuf:"bytes,2,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSer              string   `protobuf:"bytes,3,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdSize             string   `protobuf:"bytes,4,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdTexture          string   `protobuf:"bytes,5,opt,name=prod_texture,json=prodTexture,proto3" json:"prod_texture,omitempty"`
	ProdLining           string   `protobuf:"bytes,6,opt,name=prod_lining,json=prodLining,proto3" json:"prod_lining,omitempty"`
	ProdVersion          string   `protobuf:"bytes,7,opt,name=prod_version,json=prodVersion,proto3" json:"prod_version,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,8,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ProdModel            string   `protobuf:"bytes,9,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor            string   `protobuf:"bytes,10,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode             string   `protobuf:"bytes,11,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode          string   `protobuf:"bytes,12,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode           *string  `protobuf:"bytes,13,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost             *float32 `protobuf:"fixed32,14,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice            *float32 `protobuf:"fixed32,15,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdLength           *float32 `protobuf:"fixed32,16,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth            *float32 `protobuf:"fixed32,17,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight           *float32 `protobuf:"fixed32,18,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight      *float32 `protobuf:"fixed32,19,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle        *string  `protobuf:"bytes,20,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription      *string  `protobuf:"bytes,21,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief            *string  `protobuf:"bytes,22,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	Renew                *int32   `protobuf:"varint,23,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair               *int32   `protobuf:"varint,24,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	Filters              string   `protobuf:"bytes,25,opt,name=filters,proto3" json:"filters,omitempty"`
	ProdImage            *string  `protobuf:"bytes,26,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	Bindable             bool     `protobuf:"varint,27,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable         bool     `protobuf:"varint,28,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *ProductModelPartialUpdateRequest) Reset() {
	*x = ProductModelPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductModelPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductModelPartialUpdateRequest) ProtoMessage() {}

func (x *ProductModelPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductModelPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProductModelPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{36}
}

func (x *ProductModelPartialUpdateRequest) GetProdBrand() string {
	if x != nil {
		return x.ProdBrand
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdSer() string {
	if x != nil {
		return x.ProdSer
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdSize() string {
	if x != nil {
		return x.ProdSize
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdTexture() string {
	if x != nil {
		return x.ProdTexture
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdLining() string {
	if x != nil {
		return x.ProdLining
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdVersion() string {
	if x != nil {
		return x.ProdVersion
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ProductModelPartialUpdateRequest) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *ProductModelPartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *ProductModelPartialUpdateRequest) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ProductModelPartialUpdateRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type ProductModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProdBrand       string   `protobuf:"bytes,1,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat         string   `protobuf:"bytes,2,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSer         string   `protobuf:"bytes,3,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdSize        string   `protobuf:"bytes,4,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdTexture     string   `protobuf:"bytes,5,opt,name=prod_texture,json=prodTexture,proto3" json:"prod_texture,omitempty"`
	ProdLining      string   `protobuf:"bytes,6,opt,name=prod_lining,json=prodLining,proto3" json:"prod_lining,omitempty"`
	ProdVersion     string   `protobuf:"bytes,7,opt,name=prod_version,json=prodVersion,proto3" json:"prod_version,omitempty"`
	ProdModel       string   `protobuf:"bytes,8,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor       string   `protobuf:"bytes,9,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode        string   `protobuf:"bytes,10,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode     string   `protobuf:"bytes,11,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode      *string  `protobuf:"bytes,12,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost        *float32 `protobuf:"fixed32,13,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice       *float32 `protobuf:"fixed32,14,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdLength      *float32 `protobuf:"fixed32,15,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth       *float32 `protobuf:"fixed32,16,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight      *float32 `protobuf:"fixed32,17,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight *float32 `protobuf:"fixed32,18,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle   *string  `protobuf:"bytes,19,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription *string  `protobuf:"bytes,20,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief       *string  `protobuf:"bytes,21,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	Renew           *int32   `protobuf:"varint,22,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair          *int32   `protobuf:"varint,23,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	Filters         string   `protobuf:"bytes,24,opt,name=filters,proto3" json:"filters,omitempty"`
	ProdImage       *string  `protobuf:"bytes,25,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	Bindable        bool     `protobuf:"varint,26,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable    bool     `protobuf:"varint,27,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *ProductModelRequest) Reset() {
	*x = ProductModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductModelRequest) ProtoMessage() {}

func (x *ProductModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductModelRequest.ProtoReflect.Descriptor instead.
func (*ProductModelRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{37}
}

func (x *ProductModelRequest) GetProdBrand() string {
	if x != nil {
		return x.ProdBrand
	}
	return ""
}

func (x *ProductModelRequest) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ProductModelRequest) GetProdSer() string {
	if x != nil {
		return x.ProdSer
	}
	return ""
}

func (x *ProductModelRequest) GetProdSize() string {
	if x != nil {
		return x.ProdSize
	}
	return ""
}

func (x *ProductModelRequest) GetProdTexture() string {
	if x != nil {
		return x.ProdTexture
	}
	return ""
}

func (x *ProductModelRequest) GetProdLining() string {
	if x != nil {
		return x.ProdLining
	}
	return ""
}

func (x *ProductModelRequest) GetProdVersion() string {
	if x != nil {
		return x.ProdVersion
	}
	return ""
}

func (x *ProductModelRequest) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *ProductModelRequest) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProductModelRequest) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ProductModelRequest) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *ProductModelRequest) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *ProductModelRequest) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *ProductModelRequest) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *ProductModelRequest) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *ProductModelRequest) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *ProductModelRequest) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *ProductModelRequest) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *ProductModelRequest) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *ProductModelRequest) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *ProductModelRequest) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *ProductModelRequest) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *ProductModelRequest) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *ProductModelRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ProductModelRequest) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *ProductModelRequest) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ProductModelRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type ProductModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spu             string   `protobuf:"bytes,1,opt,name=spu,proto3" json:"spu,omitempty"`
	ProdBrand       string   `protobuf:"bytes,2,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat         string   `protobuf:"bytes,3,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSer         string   `protobuf:"bytes,4,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdSize        string   `protobuf:"bytes,5,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdTexture     string   `protobuf:"bytes,6,opt,name=prod_texture,json=prodTexture,proto3" json:"prod_texture,omitempty"`
	ProdLining      string   `protobuf:"bytes,7,opt,name=prod_lining,json=prodLining,proto3" json:"prod_lining,omitempty"`
	ProdVersion     string   `protobuf:"bytes,8,opt,name=prod_version,json=prodVersion,proto3" json:"prod_version,omitempty"`
	CreateTime      string   `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string   `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ProdModel       string   `protobuf:"bytes,11,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor       string   `protobuf:"bytes,12,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode        string   `protobuf:"bytes,13,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode     string   `protobuf:"bytes,14,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode      *string  `protobuf:"bytes,15,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost        *float32 `protobuf:"fixed32,16,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice       *float32 `protobuf:"fixed32,17,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdLength      *float32 `protobuf:"fixed32,18,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth       *float32 `protobuf:"fixed32,19,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight      *float32 `protobuf:"fixed32,20,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight *float32 `protobuf:"fixed32,21,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle   *string  `protobuf:"bytes,22,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription *string  `protobuf:"bytes,23,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief       *string  `protobuf:"bytes,24,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	Renew           *int32   `protobuf:"varint,25,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair          *int32   `protobuf:"varint,26,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	ProdImage       *string  `protobuf:"bytes,27,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	Bindable        bool     `protobuf:"varint,28,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable    bool     `protobuf:"varint,29,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *ProductModelResponse) Reset() {
	*x = ProductModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductModelResponse) ProtoMessage() {}

func (x *ProductModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductModelResponse.ProtoReflect.Descriptor instead.
func (*ProductModelResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{38}
}

func (x *ProductModelResponse) GetSpu() string {
	if x != nil {
		return x.Spu
	}
	return ""
}

func (x *ProductModelResponse) GetProdBrand() string {
	if x != nil {
		return x.ProdBrand
	}
	return ""
}

func (x *ProductModelResponse) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *ProductModelResponse) GetProdSer() string {
	if x != nil {
		return x.ProdSer
	}
	return ""
}

func (x *ProductModelResponse) GetProdSize() string {
	if x != nil {
		return x.ProdSize
	}
	return ""
}

func (x *ProductModelResponse) GetProdTexture() string {
	if x != nil {
		return x.ProdTexture
	}
	return ""
}

func (x *ProductModelResponse) GetProdLining() string {
	if x != nil {
		return x.ProdLining
	}
	return ""
}

func (x *ProductModelResponse) GetProdVersion() string {
	if x != nil {
		return x.ProdVersion
	}
	return ""
}

func (x *ProductModelResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductModelResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProductModelResponse) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *ProductModelResponse) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProductModelResponse) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ProductModelResponse) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *ProductModelResponse) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *ProductModelResponse) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *ProductModelResponse) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *ProductModelResponse) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *ProductModelResponse) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *ProductModelResponse) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *ProductModelResponse) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *ProductModelResponse) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *ProductModelResponse) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *ProductModelResponse) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *ProductModelResponse) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *ProductModelResponse) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *ProductModelResponse) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *ProductModelResponse) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ProductModelResponse) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type ProductModelRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProdCode string `protobuf:"bytes,1,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
}

func (x *ProductModelRetrieveRequest) Reset() {
	*x = ProductModelRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductModelRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductModelRetrieveRequest) ProtoMessage() {}

func (x *ProductModelRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductModelRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ProductModelRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{39}
}

func (x *ProductModelRetrieveRequest) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         *string  `protobuf:"bytes,2,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
	ProdModel       string   `protobuf:"bytes,3,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor       string   `protobuf:"bytes,4,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode        string   `protobuf:"bytes,5,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode     string   `protobuf:"bytes,6,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode      *string  `protobuf:"bytes,7,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost        *float32 `protobuf:"fixed32,8,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice       *float32 `protobuf:"fixed32,9,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdLength      *float32 `protobuf:"fixed32,10,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth       *float32 `protobuf:"fixed32,11,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight      *float32 `protobuf:"fixed32,12,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight *float32 `protobuf:"fixed32,13,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle   *string  `protobuf:"bytes,14,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription *string  `protobuf:"bytes,15,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief       *string  `protobuf:"bytes,16,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	IsValid         bool     `protobuf:"varint,17,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Renew           *int32   `protobuf:"varint,18,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair          *int32   `protobuf:"varint,19,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	ProdBrand       int64    `protobuf:"varint,20,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat         int64    `protobuf:"varint,21,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSize        int64    `protobuf:"varint,22,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdTexture     int64    `protobuf:"varint,23,opt,name=prod_texture,json=prodTexture,proto3" json:"prod_texture,omitempty"`
	ProdLining      int64    `protobuf:"varint,24,opt,name=prod_lining,json=prodLining,proto3" json:"prod_lining,omitempty"`
	ProdImage       *string  `protobuf:"bytes,25,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	Bindable        bool     `protobuf:"varint,26,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable    bool     `protobuf:"varint,27,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{40}
}

func (x *ProductRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductRequest) GetFilters() string {
	if x != nil && x.Filters != nil {
		return *x.Filters
	}
	return ""
}

func (x *ProductRequest) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *ProductRequest) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProductRequest) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ProductRequest) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *ProductRequest) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *ProductRequest) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *ProductRequest) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *ProductRequest) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *ProductRequest) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *ProductRequest) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *ProductRequest) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *ProductRequest) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *ProductRequest) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *ProductRequest) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *ProductRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProductRequest) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *ProductRequest) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *ProductRequest) GetProdBrand() int64 {
	if x != nil {
		return x.ProdBrand
	}
	return 0
}

func (x *ProductRequest) GetProdCat() int64 {
	if x != nil {
		return x.ProdCat
	}
	return 0
}

func (x *ProductRequest) GetProdSize() int64 {
	if x != nil {
		return x.ProdSize
	}
	return 0
}

func (x *ProductRequest) GetProdTexture() int64 {
	if x != nil {
		return x.ProdTexture
	}
	return 0
}

func (x *ProductRequest) GetProdLining() int64 {
	if x != nil {
		return x.ProdLining
	}
	return 0
}

func (x *ProductRequest) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *ProductRequest) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ProductRequest) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdModel       string              `protobuf:"bytes,2,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor       string              `protobuf:"bytes,3,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode        string              `protobuf:"bytes,4,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode     string              `protobuf:"bytes,5,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode      *string             `protobuf:"bytes,6,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost        *float32            `protobuf:"fixed32,7,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice       *float32            `protobuf:"fixed32,8,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdLength      *float32            `protobuf:"fixed32,9,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth       *float32            `protobuf:"fixed32,10,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight      *float32            `protobuf:"fixed32,11,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight *float32            `protobuf:"fixed32,12,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle   *string             `protobuf:"bytes,13,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription *string             `protobuf:"bytes,14,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief       *string             `protobuf:"bytes,15,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	IsValid         bool                `protobuf:"varint,16,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Renew           *int32              `protobuf:"varint,17,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair          *int32              `protobuf:"varint,18,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	CreateTime      string              `protobuf:"bytes,19,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string              `protobuf:"bytes,20,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ProdBrand       int64               `protobuf:"varint,21,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat         int64               `protobuf:"varint,22,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSer         *ProdSeriesResponse `protobuf:"bytes,23,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdSize        int64               `protobuf:"varint,24,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdTexture     int64               `protobuf:"varint,25,opt,name=prod_texture,json=prodTexture,proto3" json:"prod_texture,omitempty"`
	ProdLining      int64               `protobuf:"varint,26,opt,name=prod_lining,json=prodLining,proto3" json:"prod_lining,omitempty"`
	ProdVersion     string              `protobuf:"bytes,27,opt,name=prod_version,json=prodVersion,proto3" json:"prod_version,omitempty"`
	ProdVerCode     string              `protobuf:"bytes,28,opt,name=prod_ver_code,json=prodVerCode,proto3" json:"prod_ver_code,omitempty"`
	ProdImage       *string             `protobuf:"bytes,29,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	Bindable        bool                `protobuf:"varint,30,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable    bool                `protobuf:"varint,31,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{41}
}

func (x *ProductResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductResponse) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *ProductResponse) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *ProductResponse) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *ProductResponse) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *ProductResponse) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *ProductResponse) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *ProductResponse) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *ProductResponse) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *ProductResponse) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *ProductResponse) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *ProductResponse) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *ProductResponse) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *ProductResponse) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *ProductResponse) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *ProductResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ProductResponse) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *ProductResponse) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *ProductResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProductResponse) GetProdBrand() int64 {
	if x != nil {
		return x.ProdBrand
	}
	return 0
}

func (x *ProductResponse) GetProdCat() int64 {
	if x != nil {
		return x.ProdCat
	}
	return 0
}

func (x *ProductResponse) GetProdSer() *ProdSeriesResponse {
	if x != nil {
		return x.ProdSer
	}
	return nil
}

func (x *ProductResponse) GetProdSize() int64 {
	if x != nil {
		return x.ProdSize
	}
	return 0
}

func (x *ProductResponse) GetProdTexture() int64 {
	if x != nil {
		return x.ProdTexture
	}
	return 0
}

func (x *ProductResponse) GetProdLining() int64 {
	if x != nil {
		return x.ProdLining
	}
	return 0
}

func (x *ProductResponse) GetProdVersion() string {
	if x != nil {
		return x.ProdVersion
	}
	return ""
}

func (x *ProductResponse) GetProdVerCode() string {
	if x != nil {
		return x.ProdVerCode
	}
	return ""
}

func (x *ProductResponse) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *ProductResponse) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *ProductResponse) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type RawSkuSparePartsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RawSkuSparePartsResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RawSkuSparePartsListResponse) Reset() {
	*x = RawSkuSparePartsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawSkuSparePartsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawSkuSparePartsListResponse) ProtoMessage() {}

func (x *RawSkuSparePartsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawSkuSparePartsListResponse.ProtoReflect.Descriptor instead.
func (*RawSkuSparePartsListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{42}
}

func (x *RawSkuSparePartsListResponse) GetResults() []*RawSkuSparePartsResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RawSkuSparePartsListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RawSkuSparePartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsNo string `protobuf:"bytes,1,opt,name=goods_no,json=goodsNo,proto3" json:"goods_no,omitempty"`
	Filters string `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *RawSkuSparePartsRequest) Reset() {
	*x = RawSkuSparePartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawSkuSparePartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawSkuSparePartsRequest) ProtoMessage() {}

func (x *RawSkuSparePartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawSkuSparePartsRequest.ProtoReflect.Descriptor instead.
func (*RawSkuSparePartsRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{43}
}

func (x *RawSkuSparePartsRequest) GetGoodsNo() string {
	if x != nil {
		return x.GoodsNo
	}
	return ""
}

func (x *RawSkuSparePartsRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type RawSkuSparePartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spu             string   `protobuf:"bytes,1,opt,name=spu,proto3" json:"spu,omitempty"`
	ProdBrand       string   `protobuf:"bytes,2,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	ProdCat         string   `protobuf:"bytes,3,opt,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSer         string   `protobuf:"bytes,4,opt,name=prod_ser,json=prodSer,proto3" json:"prod_ser,omitempty"`
	ProdSize        string   `protobuf:"bytes,5,opt,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdTexture     string   `protobuf:"bytes,6,opt,name=prod_texture,json=prodTexture,proto3" json:"prod_texture,omitempty"`
	ProdLining      string   `protobuf:"bytes,7,opt,name=prod_lining,json=prodLining,proto3" json:"prod_lining,omitempty"`
	ProdVersion     string   `protobuf:"bytes,8,opt,name=prod_version,json=prodVersion,proto3" json:"prod_version,omitempty"`
	CreateTime      string   `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string   `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ProdModel       string   `protobuf:"bytes,11,opt,name=prod_model,json=prodModel,proto3" json:"prod_model,omitempty"`
	ProdColor       string   `protobuf:"bytes,12,opt,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
	ProdCode        string   `protobuf:"bytes,13,opt,name=prod_code,json=prodCode,proto3" json:"prod_code,omitempty"`
	ProdBarcode     string   `protobuf:"bytes,14,opt,name=prod_barcode,json=prodBarcode,proto3" json:"prod_barcode,omitempty"`
	ProdHsCode      *string  `protobuf:"bytes,15,opt,name=prod_hs_code,json=prodHsCode,proto3,oneof" json:"prod_hs_code,omitempty"`
	ProdCost        *float32 `protobuf:"fixed32,16,opt,name=prod_cost,json=prodCost,proto3,oneof" json:"prod_cost,omitempty"`
	ProdPrice       *float32 `protobuf:"fixed32,17,opt,name=prod_price,json=prodPrice,proto3,oneof" json:"prod_price,omitempty"`
	ProdLength      *float32 `protobuf:"fixed32,18,opt,name=prod_length,json=prodLength,proto3,oneof" json:"prod_length,omitempty"`
	ProdWidth       *float32 `protobuf:"fixed32,19,opt,name=prod_width,json=prodWidth,proto3,oneof" json:"prod_width,omitempty"`
	ProdHeight      *float32 `protobuf:"fixed32,20,opt,name=prod_height,json=prodHeight,proto3,oneof" json:"prod_height,omitempty"`
	ProdGrossWeight *float32 `protobuf:"fixed32,21,opt,name=prod_gross_weight,json=prodGrossWeight,proto3,oneof" json:"prod_gross_weight,omitempty"`
	ProdCodeStyle   *string  `protobuf:"bytes,22,opt,name=prod_code_style,json=prodCodeStyle,proto3,oneof" json:"prod_code_style,omitempty"`
	ProdDescription *string  `protobuf:"bytes,23,opt,name=prod_description,json=prodDescription,proto3,oneof" json:"prod_description,omitempty"`
	ProdBrief       *string  `protobuf:"bytes,24,opt,name=prod_brief,json=prodBrief,proto3,oneof" json:"prod_brief,omitempty"`
	Renew           *int32   `protobuf:"varint,25,opt,name=renew,proto3,oneof" json:"renew,omitempty"`
	Repair          *int32   `protobuf:"varint,26,opt,name=repair,proto3,oneof" json:"repair,omitempty"`
	ProdImage       *string  `protobuf:"bytes,27,opt,name=prod_image,json=prodImage,proto3,oneof" json:"prod_image,omitempty"`
	Bindable        bool     `protobuf:"varint,28,opt,name=bindable,proto3" json:"bindable,omitempty"`
	Customizable    bool     `protobuf:"varint,29,opt,name=customizable,proto3" json:"customizable,omitempty"`
}

func (x *RawSkuSparePartsResponse) Reset() {
	*x = RawSkuSparePartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawSkuSparePartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawSkuSparePartsResponse) ProtoMessage() {}

func (x *RawSkuSparePartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawSkuSparePartsResponse.ProtoReflect.Descriptor instead.
func (*RawSkuSparePartsResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{44}
}

func (x *RawSkuSparePartsResponse) GetSpu() string {
	if x != nil {
		return x.Spu
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdBrand() string {
	if x != nil {
		return x.ProdBrand
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdCat() string {
	if x != nil {
		return x.ProdCat
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdSer() string {
	if x != nil {
		return x.ProdSer
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdSize() string {
	if x != nil {
		return x.ProdSize
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdTexture() string {
	if x != nil {
		return x.ProdTexture
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdLining() string {
	if x != nil {
		return x.ProdLining
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdVersion() string {
	if x != nil {
		return x.ProdVersion
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdModel() string {
	if x != nil {
		return x.ProdModel
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdColor() string {
	if x != nil {
		return x.ProdColor
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdCode() string {
	if x != nil {
		return x.ProdCode
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdBarcode() string {
	if x != nil {
		return x.ProdBarcode
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdHsCode() string {
	if x != nil && x.ProdHsCode != nil {
		return *x.ProdHsCode
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdCost() float32 {
	if x != nil && x.ProdCost != nil {
		return *x.ProdCost
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetProdPrice() float32 {
	if x != nil && x.ProdPrice != nil {
		return *x.ProdPrice
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetProdLength() float32 {
	if x != nil && x.ProdLength != nil {
		return *x.ProdLength
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetProdWidth() float32 {
	if x != nil && x.ProdWidth != nil {
		return *x.ProdWidth
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetProdHeight() float32 {
	if x != nil && x.ProdHeight != nil {
		return *x.ProdHeight
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetProdGrossWeight() float32 {
	if x != nil && x.ProdGrossWeight != nil {
		return *x.ProdGrossWeight
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetProdCodeStyle() string {
	if x != nil && x.ProdCodeStyle != nil {
		return *x.ProdCodeStyle
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdDescription() string {
	if x != nil && x.ProdDescription != nil {
		return *x.ProdDescription
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetProdBrief() string {
	if x != nil && x.ProdBrief != nil {
		return *x.ProdBrief
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetRenew() int32 {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetRepair() int32 {
	if x != nil && x.Repair != nil {
		return *x.Repair
	}
	return 0
}

func (x *RawSkuSparePartsResponse) GetProdImage() string {
	if x != nil && x.ProdImage != nil {
		return *x.ProdImage
	}
	return ""
}

func (x *RawSkuSparePartsResponse) GetBindable() bool {
	if x != nil {
		return x.Bindable
	}
	return false
}

func (x *RawSkuSparePartsResponse) GetCustomizable() bool {
	if x != nil {
		return x.Customizable
	}
	return false
}

type RelProdRepairsBulkCreateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RelProdRepairsBulkCreateRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RelProdRepairsBulkCreateListRequest) Reset() {
	*x = RelProdRepairsBulkCreateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsBulkCreateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsBulkCreateListRequest) ProtoMessage() {}

func (x *RelProdRepairsBulkCreateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsBulkCreateListRequest.ProtoReflect.Descriptor instead.
func (*RelProdRepairsBulkCreateListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{45}
}

func (x *RelProdRepairsBulkCreateListRequest) GetResults() []*RelProdRepairsBulkCreateRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RelProdRepairsBulkCreateListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RelProdRepairsBulkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdPartsId int32   `protobuf:"varint,2,opt,name=prod_parts_id,json=prodPartsId,proto3" json:"prod_parts_id,omitempty"`
	ProdId      int32   `protobuf:"varint,3,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
	PartsNum    *int32  `protobuf:"varint,4,opt,name=parts_num,json=partsNum,proto3,oneof" json:"parts_num,omitempty"`
	Remarks     *string `protobuf:"bytes,5,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
}

func (x *RelProdRepairsBulkCreateRequest) Reset() {
	*x = RelProdRepairsBulkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsBulkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsBulkCreateRequest) ProtoMessage() {}

func (x *RelProdRepairsBulkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsBulkCreateRequest.ProtoReflect.Descriptor instead.
func (*RelProdRepairsBulkCreateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{46}
}

func (x *RelProdRepairsBulkCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelProdRepairsBulkCreateRequest) GetProdPartsId() int32 {
	if x != nil {
		return x.ProdPartsId
	}
	return 0
}

func (x *RelProdRepairsBulkCreateRequest) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

func (x *RelProdRepairsBulkCreateRequest) GetPartsNum() int32 {
	if x != nil && x.PartsNum != nil {
		return *x.PartsNum
	}
	return 0
}

func (x *RelProdRepairsBulkCreateRequest) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

type RelProdRepairsBulkCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelProdRepairsBulkCreateResponse) Reset() {
	*x = RelProdRepairsBulkCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsBulkCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsBulkCreateResponse) ProtoMessage() {}

func (x *RelProdRepairsBulkCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsBulkCreateResponse.ProtoReflect.Descriptor instead.
func (*RelProdRepairsBulkCreateResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{47}
}

type RelProdRepairsDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelProdRepairsDestroyRequest) Reset() {
	*x = RelProdRepairsDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsDestroyRequest) ProtoMessage() {}

func (x *RelProdRepairsDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsDestroyRequest.ProtoReflect.Descriptor instead.
func (*RelProdRepairsDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{48}
}

func (x *RelProdRepairsDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RelProdRepairsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdPartsId int32   `protobuf:"varint,2,opt,name=prod_parts_id,json=prodPartsId,proto3" json:"prod_parts_id,omitempty"`
	ProdId      int32   `protobuf:"varint,3,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
	PartsNum    *int32  `protobuf:"varint,4,opt,name=parts_num,json=partsNum,proto3,oneof" json:"parts_num,omitempty"`
	Remarks     *string `protobuf:"bytes,5,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
}

func (x *RelProdRepairsListRequest) Reset() {
	*x = RelProdRepairsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsListRequest) ProtoMessage() {}

func (x *RelProdRepairsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsListRequest.ProtoReflect.Descriptor instead.
func (*RelProdRepairsListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{49}
}

func (x *RelProdRepairsListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelProdRepairsListRequest) GetProdPartsId() int32 {
	if x != nil {
		return x.ProdPartsId
	}
	return 0
}

func (x *RelProdRepairsListRequest) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

func (x *RelProdRepairsListRequest) GetPartsNum() int32 {
	if x != nil && x.PartsNum != nil {
		return *x.PartsNum
	}
	return 0
}

func (x *RelProdRepairsListRequest) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

type RelProdRepairsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RelProdRepairsResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RelProdRepairsListResponse) Reset() {
	*x = RelProdRepairsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsListResponse) ProtoMessage() {}

func (x *RelProdRepairsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsListResponse.ProtoReflect.Descriptor instead.
func (*RelProdRepairsListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{50}
}

func (x *RelProdRepairsListResponse) GetResults() []*RelProdRepairsResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RelProdRepairsListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RelProdRepairsPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PartsNum             *int32   `protobuf:"varint,3,opt,name=parts_num,json=partsNum,proto3,oneof" json:"parts_num,omitempty"`
	Remarks              *string  `protobuf:"bytes,4,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	ProdPartsId          int32    `protobuf:"varint,5,opt,name=prod_parts_id,json=prodPartsId,proto3" json:"prod_parts_id,omitempty"`
	ProdId               int32    `protobuf:"varint,6,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
}

func (x *RelProdRepairsPartialUpdateRequest) Reset() {
	*x = RelProdRepairsPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsPartialUpdateRequest) ProtoMessage() {}

func (x *RelProdRepairsPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*RelProdRepairsPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{51}
}

func (x *RelProdRepairsPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelProdRepairsPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RelProdRepairsPartialUpdateRequest) GetPartsNum() int32 {
	if x != nil && x.PartsNum != nil {
		return *x.PartsNum
	}
	return 0
}

func (x *RelProdRepairsPartialUpdateRequest) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *RelProdRepairsPartialUpdateRequest) GetProdPartsId() int32 {
	if x != nil {
		return x.ProdPartsId
	}
	return 0
}

func (x *RelProdRepairsPartialUpdateRequest) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

type RelProdRepairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartsNum    *int32  `protobuf:"varint,2,opt,name=parts_num,json=partsNum,proto3,oneof" json:"parts_num,omitempty"`
	Remarks     *string `protobuf:"bytes,3,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	ProdPartsId int32   `protobuf:"varint,4,opt,name=prod_parts_id,json=prodPartsId,proto3" json:"prod_parts_id,omitempty"`
	ProdId      int32   `protobuf:"varint,5,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
}

func (x *RelProdRepairsRequest) Reset() {
	*x = RelProdRepairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsRequest) ProtoMessage() {}

func (x *RelProdRepairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsRequest.ProtoReflect.Descriptor instead.
func (*RelProdRepairsRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{52}
}

func (x *RelProdRepairsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelProdRepairsRequest) GetPartsNum() int32 {
	if x != nil && x.PartsNum != nil {
		return *x.PartsNum
	}
	return 0
}

func (x *RelProdRepairsRequest) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *RelProdRepairsRequest) GetProdPartsId() int32 {
	if x != nil {
		return x.ProdPartsId
	}
	return 0
}

func (x *RelProdRepairsRequest) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

type RelProdRepairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartsNum   *int32           `protobuf:"varint,2,opt,name=parts_num,json=partsNum,proto3,oneof" json:"parts_num,omitempty"`
	Remarks    *string          `protobuf:"bytes,3,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	ProdParts  *ProductResponse `protobuf:"bytes,6,opt,name=prod_parts,json=prodParts,proto3" json:"prod_parts,omitempty"`
	Prod       *ProductResponse `protobuf:"bytes,7,opt,name=prod,proto3" json:"prod,omitempty"`
	CreateTime *string          `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime *string          `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
}

func (x *RelProdRepairsResponse) Reset() {
	*x = RelProdRepairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsResponse) ProtoMessage() {}

func (x *RelProdRepairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsResponse.ProtoReflect.Descriptor instead.
func (*RelProdRepairsResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{53}
}

func (x *RelProdRepairsResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelProdRepairsResponse) GetPartsNum() int32 {
	if x != nil && x.PartsNum != nil {
		return *x.PartsNum
	}
	return 0
}

func (x *RelProdRepairsResponse) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *RelProdRepairsResponse) GetProdParts() *ProductResponse {
	if x != nil {
		return x.ProdParts
	}
	return nil
}

func (x *RelProdRepairsResponse) GetProd() *ProductResponse {
	if x != nil {
		return x.Prod
	}
	return nil
}

func (x *RelProdRepairsResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RelProdRepairsResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type RelProdRepairsRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelProdRepairsRetrieveRequest) Reset() {
	*x = RelProdRepairsRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProdRepairsRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProdRepairsRetrieveRequest) ProtoMessage() {}

func (x *RelProdRepairsRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProdRepairsRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RelProdRepairsRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{54}
}

func (x *RelProdRepairsRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RepairPartsBulkUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	IsValid string  `protobuf:"bytes,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *RepairPartsBulkUpdateRequest) Reset() {
	*x = RepairPartsBulkUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsBulkUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsBulkUpdateRequest) ProtoMessage() {}

func (x *RepairPartsBulkUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsBulkUpdateRequest.ProtoReflect.Descriptor instead.
func (*RepairPartsBulkUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{55}
}

func (x *RepairPartsBulkUpdateRequest) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *RepairPartsBulkUpdateRequest) GetIsValid() string {
	if x != nil {
		return x.IsValid
	}
	return ""
}

type RepairPartsBulkUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepairPartsBulkUpdateResponse) Reset() {
	*x = RepairPartsBulkUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsBulkUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsBulkUpdateResponse) ProtoMessage() {}

func (x *RepairPartsBulkUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsBulkUpdateResponse.ProtoReflect.Descriptor instead.
func (*RepairPartsBulkUpdateResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{56}
}

type RepairPartsCatChoiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RepairPartsCatChoiceResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RepairPartsCatChoiceListResponse) Reset() {
	*x = RepairPartsCatChoiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsCatChoiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsCatChoiceListResponse) ProtoMessage() {}

func (x *RepairPartsCatChoiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsCatChoiceListResponse.ProtoReflect.Descriptor instead.
func (*RepairPartsCatChoiceListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{57}
}

func (x *RepairPartsCatChoiceListResponse) GetResults() []*RepairPartsCatChoiceResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type RepairPartsCatChoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepairPartsCatChoiceRequest) Reset() {
	*x = RepairPartsCatChoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsCatChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsCatChoiceRequest) ProtoMessage() {}

func (x *RepairPartsCatChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsCatChoiceRequest.ProtoReflect.Descriptor instead.
func (*RepairPartsCatChoiceRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{58}
}

type RepairPartsCatChoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RepairPartsCatChoiceResponse) Reset() {
	*x = RepairPartsCatChoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsCatChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsCatChoiceResponse) ProtoMessage() {}

func (x *RepairPartsCatChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsCatChoiceResponse.ProtoReflect.Descriptor instead.
func (*RepairPartsCatChoiceResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{59}
}

func (x *RepairPartsCatChoiceResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RepairPartsCatChoiceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RepairPartsDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RepairPartsDestroyRequest) Reset() {
	*x = RepairPartsDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsDestroyRequest) ProtoMessage() {}

func (x *RepairPartsDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsDestroyRequest.ProtoReflect.Descriptor instead.
func (*RepairPartsDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{60}
}

func (x *RepairPartsDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RepairPartsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepairPartsListRequest) Reset() {
	*x = RepairPartsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsListRequest) ProtoMessage() {}

func (x *RepairPartsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsListRequest.ProtoReflect.Descriptor instead.
func (*RepairPartsListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{61}
}

type RepairPartsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RepairPartsResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RepairPartsListResponse) Reset() {
	*x = RepairPartsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsListResponse) ProtoMessage() {}

func (x *RepairPartsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsListResponse.ProtoReflect.Descriptor instead.
func (*RepairPartsListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{62}
}

func (x *RepairPartsListResponse) GetResults() []*RepairPartsResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type RepairPartsPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,2,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ProdCat              *string  `protobuf:"bytes,3,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	PartsCode            *string  `protobuf:"bytes,4,opt,name=parts_code,json=partsCode,proto3,oneof" json:"parts_code,omitempty"`
	PartsName            *string  `protobuf:"bytes,5,opt,name=parts_name,json=partsName,proto3,oneof" json:"parts_name,omitempty"`
	IsValid              *string  `protobuf:"bytes,6,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
}

func (x *RepairPartsPartialUpdateRequest) Reset() {
	*x = RepairPartsPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsPartialUpdateRequest) ProtoMessage() {}

func (x *RepairPartsPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*RepairPartsPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{63}
}

func (x *RepairPartsPartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepairPartsPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *RepairPartsPartialUpdateRequest) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *RepairPartsPartialUpdateRequest) GetPartsCode() string {
	if x != nil && x.PartsCode != nil {
		return *x.PartsCode
	}
	return ""
}

func (x *RepairPartsPartialUpdateRequest) GetPartsName() string {
	if x != nil && x.PartsName != nil {
		return *x.PartsName
	}
	return ""
}

func (x *RepairPartsPartialUpdateRequest) GetIsValid() string {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return ""
}

type RepairPartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdCat   *string `protobuf:"bytes,2,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	PartsCode *string `protobuf:"bytes,3,opt,name=parts_code,json=partsCode,proto3,oneof" json:"parts_code,omitempty"`
	PartsName *string `protobuf:"bytes,4,opt,name=parts_name,json=partsName,proto3,oneof" json:"parts_name,omitempty"`
	IsValid   *string `protobuf:"bytes,5,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
}

func (x *RepairPartsRequest) Reset() {
	*x = RepairPartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsRequest) ProtoMessage() {}

func (x *RepairPartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsRequest.ProtoReflect.Descriptor instead.
func (*RepairPartsRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{64}
}

func (x *RepairPartsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepairPartsRequest) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *RepairPartsRequest) GetPartsCode() string {
	if x != nil && x.PartsCode != nil {
		return *x.PartsCode
	}
	return ""
}

func (x *RepairPartsRequest) GetPartsName() string {
	if x != nil && x.PartsName != nil {
		return *x.PartsName
	}
	return ""
}

func (x *RepairPartsRequest) GetIsValid() string {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return ""
}

type RepairPartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProdCatName string  `protobuf:"bytes,2,opt,name=prod_cat_name,json=prodCatName,proto3" json:"prod_cat_name,omitempty"`
	ProdCat     *string `protobuf:"bytes,3,opt,name=prod_cat,json=prodCat,proto3,oneof" json:"prod_cat,omitempty"`
	PartsCode   *string `protobuf:"bytes,4,opt,name=parts_code,json=partsCode,proto3,oneof" json:"parts_code,omitempty"`
	PartsName   *string `protobuf:"bytes,5,opt,name=parts_name,json=partsName,proto3,oneof" json:"parts_name,omitempty"`
	IsValid     *string `protobuf:"bytes,7,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
	CreateTime  *string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime  *string `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	IsDeletable bool    `protobuf:"varint,10,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *RepairPartsResponse) Reset() {
	*x = RepairPartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsResponse) ProtoMessage() {}

func (x *RepairPartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsResponse.ProtoReflect.Descriptor instead.
func (*RepairPartsResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{65}
}

func (x *RepairPartsResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepairPartsResponse) GetProdCatName() string {
	if x != nil {
		return x.ProdCatName
	}
	return ""
}

func (x *RepairPartsResponse) GetProdCat() string {
	if x != nil && x.ProdCat != nil {
		return *x.ProdCat
	}
	return ""
}

func (x *RepairPartsResponse) GetPartsCode() string {
	if x != nil && x.PartsCode != nil {
		return *x.PartsCode
	}
	return ""
}

func (x *RepairPartsResponse) GetPartsName() string {
	if x != nil && x.PartsName != nil {
		return *x.PartsName
	}
	return ""
}

func (x *RepairPartsResponse) GetIsValid() string {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return ""
}

func (x *RepairPartsResponse) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *RepairPartsResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *RepairPartsResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type RepairPartsRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RepairPartsRetrieveRequest) Reset() {
	*x = RepairPartsRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairPartsRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairPartsRetrieveRequest) ProtoMessage() {}

func (x *RepairPartsRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairPartsRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RepairPartsRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{66}
}

func (x *RepairPartsRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SyncProdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate   *string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate     *string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	ProdBrand   int32   `protobuf:"varint,3,opt,name=prod_brand,json=prodBrand,proto3" json:"prod_brand,omitempty"`
	MongoDbName *string `protobuf:"bytes,4,opt,name=mongo_db_name,json=mongoDbName,proto3,oneof" json:"mongo_db_name,omitempty"`
}

func (x *SyncProdRequest) Reset() {
	*x = SyncProdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProdRequest) ProtoMessage() {}

func (x *SyncProdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProdRequest.ProtoReflect.Descriptor instead.
func (*SyncProdRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{67}
}

func (x *SyncProdRequest) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

func (x *SyncProdRequest) GetEndDate() string {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return ""
}

func (x *SyncProdRequest) GetProdBrand() int32 {
	if x != nil {
		return x.ProdBrand
	}
	return 0
}

func (x *SyncProdRequest) GetMongoDbName() string {
	if x != nil && x.MongoDbName != nil {
		return *x.MongoDbName
	}
	return ""
}

type SyncProdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SyncProdResponse) Reset() {
	*x = SyncProdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProdResponse) ProtoMessage() {}

func (x *SyncProdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProdResponse.ProtoReflect.Descriptor instead.
func (*SyncProdResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{68}
}

func (x *SyncProdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SyncProdResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ValuesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters   string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	ValueName string `protobuf:"bytes,2,opt,name=value_name,json=valueName,proto3" json:"value_name,omitempty"`
}

func (x *ValuesListRequest) Reset() {
	*x = ValuesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesListRequest) ProtoMessage() {}

func (x *ValuesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesListRequest.ProtoReflect.Descriptor instead.
func (*ValuesListRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{69}
}

func (x *ValuesListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ValuesListRequest) GetValueName() string {
	if x != nil {
		return x.ValueName
	}
	return ""
}

type WorkshopClubSpuValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *WorkshopClubSpuValuesResponse) Reset() {
	*x = WorkshopClubSpuValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopClubSpuValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopClubSpuValuesResponse) ProtoMessage() {}

func (x *WorkshopClubSpuValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopClubSpuValuesResponse.ProtoReflect.Descriptor instead.
func (*WorkshopClubSpuValuesResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{70}
}

func (x *WorkshopClubSpuValuesResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type WorkshopColorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WorkshopColorResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WorkshopColorListResponse) Reset() {
	*x = WorkshopColorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopColorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopColorListResponse) ProtoMessage() {}

func (x *WorkshopColorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopColorListResponse.ProtoReflect.Descriptor instead.
func (*WorkshopColorListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{71}
}

func (x *WorkshopColorListResponse) GetResults() []*WorkshopColorResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WorkshopColorListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WorkshopColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *WorkshopColorRequest) Reset() {
	*x = WorkshopColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopColorRequest) ProtoMessage() {}

func (x *WorkshopColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopColorRequest.ProtoReflect.Descriptor instead.
func (*WorkshopColorRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{72}
}

func (x *WorkshopColorRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type WorkshopColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ColorName *string `protobuf:"bytes,2,opt,name=color_name,json=colorName,proto3,oneof" json:"color_name,omitempty"`
	ColorRgb  *string `protobuf:"bytes,3,opt,name=color_rgb,json=colorRgb,proto3,oneof" json:"color_rgb,omitempty"`
	IsValid   bool    `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Deletable bool    `protobuf:"varint,5,opt,name=deletable,proto3" json:"deletable,omitempty"`
}

func (x *WorkshopColorResponse) Reset() {
	*x = WorkshopColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopColorResponse) ProtoMessage() {}

func (x *WorkshopColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopColorResponse.ProtoReflect.Descriptor instead.
func (*WorkshopColorResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{73}
}

func (x *WorkshopColorResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkshopColorResponse) GetColorName() string {
	if x != nil && x.ColorName != nil {
		return *x.ColorName
	}
	return ""
}

func (x *WorkshopColorResponse) GetColorRgb() string {
	if x != nil && x.ColorRgb != nil {
		return *x.ColorRgb
	}
	return ""
}

func (x *WorkshopColorResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *WorkshopColorResponse) GetDeletable() bool {
	if x != nil {
		return x.Deletable
	}
	return false
}

type WorkshopConfigListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WorkshopConfigResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WorkshopConfigListResponse) Reset() {
	*x = WorkshopConfigListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopConfigListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopConfigListResponse) ProtoMessage() {}

func (x *WorkshopConfigListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopConfigListResponse.ProtoReflect.Descriptor instead.
func (*WorkshopConfigListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{74}
}

func (x *WorkshopConfigListResponse) GetResults() []*WorkshopConfigResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WorkshopConfigListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WorkshopConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *WorkshopConfigRequest) Reset() {
	*x = WorkshopConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopConfigRequest) ProtoMessage() {}

func (x *WorkshopConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopConfigRequest.ProtoReflect.Descriptor instead.
func (*WorkshopConfigRequest) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{75}
}

func (x *WorkshopConfigRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type WorkshopConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       int32   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Title      *string `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content    *string `protobuf:"bytes,4,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Remark     *string `protobuf:"bytes,5,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	UpdateTime string  `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *WorkshopConfigResponse) Reset() {
	*x = WorkshopConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopConfigResponse) ProtoMessage() {}

func (x *WorkshopConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopConfigResponse.ProtoReflect.Descriptor instead.
func (*WorkshopConfigResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{76}
}

func (x *WorkshopConfigResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkshopConfigResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WorkshopConfigResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *WorkshopConfigResponse) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *WorkshopConfigResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *WorkshopConfigResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type WorkshopPropertiesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WorkshopPropertiesResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WorkshopPropertiesListResponse) Reset() {
	*x = WorkshopPropertiesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopPropertiesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopPropertiesListResponse) ProtoMessage() {}

func (x *WorkshopPropertiesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopPropertiesListResponse.ProtoReflect.Descriptor instead.
func (*WorkshopPropertiesListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{77}
}

func (x *WorkshopPropertiesListResponse) GetResults() []*WorkshopPropertiesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WorkshopPropertiesListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WorkshopPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Col  string `protobuf:"bytes,1,opt,name=col,proto3" json:"col,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WorkshopPropertiesResponse) Reset() {
	*x = WorkshopPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopPropertiesResponse) ProtoMessage() {}

func (x *WorkshopPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopPropertiesResponse.ProtoReflect.Descriptor instead.
func (*WorkshopPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{78}
}

func (x *WorkshopPropertiesResponse) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

func (x *WorkshopPropertiesResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WorkshopPropertiesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WorkshopSpuListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WorkshopSpuResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WorkshopSpuListResponse) Reset() {
	*x = WorkshopSpuListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopSpuListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopSpuListResponse) ProtoMessage() {}

func (x *WorkshopSpuListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopSpuListResponse.ProtoReflect.Descriptor instead.
func (*WorkshopSpuListResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{79}
}

func (x *WorkshopSpuListResponse) GetResults() []*WorkshopSpuResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WorkshopSpuListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WorkshopSpuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Col   string                        `protobuf:"bytes,1,opt,name=col,proto3" json:"col,omitempty"`
	Code  string                        `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Size  []*WorkshopPropertiesResponse `protobuf:"bytes,3,rep,name=size,proto3" json:"size,omitempty"`
	Color []*WorkshopPropertiesResponse `protobuf:"bytes,4,rep,name=color,proto3" json:"color,omitempty"`
	Name  string                        `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Spu   *ProdWorkshopPartResponse     `protobuf:"bytes,6,opt,name=spu,proto3" json:"spu,omitempty"`
}

func (x *WorkshopSpuResponse) Reset() {
	*x = WorkshopSpuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawgoods_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkshopSpuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkshopSpuResponse) ProtoMessage() {}

func (x *WorkshopSpuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rawgoods_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkshopSpuResponse.ProtoReflect.Descriptor instead.
func (*WorkshopSpuResponse) Descriptor() ([]byte, []int) {
	return file_rawgoods_proto_rawDescGZIP(), []int{80}
}

func (x *WorkshopSpuResponse) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

func (x *WorkshopSpuResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WorkshopSpuResponse) GetSize() []*WorkshopPropertiesResponse {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *WorkshopSpuResponse) GetColor() []*WorkshopPropertiesResponse {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *WorkshopSpuResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkshopSpuResponse) GetSpu() *ProdWorkshopPartResponse {
	if x != nil {
		return x.Spu
	}
	return nil
}

var File_rawgoods_proto protoreflect.FileDescriptor

var file_rawgoods_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x61, 0x77, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x62, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99,
	0x04, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x67, 0x62, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x8f, 0x08, 0x0a, 0x13, 0x43,
	0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x67,
	0x62, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x69,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x73, 0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x58, 0x0a,
	0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x77, 0x61, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x57, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x2c, 0x0a, 0x1a,
	0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x6c,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x1a, 0x43, 0x6c,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x15, 0x43,
	0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x95, 0x04, 0x0a, 0x16, 0x43, 0x6c, 0x75,
	0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x67, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x6b, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x6b, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x57, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x22, 0xd6, 0x02, 0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x75, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xd4, 0x04, 0x0a, 0x18, 0x43, 0x6c,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x67, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x70, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0x2c, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7a,
	0x0a, 0x18, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x02, 0x0a, 0x13, 0x43,
	0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x77, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x57, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x66, 0x6f, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x04, 0x70, 0x72, 0x6f,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x22, 0xfb, 0x03, 0x0a, 0x14,
	0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57,
	0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x64,
	0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x6f, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x2d, 0x0a, 0x1b, 0x43, 0x6c, 0x75,
	0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x19, 0x43, 0x6c, 0x75,
	0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0c,
	0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x68, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x16, 0x50,
	0x72, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xc7, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x50, 0x72,
	0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86,
	0x03, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x03, 0x0a,
	0x17, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x72, 0x6f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x70, 0x75,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x73,
	0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x63, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xe7, 0x06, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75,
	0x12, 0x55, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x72,
	0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x53, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x20,
	0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x70, 0x75, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x06, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x6b, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x1a, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x09, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69,
	0x65, 0x66, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a,
	0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x09, 0x0a, 0x20, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x53, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72,
	0x69, 0x65, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x80,
	0x09, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f,
	0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0xbb, 0x09, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x48, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0b, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x08, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72,
	0x69, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xa1, 0x0a, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69,
	0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b,
	0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x56, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c,
	0x52, 0x61, 0x77, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x6b, 0x75, 0x53,
	0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4e, 0x0a, 0x17, 0x52, 0x61, 0x77, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x61, 0x72, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0xbf, 0x09, 0x0a, 0x18, 0x52, 0x61, 0x77, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x53, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4c,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0b, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x7e, 0x0a, 0x1a, 0x52,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x22,
	0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x64, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0xf8, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x1d,
	0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a,
	0x1c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x20, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x61, 0x74, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x61, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x43, 0x61, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x46, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43,
	0x61, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x62, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xe4, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x98, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x63, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x1a, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a,
	0x0f, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x53, 0x79,
	0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x4c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x39, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6c,
	0x75, 0x62, 0x53, 0x70, 0x75, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7c, 0x0a,
	0x19, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x14, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc3, 0x01,
	0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x67, 0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x72, 0x67, 0x62, 0x22, 0x7e, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x86,
	0x01, 0x0a, 0x1e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x78, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x53, 0x70, 0x75, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x53,
	0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x13, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x03, 0x73, 0x70, 0x75, 0x32, 0x8f, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc0, 0x07, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x07,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x61, 0x74, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x43, 0x61, 0x74, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x43, 0x61, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x71, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc2, 0x07, 0x0a,
	0x1d, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x89,
	0x01, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x07, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x08, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0x95, 0x06, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x54, 0x6f,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x72, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe2, 0x19, 0x0a, 0x12, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x6e, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x6b, 0x75, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75,
	0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x6b, 0x75, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x0d, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x6b, 0x75, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x70, 0x75, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0e, 0x43, 0x6c, 0x75,
	0x62, 0x53, 0x70, 0x75, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x75, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x0b, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x70, 0x75,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x77, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x70, 0x75, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x70, 0x75, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x43, 0x6c,
	0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x62,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7d, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x08,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x77, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x77, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x77, 0x0a, 0x0d, 0x53, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7d, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12,
	0x5a, 0x10, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x52, 0x61, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rawgoods_proto_rawDescOnce sync.Once
	file_rawgoods_proto_rawDescData = file_rawgoods_proto_rawDesc
)

func file_rawgoods_proto_rawDescGZIP() []byte {
	file_rawgoods_proto_rawDescOnce.Do(func() {
		file_rawgoods_proto_rawDescData = protoimpl.X.CompressGZIP(file_rawgoods_proto_rawDescData)
	})
	return file_rawgoods_proto_rawDescData
}

var file_rawgoods_proto_msgTypes = make([]protoimpl.MessageInfo, 81)
var file_rawgoods_proto_goTypes = []interface{}{
	(*ClubProductDestroyRequest)(nil),           // 0: product_service.prod_ito.ClubProductDestroyRequest
	(*ClubProductListResponse)(nil),             // 1: product_service.prod_ito.ClubProductListResponse
	(*ClubProductRequest)(nil),                  // 2: product_service.prod_ito.ClubProductRequest
	(*ClubProductResponse)(nil),                 // 3: product_service.prod_ito.ClubProductResponse
	(*ClubProductRetrieveRequest)(nil),          // 4: product_service.prod_ito.ClubProductRetrieveRequest
	(*ClubProductSpuDestroyRequest)(nil),        // 5: product_service.prod_ito.ClubProductSpuDestroyRequest
	(*ClubProductSpuListResponse)(nil),          // 6: product_service.prod_ito.ClubProductSpuListResponse
	(*ClubProductSpuRequest)(nil),               // 7: product_service.prod_ito.ClubProductSpuRequest
	(*ClubProductSpuResponse)(nil),              // 8: product_service.prod_ito.ClubProductSpuResponse
	(*ClubProductSpuUpdateRequest)(nil),         // 9: product_service.prod_ito.ClubProductSpuUpdateRequest
	(*ClubProductUpdateRequest)(nil),            // 10: product_service.prod_ito.ClubProductUpdateRequest
	(*ClubWorkshopDestroyRequest)(nil),          // 11: product_service.prod_ito.ClubWorkshopDestroyRequest
	(*ClubWorkshopListResponse)(nil),            // 12: product_service.prod_ito.ClubWorkshopListResponse
	(*ClubWorkshopRequest)(nil),                 // 13: product_service.prod_ito.ClubWorkshopRequest
	(*ClubWorkshopResponse)(nil),                // 14: product_service.prod_ito.ClubWorkshopResponse
	(*ClubWorkshopRetrieveRequest)(nil),         // 15: product_service.prod_ito.ClubWorkshopRetrieveRequest
	(*ClubWorkshopUpdateRequest)(nil),           // 16: product_service.prod_ito.ClubWorkshopUpdateRequest
	(*ProdPropertiesListRequest)(nil),           // 17: product_service.prod_ito.ProdPropertiesListRequest
	(*ProdPropertiesListResponse)(nil),          // 18: product_service.prod_ito.ProdPropertiesListResponse
	(*ProdPropertiesResponse)(nil),              // 19: product_service.prod_ito.ProdPropertiesResponse
	(*ProdSeriesResponse)(nil),                  // 20: product_service.prod_ito.ProdSeriesResponse
	(*ProdWorkshopDestroyRequest)(nil),          // 21: product_service.prod_ito.ProdWorkshopDestroyRequest
	(*ProdWorkshopListRequest)(nil),             // 22: product_service.prod_ito.ProdWorkshopListRequest
	(*ProdWorkshopListResponse)(nil),            // 23: product_service.prod_ito.ProdWorkshopListResponse
	(*ProdWorkshopPartListRequest)(nil),         // 24: product_service.prod_ito.ProdWorkshopPartListRequest
	(*ProdWorkshopPartListResponse)(nil),        // 25: product_service.prod_ito.ProdWorkshopPartListResponse
	(*ProdWorkshopPartRequest)(nil),             // 26: product_service.prod_ito.ProdWorkshopPartRequest
	(*ProdWorkshopPartResponse)(nil),            // 27: product_service.prod_ito.ProdWorkshopPartResponse
	(*ProdWorkshopPartialUpdateRequest)(nil),    // 28: product_service.prod_ito.ProdWorkshopPartialUpdateRequest
	(*ProdWorkshopRequest)(nil),                 // 29: product_service.prod_ito.ProdWorkshopRequest
	(*ProdWorkshopResponse)(nil),                // 30: product_service.prod_ito.ProdWorkshopResponse
	(*ProdWorkshopRetrieveRequest)(nil),         // 31: product_service.prod_ito.ProdWorkshopRetrieveRequest
	(*ProductListResponse)(nil),                 // 32: product_service.prod_ito.ProductListResponse
	(*ProductModelDestroyRequest)(nil),          // 33: product_service.prod_ito.ProductModelDestroyRequest
	(*ProductModelListRequest)(nil),             // 34: product_service.prod_ito.ProductModelListRequest
	(*ProductModelListResponse)(nil),            // 35: product_service.prod_ito.ProductModelListResponse
	(*ProductModelPartialUpdateRequest)(nil),    // 36: product_service.prod_ito.ProductModelPartialUpdateRequest
	(*ProductModelRequest)(nil),                 // 37: product_service.prod_ito.ProductModelRequest
	(*ProductModelResponse)(nil),                // 38: product_service.prod_ito.ProductModelResponse
	(*ProductModelRetrieveRequest)(nil),         // 39: product_service.prod_ito.ProductModelRetrieveRequest
	(*ProductRequest)(nil),                      // 40: product_service.prod_ito.ProductRequest
	(*ProductResponse)(nil),                     // 41: product_service.prod_ito.ProductResponse
	(*RawSkuSparePartsListResponse)(nil),        // 42: product_service.prod_ito.RawSkuSparePartsListResponse
	(*RawSkuSparePartsRequest)(nil),             // 43: product_service.prod_ito.RawSkuSparePartsRequest
	(*RawSkuSparePartsResponse)(nil),            // 44: product_service.prod_ito.RawSkuSparePartsResponse
	(*RelProdRepairsBulkCreateListRequest)(nil), // 45: product_service.prod_ito.RelProdRepairsBulkCreateListRequest
	(*RelProdRepairsBulkCreateRequest)(nil),     // 46: product_service.prod_ito.RelProdRepairsBulkCreateRequest
	(*RelProdRepairsBulkCreateResponse)(nil),    // 47: product_service.prod_ito.RelProdRepairsBulkCreateResponse
	(*RelProdRepairsDestroyRequest)(nil),        // 48: product_service.prod_ito.RelProdRepairsDestroyRequest
	(*RelProdRepairsListRequest)(nil),           // 49: product_service.prod_ito.RelProdRepairsListRequest
	(*RelProdRepairsListResponse)(nil),          // 50: product_service.prod_ito.RelProdRepairsListResponse
	(*RelProdRepairsPartialUpdateRequest)(nil),  // 51: product_service.prod_ito.RelProdRepairsPartialUpdateRequest
	(*RelProdRepairsRequest)(nil),               // 52: product_service.prod_ito.RelProdRepairsRequest
	(*RelProdRepairsResponse)(nil),              // 53: product_service.prod_ito.RelProdRepairsResponse
	(*RelProdRepairsRetrieveRequest)(nil),       // 54: product_service.prod_ito.RelProdRepairsRetrieveRequest
	(*RepairPartsBulkUpdateRequest)(nil),        // 55: product_service.prod_ito.RepairPartsBulkUpdateRequest
	(*RepairPartsBulkUpdateResponse)(nil),       // 56: product_service.prod_ito.RepairPartsBulkUpdateResponse
	(*RepairPartsCatChoiceListResponse)(nil),    // 57: product_service.prod_ito.RepairPartsCatChoiceListResponse
	(*RepairPartsCatChoiceRequest)(nil),         // 58: product_service.prod_ito.RepairPartsCatChoiceRequest
	(*RepairPartsCatChoiceResponse)(nil),        // 59: product_service.prod_ito.RepairPartsCatChoiceResponse
	(*RepairPartsDestroyRequest)(nil),           // 60: product_service.prod_ito.RepairPartsDestroyRequest
	(*RepairPartsListRequest)(nil),              // 61: product_service.prod_ito.RepairPartsListRequest
	(*RepairPartsListResponse)(nil),             // 62: product_service.prod_ito.RepairPartsListResponse
	(*RepairPartsPartialUpdateRequest)(nil),     // 63: product_service.prod_ito.RepairPartsPartialUpdateRequest
	(*RepairPartsRequest)(nil),                  // 64: product_service.prod_ito.RepairPartsRequest
	(*RepairPartsResponse)(nil),                 // 65: product_service.prod_ito.RepairPartsResponse
	(*RepairPartsRetrieveRequest)(nil),          // 66: product_service.prod_ito.RepairPartsRetrieveRequest
	(*SyncProdRequest)(nil),                     // 67: product_service.prod_ito.SyncProdRequest
	(*SyncProdResponse)(nil),                    // 68: product_service.prod_ito.SyncProdResponse
	(*ValuesListRequest)(nil),                   // 69: product_service.prod_ito.ValuesListRequest
	(*WorkshopClubSpuValuesResponse)(nil),       // 70: product_service.prod_ito.WorkshopClubSpuValuesResponse
	(*WorkshopColorListResponse)(nil),           // 71: product_service.prod_ito.WorkshopColorListResponse
	(*WorkshopColorRequest)(nil),                // 72: product_service.prod_ito.WorkshopColorRequest
	(*WorkshopColorResponse)(nil),               // 73: product_service.prod_ito.WorkshopColorResponse
	(*WorkshopConfigListResponse)(nil),          // 74: product_service.prod_ito.WorkshopConfigListResponse
	(*WorkshopConfigRequest)(nil),               // 75: product_service.prod_ito.WorkshopConfigRequest
	(*WorkshopConfigResponse)(nil),              // 76: product_service.prod_ito.WorkshopConfigResponse
	(*WorkshopPropertiesListResponse)(nil),      // 77: product_service.prod_ito.WorkshopPropertiesListResponse
	(*WorkshopPropertiesResponse)(nil),          // 78: product_service.prod_ito.WorkshopPropertiesResponse
	(*WorkshopSpuListResponse)(nil),             // 79: product_service.prod_ito.WorkshopSpuListResponse
	(*WorkshopSpuResponse)(nil),                 // 80: product_service.prod_ito.WorkshopSpuResponse
	(*emptypb.Empty)(nil),                       // 81: google.protobuf.Empty
}
var file_rawgoods_proto_depIdxs = []int32{
	3,  // 0: product_service.prod_ito.ClubProductListResponse.results:type_name -> product_service.prod_ito.ClubProductResponse
	73, // 1: product_service.prod_ito.ClubProductResponse.workshop_colors:type_name -> product_service.prod_ito.WorkshopColorResponse
	8,  // 2: product_service.prod_ito.ClubProductSpuListResponse.results:type_name -> product_service.prod_ito.ClubProductSpuResponse
	3,  // 3: product_service.prod_ito.ClubProductSpuResponse.prod_skus:type_name -> product_service.prod_ito.ClubProductResponse
	14, // 4: product_service.prod_ito.ClubWorkshopListResponse.results:type_name -> product_service.prod_ito.ClubWorkshopResponse
	19, // 5: product_service.prod_ito.ProdPropertiesListResponse.results:type_name -> product_service.prod_ito.ProdPropertiesResponse
	65, // 6: product_service.prod_ito.ProdSeriesResponse.repair_parts:type_name -> product_service.prod_ito.RepairPartsResponse
	29, // 7: product_service.prod_ito.ProdWorkshopListRequest.results:type_name -> product_service.prod_ito.ProdWorkshopRequest
	30, // 8: product_service.prod_ito.ProdWorkshopListResponse.results:type_name -> product_service.prod_ito.ProdWorkshopResponse
	27, // 9: product_service.prod_ito.ProdWorkshopPartListResponse.results:type_name -> product_service.prod_ito.ProdWorkshopPartResponse
	30, // 10: product_service.prod_ito.ProdWorkshopPartResponse.workshop_parts:type_name -> product_service.prod_ito.ProdWorkshopResponse
	41, // 11: product_service.prod_ito.ProductListResponse.results:type_name -> product_service.prod_ito.ProductResponse
	38, // 12: product_service.prod_ito.ProductModelListResponse.results:type_name -> product_service.prod_ito.ProductModelResponse
	20, // 13: product_service.prod_ito.ProductResponse.prod_ser:type_name -> product_service.prod_ito.ProdSeriesResponse
	44, // 14: product_service.prod_ito.RawSkuSparePartsListResponse.results:type_name -> product_service.prod_ito.RawSkuSparePartsResponse
	46, // 15: product_service.prod_ito.RelProdRepairsBulkCreateListRequest.results:type_name -> product_service.prod_ito.RelProdRepairsBulkCreateRequest
	53, // 16: product_service.prod_ito.RelProdRepairsListResponse.results:type_name -> product_service.prod_ito.RelProdRepairsResponse
	41, // 17: product_service.prod_ito.RelProdRepairsResponse.prod_parts:type_name -> product_service.prod_ito.ProductResponse
	41, // 18: product_service.prod_ito.RelProdRepairsResponse.prod:type_name -> product_service.prod_ito.ProductResponse
	59, // 19: product_service.prod_ito.RepairPartsCatChoiceListResponse.results:type_name -> product_service.prod_ito.RepairPartsCatChoiceResponse
	65, // 20: product_service.prod_ito.RepairPartsListResponse.results:type_name -> product_service.prod_ito.RepairPartsResponse
	73, // 21: product_service.prod_ito.WorkshopColorListResponse.results:type_name -> product_service.prod_ito.WorkshopColorResponse
	76, // 22: product_service.prod_ito.WorkshopConfigListResponse.results:type_name -> product_service.prod_ito.WorkshopConfigResponse
	78, // 23: product_service.prod_ito.WorkshopPropertiesListResponse.results:type_name -> product_service.prod_ito.WorkshopPropertiesResponse
	80, // 24: product_service.prod_ito.WorkshopSpuListResponse.results:type_name -> product_service.prod_ito.WorkshopSpuResponse
	78, // 25: product_service.prod_ito.WorkshopSpuResponse.size:type_name -> product_service.prod_ito.WorkshopPropertiesResponse
	78, // 26: product_service.prod_ito.WorkshopSpuResponse.color:type_name -> product_service.prod_ito.WorkshopPropertiesResponse
	27, // 27: product_service.prod_ito.WorkshopSpuResponse.spu:type_name -> product_service.prod_ito.ProdWorkshopPartResponse
	17, // 28: product_service.prod_ito.ProdPropertiesController.List:input_type -> product_service.prod_ito.ProdPropertiesListRequest
	64, // 29: product_service.prod_ito.ProdRepairsController.Create:input_type -> product_service.prod_ito.RepairPartsRequest
	60, // 30: product_service.prod_ito.ProdRepairsController.Destroy:input_type -> product_service.prod_ito.RepairPartsDestroyRequest
	58, // 31: product_service.prod_ito.ProdRepairsController.GetRepairPartsCatChoice:input_type -> product_service.prod_ito.RepairPartsCatChoiceRequest
	61, // 32: product_service.prod_ito.ProdRepairsController.List:input_type -> product_service.prod_ito.RepairPartsListRequest
	63, // 33: product_service.prod_ito.ProdRepairsController.PartialUpdate:input_type -> product_service.prod_ito.RepairPartsPartialUpdateRequest
	55, // 34: product_service.prod_ito.ProdRepairsController.RepairPartsBulkUpdate:input_type -> product_service.prod_ito.RepairPartsBulkUpdateRequest
	66, // 35: product_service.prod_ito.ProdRepairsController.Retrieve:input_type -> product_service.prod_ito.RepairPartsRetrieveRequest
	64, // 36: product_service.prod_ito.ProdRepairsController.Update:input_type -> product_service.prod_ito.RepairPartsRequest
	45, // 37: product_service.prod_ito.ProdRepairsRelationController.BulkCreate:input_type -> product_service.prod_ito.RelProdRepairsBulkCreateListRequest
	52, // 38: product_service.prod_ito.ProdRepairsRelationController.Create:input_type -> product_service.prod_ito.RelProdRepairsRequest
	48, // 39: product_service.prod_ito.ProdRepairsRelationController.Destroy:input_type -> product_service.prod_ito.RelProdRepairsDestroyRequest
	40, // 40: product_service.prod_ito.ProdRepairsRelationController.GetProdCode:input_type -> product_service.prod_ito.ProductRequest
	49, // 41: product_service.prod_ito.ProdRepairsRelationController.List:input_type -> product_service.prod_ito.RelProdRepairsListRequest
	51, // 42: product_service.prod_ito.ProdRepairsRelationController.PartialUpdate:input_type -> product_service.prod_ito.RelProdRepairsPartialUpdateRequest
	54, // 43: product_service.prod_ito.ProdRepairsRelationController.Retrieve:input_type -> product_service.prod_ito.RelProdRepairsRetrieveRequest
	52, // 44: product_service.prod_ito.ProdRepairsRelationController.Update:input_type -> product_service.prod_ito.RelProdRepairsRequest
	37, // 45: product_service.prod_ito.ProductController.Create:input_type -> product_service.prod_ito.ProductModelRequest
	33, // 46: product_service.prod_ito.ProductController.Destroy:input_type -> product_service.prod_ito.ProductModelDestroyRequest
	34, // 47: product_service.prod_ito.ProductController.List:input_type -> product_service.prod_ito.ProductModelListRequest
	36, // 48: product_service.prod_ito.ProductController.PartialUpdate:input_type -> product_service.prod_ito.ProductModelPartialUpdateRequest
	39, // 49: product_service.prod_ito.ProductController.Retrieve:input_type -> product_service.prod_ito.ProductModelRetrieveRequest
	67, // 50: product_service.prod_ito.ProductController.SyncProdToMongo:input_type -> product_service.prod_ito.SyncProdRequest
	37, // 51: product_service.prod_ito.ProductController.Update:input_type -> product_service.prod_ito.ProductModelRequest
	2,  // 52: product_service.prod_ito.WorkshopController.ClubSkuCreate:input_type -> product_service.prod_ito.ClubProductRequest
	0,  // 53: product_service.prod_ito.WorkshopController.ClubSkuDestroy:input_type -> product_service.prod_ito.ClubProductDestroyRequest
	2,  // 54: product_service.prod_ito.WorkshopController.ClubSkuList:input_type -> product_service.prod_ito.ClubProductRequest
	4,  // 55: product_service.prod_ito.WorkshopController.ClubSkuRetrieve:input_type -> product_service.prod_ito.ClubProductRetrieveRequest
	10, // 56: product_service.prod_ito.WorkshopController.ClubSkuUpdate:input_type -> product_service.prod_ito.ClubProductUpdateRequest
	7,  // 57: product_service.prod_ito.WorkshopController.ClubSpuCreate:input_type -> product_service.prod_ito.ClubProductSpuRequest
	5,  // 58: product_service.prod_ito.WorkshopController.ClubSpuDestroy:input_type -> product_service.prod_ito.ClubProductSpuDestroyRequest
	7,  // 59: product_service.prod_ito.WorkshopController.ClubSpuList:input_type -> product_service.prod_ito.ClubProductSpuRequest
	9,  // 60: product_service.prod_ito.WorkshopController.ClubSpuUpdate:input_type -> product_service.prod_ito.ClubProductSpuUpdateRequest
	69, // 61: product_service.prod_ito.WorkshopController.ClubSpuValues:input_type -> product_service.prod_ito.ValuesListRequest
	13, // 62: product_service.prod_ito.WorkshopController.ClubWorkshopCreate:input_type -> product_service.prod_ito.ClubWorkshopRequest
	11, // 63: product_service.prod_ito.WorkshopController.ClubWorkshopDestroy:input_type -> product_service.prod_ito.ClubWorkshopDestroyRequest
	13, // 64: product_service.prod_ito.WorkshopController.ClubWorkshopList:input_type -> product_service.prod_ito.ClubWorkshopRequest
	15, // 65: product_service.prod_ito.WorkshopController.ClubWorkshopRetrieve:input_type -> product_service.prod_ito.ClubWorkshopRetrieveRequest
	16, // 66: product_service.prod_ito.WorkshopController.ClubWorkshopUpdate:input_type -> product_service.prod_ito.ClubWorkshopUpdateRequest
	29, // 67: product_service.prod_ito.WorkshopController.Create:input_type -> product_service.prod_ito.ProdWorkshopRequest
	22, // 68: product_service.prod_ito.WorkshopController.CreateList:input_type -> product_service.prod_ito.ProdWorkshopListRequest
	21, // 69: product_service.prod_ito.WorkshopController.Destroy:input_type -> product_service.prod_ito.ProdWorkshopDestroyRequest
	26, // 70: product_service.prod_ito.WorkshopController.FilterRetrieve:input_type -> product_service.prod_ito.ProdWorkshopPartRequest
	24, // 71: product_service.prod_ito.WorkshopController.List:input_type -> product_service.prod_ito.ProdWorkshopPartListRequest
	28, // 72: product_service.prod_ito.WorkshopController.PartialUpdate:input_type -> product_service.prod_ito.ProdWorkshopPartialUpdateRequest
	26, // 73: product_service.prod_ito.WorkshopController.Properties:input_type -> product_service.prod_ito.ProdWorkshopPartRequest
	31, // 74: product_service.prod_ito.WorkshopController.Retrieve:input_type -> product_service.prod_ito.ProdWorkshopRetrieveRequest
	43, // 75: product_service.prod_ito.WorkshopController.SkuSpareParts:input_type -> product_service.prod_ito.RawSkuSparePartsRequest
	26, // 76: product_service.prod_ito.WorkshopController.SpuProperties:input_type -> product_service.prod_ito.ProdWorkshopPartRequest
	29, // 77: product_service.prod_ito.WorkshopController.Update:input_type -> product_service.prod_ito.ProdWorkshopRequest
	72, // 78: product_service.prod_ito.WorkshopController.WorkshopColorList:input_type -> product_service.prod_ito.WorkshopColorRequest
	75, // 79: product_service.prod_ito.WorkshopController.WorkshopConfigList:input_type -> product_service.prod_ito.WorkshopConfigRequest
	18, // 80: product_service.prod_ito.ProdPropertiesController.List:output_type -> product_service.prod_ito.ProdPropertiesListResponse
	65, // 81: product_service.prod_ito.ProdRepairsController.Create:output_type -> product_service.prod_ito.RepairPartsResponse
	81, // 82: product_service.prod_ito.ProdRepairsController.Destroy:output_type -> google.protobuf.Empty
	57, // 83: product_service.prod_ito.ProdRepairsController.GetRepairPartsCatChoice:output_type -> product_service.prod_ito.RepairPartsCatChoiceListResponse
	62, // 84: product_service.prod_ito.ProdRepairsController.List:output_type -> product_service.prod_ito.RepairPartsListResponse
	65, // 85: product_service.prod_ito.ProdRepairsController.PartialUpdate:output_type -> product_service.prod_ito.RepairPartsResponse
	56, // 86: product_service.prod_ito.ProdRepairsController.RepairPartsBulkUpdate:output_type -> product_service.prod_ito.RepairPartsBulkUpdateResponse
	65, // 87: product_service.prod_ito.ProdRepairsController.Retrieve:output_type -> product_service.prod_ito.RepairPartsResponse
	65, // 88: product_service.prod_ito.ProdRepairsController.Update:output_type -> product_service.prod_ito.RepairPartsResponse
	47, // 89: product_service.prod_ito.ProdRepairsRelationController.BulkCreate:output_type -> product_service.prod_ito.RelProdRepairsBulkCreateResponse
	53, // 90: product_service.prod_ito.ProdRepairsRelationController.Create:output_type -> product_service.prod_ito.RelProdRepairsResponse
	81, // 91: product_service.prod_ito.ProdRepairsRelationController.Destroy:output_type -> google.protobuf.Empty
	32, // 92: product_service.prod_ito.ProdRepairsRelationController.GetProdCode:output_type -> product_service.prod_ito.ProductListResponse
	50, // 93: product_service.prod_ito.ProdRepairsRelationController.List:output_type -> product_service.prod_ito.RelProdRepairsListResponse
	53, // 94: product_service.prod_ito.ProdRepairsRelationController.PartialUpdate:output_type -> product_service.prod_ito.RelProdRepairsResponse
	53, // 95: product_service.prod_ito.ProdRepairsRelationController.Retrieve:output_type -> product_service.prod_ito.RelProdRepairsResponse
	53, // 96: product_service.prod_ito.ProdRepairsRelationController.Update:output_type -> product_service.prod_ito.RelProdRepairsResponse
	38, // 97: product_service.prod_ito.ProductController.Create:output_type -> product_service.prod_ito.ProductModelResponse
	81, // 98: product_service.prod_ito.ProductController.Destroy:output_type -> google.protobuf.Empty
	35, // 99: product_service.prod_ito.ProductController.List:output_type -> product_service.prod_ito.ProductModelListResponse
	38, // 100: product_service.prod_ito.ProductController.PartialUpdate:output_type -> product_service.prod_ito.ProductModelResponse
	38, // 101: product_service.prod_ito.ProductController.Retrieve:output_type -> product_service.prod_ito.ProductModelResponse
	68, // 102: product_service.prod_ito.ProductController.SyncProdToMongo:output_type -> product_service.prod_ito.SyncProdResponse
	38, // 103: product_service.prod_ito.ProductController.Update:output_type -> product_service.prod_ito.ProductModelResponse
	3,  // 104: product_service.prod_ito.WorkshopController.ClubSkuCreate:output_type -> product_service.prod_ito.ClubProductResponse
	81, // 105: product_service.prod_ito.WorkshopController.ClubSkuDestroy:output_type -> google.protobuf.Empty
	1,  // 106: product_service.prod_ito.WorkshopController.ClubSkuList:output_type -> product_service.prod_ito.ClubProductListResponse
	3,  // 107: product_service.prod_ito.WorkshopController.ClubSkuRetrieve:output_type -> product_service.prod_ito.ClubProductResponse
	3,  // 108: product_service.prod_ito.WorkshopController.ClubSkuUpdate:output_type -> product_service.prod_ito.ClubProductResponse
	8,  // 109: product_service.prod_ito.WorkshopController.ClubSpuCreate:output_type -> product_service.prod_ito.ClubProductSpuResponse
	81, // 110: product_service.prod_ito.WorkshopController.ClubSpuDestroy:output_type -> google.protobuf.Empty
	6,  // 111: product_service.prod_ito.WorkshopController.ClubSpuList:output_type -> product_service.prod_ito.ClubProductSpuListResponse
	8,  // 112: product_service.prod_ito.WorkshopController.ClubSpuUpdate:output_type -> product_service.prod_ito.ClubProductSpuResponse
	70, // 113: product_service.prod_ito.WorkshopController.ClubSpuValues:output_type -> product_service.prod_ito.WorkshopClubSpuValuesResponse
	14, // 114: product_service.prod_ito.WorkshopController.ClubWorkshopCreate:output_type -> product_service.prod_ito.ClubWorkshopResponse
	81, // 115: product_service.prod_ito.WorkshopController.ClubWorkshopDestroy:output_type -> google.protobuf.Empty
	12, // 116: product_service.prod_ito.WorkshopController.ClubWorkshopList:output_type -> product_service.prod_ito.ClubWorkshopListResponse
	14, // 117: product_service.prod_ito.WorkshopController.ClubWorkshopRetrieve:output_type -> product_service.prod_ito.ClubWorkshopResponse
	14, // 118: product_service.prod_ito.WorkshopController.ClubWorkshopUpdate:output_type -> product_service.prod_ito.ClubWorkshopResponse
	30, // 119: product_service.prod_ito.WorkshopController.Create:output_type -> product_service.prod_ito.ProdWorkshopResponse
	23, // 120: product_service.prod_ito.WorkshopController.CreateList:output_type -> product_service.prod_ito.ProdWorkshopListResponse
	81, // 121: product_service.prod_ito.WorkshopController.Destroy:output_type -> google.protobuf.Empty
	27, // 122: product_service.prod_ito.WorkshopController.FilterRetrieve:output_type -> product_service.prod_ito.ProdWorkshopPartResponse
	25, // 123: product_service.prod_ito.WorkshopController.List:output_type -> product_service.prod_ito.ProdWorkshopPartListResponse
	30, // 124: product_service.prod_ito.WorkshopController.PartialUpdate:output_type -> product_service.prod_ito.ProdWorkshopResponse
	77, // 125: product_service.prod_ito.WorkshopController.Properties:output_type -> product_service.prod_ito.WorkshopPropertiesListResponse
	30, // 126: product_service.prod_ito.WorkshopController.Retrieve:output_type -> product_service.prod_ito.ProdWorkshopResponse
	42, // 127: product_service.prod_ito.WorkshopController.SkuSpareParts:output_type -> product_service.prod_ito.RawSkuSparePartsListResponse
	79, // 128: product_service.prod_ito.WorkshopController.SpuProperties:output_type -> product_service.prod_ito.WorkshopSpuListResponse
	30, // 129: product_service.prod_ito.WorkshopController.Update:output_type -> product_service.prod_ito.ProdWorkshopResponse
	71, // 130: product_service.prod_ito.WorkshopController.WorkshopColorList:output_type -> product_service.prod_ito.WorkshopColorListResponse
	74, // 131: product_service.prod_ito.WorkshopController.WorkshopConfigList:output_type -> product_service.prod_ito.WorkshopConfigListResponse
	80, // [80:132] is the sub-list for method output_type
	28, // [28:80] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_rawgoods_proto_init() }
func file_rawgoods_proto_init() {
	if File_rawgoods_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rawgoods_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductSpuDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductSpuListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductSpuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductSpuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductSpuUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubProductUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubWorkshopDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubWorkshopListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubWorkshopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubWorkshopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubWorkshopRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubWorkshopUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdPropertiesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdPropertiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopPartListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopPartListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopPartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopPartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdWorkshopRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductModelDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductModelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductModelPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductModelRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawSkuSparePartsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawSkuSparePartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawSkuSparePartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsBulkCreateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsBulkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsBulkCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProdRepairsRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsBulkUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsBulkUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsCatChoiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsCatChoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsCatChoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepairPartsRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopClubSpuValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopColorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopConfigListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopPropertiesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopSpuListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawgoods_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkshopSpuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rawgoods_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_rawgoods_proto_msgTypes[76].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rawgoods_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   81,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_rawgoods_proto_goTypes,
		DependencyIndexes: file_rawgoods_proto_depIdxs,
		MessageInfos:      file_rawgoods_proto_msgTypes,
	}.Build()
	File_rawgoods_proto = out.File
	file_rawgoods_proto_rawDesc = nil
	file_rawgoods_proto_goTypes = nil
	file_rawgoods_proto_depIdxs = nil
}
