// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: rfid_ito.proto

package pbrfid

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BulkCreateGoodsDeliverListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*BulkCreateGoodsDeliverRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BulkCreateGoodsDeliverListRequest) Reset() {
	*x = BulkCreateGoodsDeliverListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateGoodsDeliverListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateGoodsDeliverListRequest) ProtoMessage() {}

func (x *BulkCreateGoodsDeliverListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateGoodsDeliverListRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateGoodsDeliverListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{0}
}

func (x *BulkCreateGoodsDeliverListRequest) GetResults() []*BulkCreateGoodsDeliverRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BulkCreateGoodsDeliverListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BulkCreateGoodsDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CanEdit       bool     `protobuf:"varint,3,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num           int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64  `protobuf:"fixed64,6,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64  `protobuf:"fixed64,7,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64  `protobuf:"fixed64,8,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64  `protobuf:"fixed64,9,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount   *float64 `protobuf:"fixed64,10,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut      *int32   `protobuf:"varint,11,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore    *int32   `protobuf:"varint,12,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge    *int32   `protobuf:"varint,13,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status        *int32   `protobuf:"varint,14,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32   `protobuf:"varint,15,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string  `protobuf:"bytes,16,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string  `protobuf:"bytes,17,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu      *string  `protobuf:"bytes,18,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo       *string  `protobuf:"bytes,19,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string   `protobuf:"bytes,20,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string  `protobuf:"bytes,21,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode      *string  `protobuf:"bytes,22,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode  *string  `protobuf:"bytes,23,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark        *string  `protobuf:"bytes,24,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo          *string  `protobuf:"bytes,25,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	Service       *int64   `protobuf:"varint,26,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *BulkCreateGoodsDeliverRequest) Reset() {
	*x = BulkCreateGoodsDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateGoodsDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateGoodsDeliverRequest) ProtoMessage() {}

func (x *BulkCreateGoodsDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateGoodsDeliverRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateGoodsDeliverRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{1}
}

func (x *BulkCreateGoodsDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *BulkCreateGoodsDeliverRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *BulkCreateGoodsDeliverRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *BulkCreateGoodsDeliverRequest) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type CreateGoodsDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CanEdit       bool     `protobuf:"varint,3,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num           int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64  `protobuf:"fixed64,6,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64  `protobuf:"fixed64,7,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64  `protobuf:"fixed64,8,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64  `protobuf:"fixed64,9,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount   *float64 `protobuf:"fixed64,10,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut      *int32   `protobuf:"varint,11,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore    *int32   `protobuf:"varint,12,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge    *int32   `protobuf:"varint,13,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status        *int32   `protobuf:"varint,14,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32   `protobuf:"varint,15,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string  `protobuf:"bytes,16,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string  `protobuf:"bytes,17,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu      *string  `protobuf:"bytes,18,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo       *string  `protobuf:"bytes,19,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string   `protobuf:"bytes,20,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string  `protobuf:"bytes,21,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode      *string  `protobuf:"bytes,22,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode  *string  `protobuf:"bytes,23,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark        *string  `protobuf:"bytes,24,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo          *string  `protobuf:"bytes,25,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	Service       *int64   `protobuf:"varint,26,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *CreateGoodsDeliverRequest) Reset() {
	*x = CreateGoodsDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodsDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodsDeliverRequest) ProtoMessage() {}

func (x *CreateGoodsDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodsDeliverRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodsDeliverRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGoodsDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *CreateGoodsDeliverRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *CreateGoodsDeliverRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *CreateGoodsDeliverRequest) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type CreateServiceConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters   string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	PlatName  string  `protobuf:"bytes,3,opt,name=plat_name,json=platName,proto3" json:"plat_name,omitempty"`
	ConfName  *string `protobuf:"bytes,4,opt,name=conf_name,json=confName,proto3,oneof" json:"conf_name,omitempty"`
	TradeType int32   `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Type      int32   `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CreateServiceConfRequest) Reset() {
	*x = CreateServiceConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceConfRequest) ProtoMessage() {}

func (x *CreateServiceConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceConfRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceConfRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{3}
}

func (x *CreateServiceConfRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateServiceConfRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateServiceConfRequest) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *CreateServiceConfRequest) GetConfName() string {
	if x != nil && x.ConfName != nil {
		return *x.ConfName
	}
	return ""
}

func (x *CreateServiceConfRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *CreateServiceConfRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type CreateServiceConfSolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters           string `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Type              int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Employee          *int32 `protobuf:"varint,4,opt,name=employee,proto3,oneof" json:"employee,omitempty"`
	ShopNo            *int32 `protobuf:"varint,5,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName          *int32 `protobuf:"varint,6,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo       *int32 `protobuf:"varint,7,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName     *int32 `protobuf:"varint,8,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseInNo     *int32 `protobuf:"varint,9,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName   *int32 `protobuf:"varint,10,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	ComplainPayDetail bool   `protobuf:"varint,11,opt,name=complain_pay_detail,json=complainPayDetail,proto3" json:"complain_pay_detail,omitempty"`
	ComplainInvoice   bool   `protobuf:"varint,12,opt,name=complain_invoice,json=complainInvoice,proto3" json:"complain_invoice,omitempty"`
	ComplainStockIn   bool   `protobuf:"varint,13,opt,name=complain_stock_in,json=complainStockIn,proto3" json:"complain_stock_in,omitempty"`
	ComplainStockOut  bool   `protobuf:"varint,14,opt,name=complain_stock_out,json=complainStockOut,proto3" json:"complain_stock_out,omitempty"`
	ComplainRefund    bool   `protobuf:"varint,15,opt,name=complain_refund,json=complainRefund,proto3" json:"complain_refund,omitempty"`
}

func (x *CreateServiceConfSolutionRequest) Reset() {
	*x = CreateServiceConfSolutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceConfSolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceConfSolutionRequest) ProtoMessage() {}

func (x *CreateServiceConfSolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceConfSolutionRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceConfSolutionRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{4}
}

func (x *CreateServiceConfSolutionRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateServiceConfSolutionRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetEmployee() int32 {
	if x != nil && x.Employee != nil {
		return *x.Employee
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetShopNo() int32 {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetShopName() int32 {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetWarehouseNo() int32 {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetWarehouseName() int32 {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetWarehouseInNo() int32 {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetWarehouseInName() int32 {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return 0
}

func (x *CreateServiceConfSolutionRequest) GetComplainPayDetail() bool {
	if x != nil {
		return x.ComplainPayDetail
	}
	return false
}

func (x *CreateServiceConfSolutionRequest) GetComplainInvoice() bool {
	if x != nil {
		return x.ComplainInvoice
	}
	return false
}

func (x *CreateServiceConfSolutionRequest) GetComplainStockIn() bool {
	if x != nil {
		return x.ComplainStockIn
	}
	return false
}

func (x *CreateServiceConfSolutionRequest) GetComplainStockOut() bool {
	if x != nil {
		return x.ComplainStockOut
	}
	return false
}

func (x *CreateServiceConfSolutionRequest) GetComplainRefund() bool {
	if x != nil {
		return x.ComplainRefund
	}
	return false
}

type CreateServiceConfWarehouseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ShopNo          string  `protobuf:"bytes,3,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName        string  `protobuf:"bytes,4,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo     string  `protobuf:"bytes,5,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName   string  `protobuf:"bytes,6,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ConfirmOvertime int32   `protobuf:"varint,7,opt,name=confirm_overtime,json=confirmOvertime,proto3" json:"confirm_overtime,omitempty"`
	FinishOvertime  int32   `protobuf:"varint,8,opt,name=finish_overtime,json=finishOvertime,proto3" json:"finish_overtime,omitempty"`
	ExpireTime      int32   `protobuf:"varint,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	AutoApprove     bool    `protobuf:"varint,10,opt,name=auto_approve,json=autoApprove,proto3" json:"auto_approve,omitempty"`
	CanReturn       bool    `protobuf:"varint,11,opt,name=can_return,json=canReturn,proto3" json:"can_return,omitempty"`
	WarehouseInNo   *string `protobuf:"bytes,12,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName *string `protobuf:"bytes,13,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OperatorId      *int32  `protobuf:"varint,14,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName    *string `protobuf:"bytes,15,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Parent          int64   `protobuf:"varint,16,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateServiceConfWarehouseRequest) Reset() {
	*x = CreateServiceConfWarehouseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceConfWarehouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceConfWarehouseRequest) ProtoMessage() {}

func (x *CreateServiceConfWarehouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceConfWarehouseRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceConfWarehouseRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{5}
}

func (x *CreateServiceConfWarehouseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateServiceConfWarehouseRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetConfirmOvertime() int32 {
	if x != nil {
		return x.ConfirmOvertime
	}
	return 0
}

func (x *CreateServiceConfWarehouseRequest) GetFinishOvertime() int32 {
	if x != nil {
		return x.FinishOvertime
	}
	return 0
}

func (x *CreateServiceConfWarehouseRequest) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *CreateServiceConfWarehouseRequest) GetAutoApprove() bool {
	if x != nil {
		return x.AutoApprove
	}
	return false
}

func (x *CreateServiceConfWarehouseRequest) GetCanReturn() bool {
	if x != nil {
		return x.CanReturn
	}
	return false
}

func (x *CreateServiceConfWarehouseRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *CreateServiceConfWarehouseRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *CreateServiceConfWarehouseRequest) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

type CreateServiceReasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters    string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	TradeType  int32   `protobuf:"varint,3,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ReasonType *int32  `protobuf:"varint,4,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	ReasonCode int32   `protobuf:"varint,5,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName string  `protobuf:"bytes,6,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ReasonDesc *string `protobuf:"bytes,7,opt,name=reason_desc,json=reasonDesc,proto3,oneof" json:"reason_desc,omitempty"`
	WithRemark *bool   `protobuf:"varint,8,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsValid    bool    `protobuf:"varint,9,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsReserved *bool   `protobuf:"varint,10,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	Parent     *int64  `protobuf:"varint,11,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *CreateServiceReasonRequest) Reset() {
	*x = CreateServiceReasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceReasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceReasonRequest) ProtoMessage() {}

func (x *CreateServiceReasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceReasonRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceReasonRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{6}
}

func (x *CreateServiceReasonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateServiceReasonRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *CreateServiceReasonRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *CreateServiceReasonRequest) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *CreateServiceReasonRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *CreateServiceReasonRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *CreateServiceReasonRequest) GetReasonDesc() string {
	if x != nil && x.ReasonDesc != nil {
		return *x.ReasonDesc
	}
	return ""
}

func (x *CreateServiceReasonRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *CreateServiceReasonRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CreateServiceReasonRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *CreateServiceReasonRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type CtmVendorAddrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReceiverProvince string  `protobuf:"bytes,3,opt,name=receiver_province,json=receiverProvince,proto3" json:"receiver_province,omitempty"`
	ReceiverCity     string  `protobuf:"bytes,4,opt,name=receiver_city,json=receiverCity,proto3" json:"receiver_city,omitempty"`
	ReceiverDistrict string  `protobuf:"bytes,5,opt,name=receiver_district,json=receiverDistrict,proto3" json:"receiver_district,omitempty"`
	ReceiverAddress  string  `protobuf:"bytes,6,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	AddressTag       *string `protobuf:"bytes,7,opt,name=address_tag,json=addressTag,proto3,oneof" json:"address_tag,omitempty"`
	ZipCode          *string `protobuf:"bytes,8,opt,name=zip_code,json=zipCode,proto3,oneof" json:"zip_code,omitempty"`
	ReceiverName     string  `protobuf:"bytes,9,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverMobile   string  `protobuf:"bytes,10,opt,name=receiver_mobile,json=receiverMobile,proto3" json:"receiver_mobile,omitempty"`
	Ctm              *int64  `protobuf:"varint,11,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor           *int64  `protobuf:"varint,12,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters          string  `protobuf:"bytes,13,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CtmVendorAddrCreateRequest) Reset() {
	*x = CtmVendorAddrCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrCreateRequest) ProtoMessage() {}

func (x *CtmVendorAddrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrCreateRequest.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{7}
}

func (x *CtmVendorAddrCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmVendorAddrCreateRequest) GetReceiverProvince() string {
	if x != nil {
		return x.ReceiverProvince
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetReceiverCity() string {
	if x != nil {
		return x.ReceiverCity
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetReceiverDistrict() string {
	if x != nil {
		return x.ReceiverDistrict
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetAddressTag() string {
	if x != nil && x.AddressTag != nil {
		return *x.AddressTag
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetReceiverMobile() string {
	if x != nil {
		return x.ReceiverMobile
	}
	return ""
}

func (x *CtmVendorAddrCreateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmVendorAddrCreateRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *CtmVendorAddrCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type CtmVendorAddrDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CtmVendorAddrDestroyRequest) Reset() {
	*x = CtmVendorAddrDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrDestroyRequest) ProtoMessage() {}

func (x *CtmVendorAddrDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrDestroyRequest.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{8}
}

func (x *CtmVendorAddrDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CtmVendorAddrListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CtmVendorAddrListRequest) Reset() {
	*x = CtmVendorAddrListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrListRequest) ProtoMessage() {}

func (x *CtmVendorAddrListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrListRequest.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{9}
}

func (x *CtmVendorAddrListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type CtmVendorAddrListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CtmVendorAddrResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CtmVendorAddrListResponse) Reset() {
	*x = CtmVendorAddrListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrListResponse) ProtoMessage() {}

func (x *CtmVendorAddrListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrListResponse.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{10}
}

func (x *CtmVendorAddrListResponse) GetResults() []*CtmVendorAddrResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CtmVendorAddrListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CtmVendorAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReceiverProvince string  `protobuf:"bytes,3,opt,name=receiver_province,json=receiverProvince,proto3" json:"receiver_province,omitempty"`
	ReceiverCity     string  `protobuf:"bytes,4,opt,name=receiver_city,json=receiverCity,proto3" json:"receiver_city,omitempty"`
	ReceiverDistrict string  `protobuf:"bytes,5,opt,name=receiver_district,json=receiverDistrict,proto3" json:"receiver_district,omitempty"`
	ReceiverAddress  string  `protobuf:"bytes,6,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	AddressTag       *string `protobuf:"bytes,7,opt,name=address_tag,json=addressTag,proto3,oneof" json:"address_tag,omitempty"`
	ZipCode          *string `protobuf:"bytes,8,opt,name=zip_code,json=zipCode,proto3,oneof" json:"zip_code,omitempty"`
	ReceiverName     string  `protobuf:"bytes,9,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverMobile   string  `protobuf:"bytes,10,opt,name=receiver_mobile,json=receiverMobile,proto3" json:"receiver_mobile,omitempty"`
	Ctm              *int64  `protobuf:"varint,11,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor           *int64  `protobuf:"varint,12,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters          string  `protobuf:"bytes,13,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CtmVendorAddrRequest) Reset() {
	*x = CtmVendorAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrRequest) ProtoMessage() {}

func (x *CtmVendorAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrRequest.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{11}
}

func (x *CtmVendorAddrRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmVendorAddrRequest) GetReceiverProvince() string {
	if x != nil {
		return x.ReceiverProvince
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetReceiverCity() string {
	if x != nil {
		return x.ReceiverCity
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetReceiverDistrict() string {
	if x != nil {
		return x.ReceiverDistrict
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetAddressTag() string {
	if x != nil && x.AddressTag != nil {
		return *x.AddressTag
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetReceiverMobile() string {
	if x != nil {
		return x.ReceiverMobile
	}
	return ""
}

func (x *CtmVendorAddrRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmVendorAddrRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *CtmVendorAddrRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type CtmVendorAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime       string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ReceiverProvince string  `protobuf:"bytes,4,opt,name=receiver_province,json=receiverProvince,proto3" json:"receiver_province,omitempty"`
	ReceiverCity     string  `protobuf:"bytes,5,opt,name=receiver_city,json=receiverCity,proto3" json:"receiver_city,omitempty"`
	ReceiverDistrict string  `protobuf:"bytes,6,opt,name=receiver_district,json=receiverDistrict,proto3" json:"receiver_district,omitempty"`
	ReceiverAddress  string  `protobuf:"bytes,7,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	AddressTag       *string `protobuf:"bytes,8,opt,name=address_tag,json=addressTag,proto3,oneof" json:"address_tag,omitempty"`
	ZipCode          *string `protobuf:"bytes,9,opt,name=zip_code,json=zipCode,proto3,oneof" json:"zip_code,omitempty"`
	ReceiverName     string  `protobuf:"bytes,10,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverMobile   string  `protobuf:"bytes,11,opt,name=receiver_mobile,json=receiverMobile,proto3" json:"receiver_mobile,omitempty"`
	Ctm              *int64  `protobuf:"varint,12,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor           *int64  `protobuf:"varint,13,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
}

func (x *CtmVendorAddrResponse) Reset() {
	*x = CtmVendorAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrResponse) ProtoMessage() {}

func (x *CtmVendorAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrResponse.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{12}
}

func (x *CtmVendorAddrResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmVendorAddrResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetReceiverProvince() string {
	if x != nil {
		return x.ReceiverProvince
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetReceiverCity() string {
	if x != nil {
		return x.ReceiverCity
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetReceiverDistrict() string {
	if x != nil {
		return x.ReceiverDistrict
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetAddressTag() string {
	if x != nil && x.AddressTag != nil {
		return *x.AddressTag
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetReceiverMobile() string {
	if x != nil {
		return x.ReceiverMobile
	}
	return ""
}

func (x *CtmVendorAddrResponse) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmVendorAddrResponse) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

type CtmVendorAddrRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CtmVendorAddrRetrieveRequest) Reset() {
	*x = CtmVendorAddrRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrRetrieveRequest) ProtoMessage() {}

func (x *CtmVendorAddrRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrRetrieveRequest.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{13}
}

func (x *CtmVendorAddrRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CtmVendorAddrUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ReceiverProvince     string   `protobuf:"bytes,4,opt,name=receiver_province,json=receiverProvince,proto3" json:"receiver_province,omitempty"`
	ReceiverCity         string   `protobuf:"bytes,5,opt,name=receiver_city,json=receiverCity,proto3" json:"receiver_city,omitempty"`
	ReceiverDistrict     string   `protobuf:"bytes,6,opt,name=receiver_district,json=receiverDistrict,proto3" json:"receiver_district,omitempty"`
	ReceiverAddress      string   `protobuf:"bytes,7,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	AddressTag           *string  `protobuf:"bytes,8,opt,name=address_tag,json=addressTag,proto3,oneof" json:"address_tag,omitempty"`
	ZipCode              *string  `protobuf:"bytes,9,opt,name=zip_code,json=zipCode,proto3,oneof" json:"zip_code,omitempty"`
	ReceiverName         string   `protobuf:"bytes,10,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverMobile       string   `protobuf:"bytes,11,opt,name=receiver_mobile,json=receiverMobile,proto3" json:"receiver_mobile,omitempty"`
	Ctm                  *int64   `protobuf:"varint,12,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor               *int64   `protobuf:"varint,13,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters              string   `protobuf:"bytes,14,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CtmVendorAddrUpdateRequest) Reset() {
	*x = CtmVendorAddrUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtmVendorAddrUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtmVendorAddrUpdateRequest) ProtoMessage() {}

func (x *CtmVendorAddrUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtmVendorAddrUpdateRequest.ProtoReflect.Descriptor instead.
func (*CtmVendorAddrUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{14}
}

func (x *CtmVendorAddrUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CtmVendorAddrUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *CtmVendorAddrUpdateRequest) GetReceiverProvince() string {
	if x != nil {
		return x.ReceiverProvince
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetReceiverCity() string {
	if x != nil {
		return x.ReceiverCity
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetReceiverDistrict() string {
	if x != nil {
		return x.ReceiverDistrict
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetAddressTag() string {
	if x != nil && x.AddressTag != nil {
		return *x.AddressTag
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetReceiverMobile() string {
	if x != nil {
		return x.ReceiverMobile
	}
	return ""
}

func (x *CtmVendorAddrUpdateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *CtmVendorAddrUpdateRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *CtmVendorAddrUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type DeliverNoticeDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeliverNoticeDestroyRequest) Reset() {
	*x = DeliverNoticeDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeDestroyRequest) ProtoMessage() {}

func (x *DeliverNoticeDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeDestroyRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{15}
}

func (x *DeliverNoticeDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeliverNoticeEpcScanStorageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *DeliverNoticeEpcScanStorageListRequest) Reset() {
	*x = DeliverNoticeEpcScanStorageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeEpcScanStorageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeEpcScanStorageListRequest) ProtoMessage() {}

func (x *DeliverNoticeEpcScanStorageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeEpcScanStorageListRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeEpcScanStorageListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{16}
}

func (x *DeliverNoticeEpcScanStorageListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type DeliverNoticeEpcScanStorageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DeliverNoticeEpcScanStorageResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeliverNoticeEpcScanStorageListResponse) Reset() {
	*x = DeliverNoticeEpcScanStorageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeEpcScanStorageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeEpcScanStorageListResponse) ProtoMessage() {}

func (x *DeliverNoticeEpcScanStorageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeEpcScanStorageListResponse.ProtoReflect.Descriptor instead.
func (*DeliverNoticeEpcScanStorageListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{17}
}

func (x *DeliverNoticeEpcScanStorageListResponse) GetResults() []*DeliverNoticeEpcScanStorageResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DeliverNoticeEpcScanStorageListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeliverNoticeEpcScanStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WebData  string `protobuf:"bytes,2,opt,name=web_data,json=webData,proto3" json:"web_data,omitempty"`
	IsSubmit bool   `protobuf:"varint,3,opt,name=is_submit,json=isSubmit,proto3" json:"is_submit,omitempty"`
	IsValid  bool   `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Notice   *int64 `protobuf:"varint,5,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
}

func (x *DeliverNoticeEpcScanStorageRequest) Reset() {
	*x = DeliverNoticeEpcScanStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeEpcScanStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeEpcScanStorageRequest) ProtoMessage() {}

func (x *DeliverNoticeEpcScanStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeEpcScanStorageRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeEpcScanStorageRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{18}
}

func (x *DeliverNoticeEpcScanStorageRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeEpcScanStorageRequest) GetWebData() string {
	if x != nil {
		return x.WebData
	}
	return ""
}

func (x *DeliverNoticeEpcScanStorageRequest) GetIsSubmit() bool {
	if x != nil {
		return x.IsSubmit
	}
	return false
}

func (x *DeliverNoticeEpcScanStorageRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *DeliverNoticeEpcScanStorageRequest) GetNotice() int64 {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return 0
}

type DeliverNoticeEpcScanStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	WebData    string `protobuf:"bytes,4,opt,name=web_data,json=webData,proto3" json:"web_data,omitempty"`
	IsSubmit   bool   `protobuf:"varint,5,opt,name=is_submit,json=isSubmit,proto3" json:"is_submit,omitempty"`
	IsValid    bool   `protobuf:"varint,6,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Notice     *int64 `protobuf:"varint,7,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
}

func (x *DeliverNoticeEpcScanStorageResponse) Reset() {
	*x = DeliverNoticeEpcScanStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeEpcScanStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeEpcScanStorageResponse) ProtoMessage() {}

func (x *DeliverNoticeEpcScanStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeEpcScanStorageResponse.ProtoReflect.Descriptor instead.
func (*DeliverNoticeEpcScanStorageResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{19}
}

func (x *DeliverNoticeEpcScanStorageResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeEpcScanStorageResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeliverNoticeEpcScanStorageResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeliverNoticeEpcScanStorageResponse) GetWebData() string {
	if x != nil {
		return x.WebData
	}
	return ""
}

func (x *DeliverNoticeEpcScanStorageResponse) GetIsSubmit() bool {
	if x != nil {
		return x.IsSubmit
	}
	return false
}

func (x *DeliverNoticeEpcScanStorageResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *DeliverNoticeEpcScanStorageResponse) GetNotice() int64 {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return 0
}

type DeliverNoticeGoodsDetailsBulkCreateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DeliverNoticeGoodsDetailsBulkCreateRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsBulkCreateListRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsBulkCreateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsBulkCreateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsBulkCreateListRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsBulkCreateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsBulkCreateListRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsBulkCreateListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{20}
}

func (x *DeliverNoticeGoodsDetailsBulkCreateListRequest) GetResults() []*DeliverNoticeGoodsDetailsBulkCreateRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DeliverNoticeGoodsDetailsBulkCreateListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeliverNoticeGoodsDetailsBulkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num           int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,5,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,6,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,7,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64 `protobuf:"fixed64,8,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status        *int32  `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	GoodsId       *string `protobuf:"bytes,10,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,12,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string  `protobuf:"bytes,13,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string `protobuf:"bytes,14,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Notice        *int64  `protobuf:"varint,15,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
	Filters       string  `protobuf:"bytes,16,opt,name=filters,proto3" json:"filters,omitempty"`
	SharePrice    float64 `protobuf:"fixed64,17,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsBulkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsBulkCreateRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsBulkCreateRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsBulkCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{21}
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetNotice() int64 {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsBulkCreateRequest) GetSharePrice() float64 {
	if x != nil {
		return x.SharePrice
	}
	return 0
}

type DeliverNoticeGoodsDetailsCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num           int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,5,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,6,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,7,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64 `protobuf:"fixed64,8,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status        *int32  `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	GoodsId       *string `protobuf:"bytes,10,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,12,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string  `protobuf:"bytes,13,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string `protobuf:"bytes,14,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Notice        *int64  `protobuf:"varint,15,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
	Filters       string  `protobuf:"bytes,16,opt,name=filters,proto3" json:"filters,omitempty"`
	SharePrice    float64 `protobuf:"fixed64,17,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsCreateRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsCreateRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{22}
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetNotice() int64 {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsCreateRequest) GetSharePrice() float64 {
	if x != nil {
		return x.SharePrice
	}
	return 0
}

type DeliverNoticeGoodsDetailsDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsDestroyRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsDestroyRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsDestroyRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{23}
}

func (x *DeliverNoticeGoodsDetailsDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeliverNoticeGoodsDetailsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsListRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsListRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsListRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{24}
}

func (x *DeliverNoticeGoodsDetailsListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type DeliverNoticeGoodsDetailsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DeliverNoticeGoodsDetailsResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsListResponse) Reset() {
	*x = DeliverNoticeGoodsDetailsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsListResponse) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsListResponse.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{25}
}

func (x *DeliverNoticeGoodsDetailsListResponse) GetResults() []*DeliverNoticeGoodsDetailsResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DeliverNoticeGoodsDetailsListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeliverNoticeGoodsDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num           int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,5,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,6,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,7,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64 `protobuf:"fixed64,8,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status        *int32  `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	GoodsId       *string `protobuf:"bytes,10,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string `protobuf:"bytes,11,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,12,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string  `protobuf:"bytes,13,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string `protobuf:"bytes,14,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Notice        *int64  `protobuf:"varint,15,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
	Filters       string  `protobuf:"bytes,16,opt,name=filters,proto3" json:"filters,omitempty"`
	SharePrice    float64 `protobuf:"fixed64,17,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{26}
}

func (x *DeliverNoticeGoodsDetailsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsRequest) GetNotice() int64 {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsRequest) GetSharePrice() float64 {
	if x != nil {
		return x.SharePrice
	}
	return 0
}

type DeliverNoticeGoodsDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusName    string  `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	CreateTime    string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string  `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Num           int32   `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,7,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,8,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,9,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64 `protobuf:"fixed64,10,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status        *int32  `protobuf:"varint,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	GoodsId       *string `protobuf:"bytes,12,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string `protobuf:"bytes,13,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string  `protobuf:"bytes,15,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Notice        *int64  `protobuf:"varint,17,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
	SendNum       int32   `protobuf:"varint,18,opt,name=send_num,json=sendNum,proto3" json:"send_num,omitempty"`
	SendAmount    float32 `protobuf:"fixed32,19,opt,name=send_amount,json=sendAmount,proto3" json:"send_amount,omitempty"`
	SharePrice    float64 `protobuf:"fixed64,20,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsResponse) Reset() {
	*x = DeliverNoticeGoodsDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsResponse) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsResponse.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{27}
}

func (x *DeliverNoticeGoodsDetailsResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsResponse) GetNotice() int64 {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetSendNum() int32 {
	if x != nil {
		return x.SendNum
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetSendAmount() float32 {
	if x != nil {
		return x.SendAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsResponse) GetSharePrice() float64 {
	if x != nil {
		return x.SharePrice
	}
	return 0
}

type DeliverNoticeGoodsDetailsRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsRetrieveRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsRetrieveRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsRetrieveRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{28}
}

func (x *DeliverNoticeGoodsDetailsRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeliverNoticeGoodsDetailsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Num                  int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price                float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount         float64  `protobuf:"fixed64,6,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount             float64  `protobuf:"fixed64,7,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount        float64  `protobuf:"fixed64,8,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount          float64  `protobuf:"fixed64,9,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	GoodsId              *string  `protobuf:"bytes,11,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName            *string  `protobuf:"bytes,12,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,13,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               string   `protobuf:"bytes,14,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName             *string  `protobuf:"bytes,15,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Notice               *int64   `protobuf:"varint,16,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
	Filters              string   `protobuf:"bytes,17,opt,name=filters,proto3" json:"filters,omitempty"`
	SharePrice           float64  `protobuf:"fixed64,18,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) Reset() {
	*x = DeliverNoticeGoodsDetailsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeGoodsDetailsUpdateRequest) ProtoMessage() {}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeGoodsDetailsUpdateRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeGoodsDetailsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{29}
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetNotice() int64 {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return 0
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *DeliverNoticeGoodsDetailsUpdateRequest) GetSharePrice() float64 {
	if x != nil {
		return x.SharePrice
	}
	return 0
}

type DeliverNoticeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodsList        []*DeliverNoticeGoodsDetailsRequest `protobuf:"bytes,3,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	Did              string                              `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	TradeType        *int32                              `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	CreateName       *string                             `protobuf:"bytes,6,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType       *int32                              `protobuf:"varint,7,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	EditorId         *int32                              `protobuf:"varint,8,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName       *string                             `protobuf:"bytes,9,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	ApproveTime      *string                             `protobuf:"bytes,10,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName      *string                             `protobuf:"bytes,11,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons   *string                             `protobuf:"bytes,12,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons    *string                             `protobuf:"bytes,13,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons    *string                             `protobuf:"bytes,14,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	NoticeType       *int32                              `protobuf:"varint,15,opt,name=notice_type,json=noticeType,proto3,oneof" json:"notice_type,omitempty"`
	Type             *int32                              `protobuf:"varint,16,opt,name=type,proto3,oneof" json:"type,omitempty"`
	NoticeStatus     *int32                              `protobuf:"varint,17,opt,name=notice_status,json=noticeStatus,proto3,oneof" json:"notice_status,omitempty"`
	PayStatus        *int32                              `protobuf:"varint,18,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string                             `protobuf:"bytes,19,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm     *int32                              `protobuf:"varint,20,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	ShopNo           string                              `protobuf:"bytes,21,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName         string                              `protobuf:"bytes,22,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo      *string                             `protobuf:"bytes,23,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName    *string                             `protobuf:"bytes,24,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName     *string                             `protobuf:"bytes,25,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string                             `protobuf:"bytes,26,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string                             `protobuf:"bytes,27,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string                             `protobuf:"bytes,28,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string                             `protobuf:"bytes,29,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string                             `protobuf:"bytes,30,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	Paid             *float64                            `protobuf:"fixed64,31,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	PostAmount       *float64                            `protobuf:"fixed64,32,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount      *float64                            `protobuf:"fixed64,33,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64                            `protobuf:"fixed64,34,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	CodAmount        *float64                            `protobuf:"fixed64,35,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable       *float64                            `protobuf:"fixed64,36,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount         *float64                            `protobuf:"fixed64,37,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus    *int32                              `protobuf:"varint,38,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Ctm              *int64                              `protobuf:"varint,39,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor           *int64                              `protobuf:"varint,40,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters          string                              `protobuf:"bytes,41,opt,name=filters,proto3" json:"filters,omitempty"`
	SellerMemo       *string                             `protobuf:"bytes,42,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	CanSplit         *int32                              `protobuf:"varint,43,opt,name=can_split,json=canSplit,proto3,oneof" json:"can_split,omitempty"`
}

func (x *DeliverNoticeListRequest) Reset() {
	*x = DeliverNoticeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeListRequest) ProtoMessage() {}

func (x *DeliverNoticeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeListRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{30}
}

func (x *DeliverNoticeListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetGoodsList() []*DeliverNoticeGoodsDetailsRequest {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *DeliverNoticeListRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetNoticeType() int32 {
	if x != nil && x.NoticeType != nil {
		return *x.NoticeType
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetNoticeStatus() int32 {
	if x != nil && x.NoticeStatus != nil {
		return *x.NoticeStatus
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *DeliverNoticeListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *DeliverNoticeListRequest) GetCanSplit() int32 {
	if x != nil && x.CanSplit != nil {
		return *x.CanSplit
	}
	return 0
}

type DeliverNoticeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DeliverNoticeResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeliverNoticeListResponse) Reset() {
	*x = DeliverNoticeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeListResponse) ProtoMessage() {}

func (x *DeliverNoticeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeListResponse.ProtoReflect.Descriptor instead.
func (*DeliverNoticeListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{31}
}

func (x *DeliverNoticeListResponse) GetResults() []*DeliverNoticeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DeliverNoticeListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeliverNoticeOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeliverNoticeOptionsRequest) Reset() {
	*x = DeliverNoticeOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeOptionsRequest) ProtoMessage() {}

func (x *DeliverNoticeOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeOptionsRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeOptionsRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{32}
}

type DeliverNoticeOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeType     []*IntegerChoiceResponse `protobuf:"bytes,1,rep,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	CreateType    []*IntegerChoiceResponse `protobuf:"bytes,2,rep,name=create_type,json=createType,proto3" json:"create_type,omitempty"`
	NoticeType    []*IntegerChoiceResponse `protobuf:"bytes,3,rep,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	Type          []*IntegerChoiceResponse `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	NoticeStatus  []*IntegerChoiceResponse `protobuf:"bytes,5,rep,name=notice_status,json=noticeStatus,proto3" json:"notice_status,omitempty"`
	PayStatus     []*IntegerChoiceResponse `protobuf:"bytes,6,rep,name=pay_status,json=payStatus,proto3" json:"pay_status,omitempty"`
	DeliveryTerm  []*IntegerChoiceResponse `protobuf:"bytes,7,rep,name=delivery_term,json=deliveryTerm,proto3" json:"delivery_term,omitempty"`
	InvoiceStatus []*IntegerChoiceResponse `protobuf:"bytes,8,rep,name=invoice_status,json=invoiceStatus,proto3" json:"invoice_status,omitempty"`
}

func (x *DeliverNoticeOptionsResponse) Reset() {
	*x = DeliverNoticeOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeOptionsResponse) ProtoMessage() {}

func (x *DeliverNoticeOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeOptionsResponse.ProtoReflect.Descriptor instead.
func (*DeliverNoticeOptionsResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{33}
}

func (x *DeliverNoticeOptionsResponse) GetTradeType() []*IntegerChoiceResponse {
	if x != nil {
		return x.TradeType
	}
	return nil
}

func (x *DeliverNoticeOptionsResponse) GetCreateType() []*IntegerChoiceResponse {
	if x != nil {
		return x.CreateType
	}
	return nil
}

func (x *DeliverNoticeOptionsResponse) GetNoticeType() []*IntegerChoiceResponse {
	if x != nil {
		return x.NoticeType
	}
	return nil
}

func (x *DeliverNoticeOptionsResponse) GetType() []*IntegerChoiceResponse {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeliverNoticeOptionsResponse) GetNoticeStatus() []*IntegerChoiceResponse {
	if x != nil {
		return x.NoticeStatus
	}
	return nil
}

func (x *DeliverNoticeOptionsResponse) GetPayStatus() []*IntegerChoiceResponse {
	if x != nil {
		return x.PayStatus
	}
	return nil
}

func (x *DeliverNoticeOptionsResponse) GetDeliveryTerm() []*IntegerChoiceResponse {
	if x != nil {
		return x.DeliveryTerm
	}
	return nil
}

func (x *DeliverNoticeOptionsResponse) GetInvoiceStatus() []*IntegerChoiceResponse {
	if x != nil {
		return x.InvoiceStatus
	}
	return nil
}

type DeliverNoticePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodsList            []*DeliverNoticeGoodsDetailsRequest `protobuf:"bytes,3,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	XPartialUpdateFields []string                            `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Did                  string                              `protobuf:"bytes,5,opt,name=did,proto3" json:"did,omitempty"`
	TradeType            *int32                              `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	CreateName           *string                             `protobuf:"bytes,7,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType           *int32                              `protobuf:"varint,8,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	EditorId             *int32                              `protobuf:"varint,9,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName           *string                             `protobuf:"bytes,10,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	ApproveTime          *string                             `protobuf:"bytes,11,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName          *string                             `protobuf:"bytes,12,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons       *string                             `protobuf:"bytes,13,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons        *string                             `protobuf:"bytes,14,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons        *string                             `protobuf:"bytes,15,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	NoticeType           *int32                              `protobuf:"varint,16,opt,name=notice_type,json=noticeType,proto3,oneof" json:"notice_type,omitempty"`
	Type                 *int32                              `protobuf:"varint,17,opt,name=type,proto3,oneof" json:"type,omitempty"`
	NoticeStatus         *int32                              `protobuf:"varint,18,opt,name=notice_status,json=noticeStatus,proto3,oneof" json:"notice_status,omitempty"`
	PayStatus            *int32                              `protobuf:"varint,19,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime              *string                             `protobuf:"bytes,20,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm         *int32                              `protobuf:"varint,21,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	ShopNo               string                              `protobuf:"bytes,22,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName             string                              `protobuf:"bytes,23,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo          *string                             `protobuf:"bytes,24,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string                             `protobuf:"bytes,25,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName         *string                             `protobuf:"bytes,26,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince     *string                             `protobuf:"bytes,27,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *string                             `protobuf:"bytes,28,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *string                             `protobuf:"bytes,29,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string                             `protobuf:"bytes,30,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string                             `protobuf:"bytes,31,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	Paid                 *float64                            `protobuf:"fixed64,32,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	PostAmount           *float64                            `protobuf:"fixed64,33,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64                            `protobuf:"fixed64,34,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee            *float64                            `protobuf:"fixed64,35,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	CodAmount            *float64                            `protobuf:"fixed64,36,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable           *float64                            `protobuf:"fixed64,37,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount             *float64                            `protobuf:"fixed64,38,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus        *int32                              `protobuf:"varint,39,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Ctm                  *int64                              `protobuf:"varint,40,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor               *int64                              `protobuf:"varint,41,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters              string                              `protobuf:"bytes,42,opt,name=filters,proto3" json:"filters,omitempty"`
	SellerMemo           *string                             `protobuf:"bytes,43,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	CanSplit             *int32                              `protobuf:"varint,44,opt,name=can_split,json=canSplit,proto3,oneof" json:"can_split,omitempty"`
}

func (x *DeliverNoticePartialUpdateRequest) Reset() {
	*x = DeliverNoticePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticePartialUpdateRequest) ProtoMessage() {}

func (x *DeliverNoticePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{34}
}

func (x *DeliverNoticePartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetGoodsList() []*DeliverNoticeGoodsDetailsRequest {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *DeliverNoticePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *DeliverNoticePartialUpdateRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetNoticeType() int32 {
	if x != nil && x.NoticeType != nil {
		return *x.NoticeType
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetNoticeStatus() int32 {
	if x != nil && x.NoticeStatus != nil {
		return *x.NoticeStatus
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *DeliverNoticePartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *DeliverNoticePartialUpdateRequest) GetCanSplit() int32 {
	if x != nil && x.CanSplit != nil {
		return *x.CanSplit
	}
	return 0
}

type DeliverNoticeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodsList        []*DeliverNoticeGoodsDetailsRequest `protobuf:"bytes,3,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	Did              string                              `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	TradeType        *int32                              `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	CreateName       *string                             `protobuf:"bytes,6,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType       *int32                              `protobuf:"varint,7,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	EditorId         *int32                              `protobuf:"varint,8,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName       *string                             `protobuf:"bytes,9,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	ApproveTime      *string                             `protobuf:"bytes,10,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName      *string                             `protobuf:"bytes,11,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons   *string                             `protobuf:"bytes,12,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons    *string                             `protobuf:"bytes,13,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons    *string                             `protobuf:"bytes,14,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	NoticeType       *int32                              `protobuf:"varint,15,opt,name=notice_type,json=noticeType,proto3,oneof" json:"notice_type,omitempty"`
	Type             *int32                              `protobuf:"varint,16,opt,name=type,proto3,oneof" json:"type,omitempty"`
	NoticeStatus     *int32                              `protobuf:"varint,17,opt,name=notice_status,json=noticeStatus,proto3,oneof" json:"notice_status,omitempty"`
	PayStatus        *int32                              `protobuf:"varint,18,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string                             `protobuf:"bytes,19,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm     *int32                              `protobuf:"varint,20,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	ShopNo           string                              `protobuf:"bytes,21,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName         string                              `protobuf:"bytes,22,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo      *string                             `protobuf:"bytes,23,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName    *string                             `protobuf:"bytes,24,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName     *string                             `protobuf:"bytes,25,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string                             `protobuf:"bytes,26,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string                             `protobuf:"bytes,27,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string                             `protobuf:"bytes,28,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string                             `protobuf:"bytes,29,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string                             `protobuf:"bytes,30,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	Paid             *float64                            `protobuf:"fixed64,31,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	PostAmount       *float64                            `protobuf:"fixed64,32,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount      *float64                            `protobuf:"fixed64,33,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64                            `protobuf:"fixed64,34,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	CodAmount        *float64                            `protobuf:"fixed64,35,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable       *float64                            `protobuf:"fixed64,36,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount         *float64                            `protobuf:"fixed64,37,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus    *int32                              `protobuf:"varint,38,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Ctm              *int64                              `protobuf:"varint,39,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor           *int64                              `protobuf:"varint,40,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters          string                              `protobuf:"bytes,41,opt,name=filters,proto3" json:"filters,omitempty"`
	SellerMemo       *string                             `protobuf:"bytes,42,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	CanSplit         *int32                              `protobuf:"varint,43,opt,name=can_split,json=canSplit,proto3,oneof" json:"can_split,omitempty"`
}

func (x *DeliverNoticeRequest) Reset() {
	*x = DeliverNoticeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeRequest) ProtoMessage() {}

func (x *DeliverNoticeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{35}
}

func (x *DeliverNoticeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeRequest) GetGoodsList() []*DeliverNoticeGoodsDetailsRequest {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *DeliverNoticeRequest) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *DeliverNoticeRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *DeliverNoticeRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *DeliverNoticeRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *DeliverNoticeRequest) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *DeliverNoticeRequest) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *DeliverNoticeRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *DeliverNoticeRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *DeliverNoticeRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *DeliverNoticeRequest) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *DeliverNoticeRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *DeliverNoticeRequest) GetNoticeType() int32 {
	if x != nil && x.NoticeType != nil {
		return *x.NoticeType
	}
	return 0
}

func (x *DeliverNoticeRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DeliverNoticeRequest) GetNoticeStatus() int32 {
	if x != nil && x.NoticeStatus != nil {
		return *x.NoticeStatus
	}
	return 0
}

func (x *DeliverNoticeRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *DeliverNoticeRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *DeliverNoticeRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *DeliverNoticeRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *DeliverNoticeRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *DeliverNoticeRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *DeliverNoticeRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *DeliverNoticeRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *DeliverNoticeRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *DeliverNoticeRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *DeliverNoticeRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *DeliverNoticeRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *DeliverNoticeRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *DeliverNoticeRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *DeliverNoticeRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *DeliverNoticeRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *DeliverNoticeRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *DeliverNoticeRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *DeliverNoticeRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *DeliverNoticeRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *DeliverNoticeRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *DeliverNoticeRequest) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *DeliverNoticeRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *DeliverNoticeRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *DeliverNoticeRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *DeliverNoticeRequest) GetCanSplit() int32 {
	if x != nil && x.CanSplit != nil {
		return *x.CanSplit
	}
	return 0
}

type DeliverNoticeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeTypeName     string                                 `protobuf:"bytes,2,opt,name=trade_type_name,json=tradeTypeName,proto3" json:"trade_type_name,omitempty"`
	CreateTypeName    string                                 `protobuf:"bytes,3,opt,name=create_type_name,json=createTypeName,proto3" json:"create_type_name,omitempty"`
	NoticeTypeName    string                                 `protobuf:"bytes,4,opt,name=notice_type_name,json=noticeTypeName,proto3" json:"notice_type_name,omitempty"`
	TypeName          string                                 `protobuf:"bytes,5,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	NoticeStatusName  string                                 `protobuf:"bytes,6,opt,name=notice_status_name,json=noticeStatusName,proto3" json:"notice_status_name,omitempty"`
	PayStatusName     string                                 `protobuf:"bytes,7,opt,name=pay_status_name,json=payStatusName,proto3" json:"pay_status_name,omitempty"`
	DeliveryTermName  string                                 `protobuf:"bytes,8,opt,name=delivery_term_name,json=deliveryTermName,proto3" json:"delivery_term_name,omitempty"`
	InvoiceStatusName string                                 `protobuf:"bytes,9,opt,name=invoice_status_name,json=invoiceStatusName,proto3" json:"invoice_status_name,omitempty"`
	GoodsDetails      []*DeliverNoticeGoodsDetailsResponse   `protobuf:"bytes,10,rep,name=goods_details,json=goodsDetails,proto3" json:"goods_details,omitempty"`
	TradeDetails      []*SupplierTradeResponse               `protobuf:"bytes,11,rep,name=trade_details,json=tradeDetails,proto3" json:"trade_details,omitempty"`
	CreateTime        string                                 `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime        string                                 `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Did               string                                 `protobuf:"bytes,14,opt,name=did,proto3" json:"did,omitempty"`
	TradeType         *int32                                 `protobuf:"varint,15,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	CreateName        *string                                `protobuf:"bytes,16,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType        *int32                                 `protobuf:"varint,17,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	EditorId          *int32                                 `protobuf:"varint,18,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName        *string                                `protobuf:"bytes,19,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	ApproveTime       *string                                `protobuf:"bytes,20,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName       *string                                `protobuf:"bytes,21,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons    *string                                `protobuf:"bytes,22,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons     *string                                `protobuf:"bytes,23,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons     *string                                `protobuf:"bytes,24,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	NoticeType        *int32                                 `protobuf:"varint,25,opt,name=notice_type,json=noticeType,proto3,oneof" json:"notice_type,omitempty"`
	Type              *int32                                 `protobuf:"varint,26,opt,name=type,proto3,oneof" json:"type,omitempty"`
	NoticeStatus      *int32                                 `protobuf:"varint,27,opt,name=notice_status,json=noticeStatus,proto3,oneof" json:"notice_status,omitempty"`
	PayStatus         *int32                                 `protobuf:"varint,28,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime           *string                                `protobuf:"bytes,29,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm      *int32                                 `protobuf:"varint,30,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	ShopNo            string                                 `protobuf:"bytes,31,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName          string                                 `protobuf:"bytes,32,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo       *string                                `protobuf:"bytes,33,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName     *string                                `protobuf:"bytes,34,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName      *string                                `protobuf:"bytes,35,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince  *string                                `protobuf:"bytes,36,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity      *string                                `protobuf:"bytes,37,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict  *string                                `protobuf:"bytes,38,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress   *string                                `protobuf:"bytes,39,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile    *string                                `protobuf:"bytes,40,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	Paid              *float64                               `protobuf:"fixed64,41,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	PostAmount        *float64                               `protobuf:"fixed64,42,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount       *float64                               `protobuf:"fixed64,43,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee         *float64                               `protobuf:"fixed64,44,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	CodAmount         *float64                               `protobuf:"fixed64,45,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable        *float64                               `protobuf:"fixed64,46,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount          *float64                               `protobuf:"fixed64,47,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus     *int32                                 `protobuf:"varint,48,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	Ctm               *int64                                 `protobuf:"varint,49,opt,name=ctm,proto3,oneof" json:"ctm,omitempty"`
	Vendor            *int64                                 `protobuf:"varint,50,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	SellerMemo        *string                                `protobuf:"bytes,51,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	VendorName        string                                 `protobuf:"bytes,52,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	CtmName           string                                 `protobuf:"bytes,53,opt,name=ctm_name,json=ctmName,proto3" json:"ctm_name,omitempty"`
	CanSplit          *int32                                 `protobuf:"varint,54,opt,name=can_split,json=canSplit,proto3,oneof" json:"can_split,omitempty"`
	EpcStorage        []*DeliverNoticeEpcScanStorageResponse `protobuf:"bytes,55,rep,name=epc_storage,json=epcStorage,proto3" json:"epc_storage,omitempty"`
}

func (x *DeliverNoticeResponse) Reset() {
	*x = DeliverNoticeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeResponse) ProtoMessage() {}

func (x *DeliverNoticeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeResponse.ProtoReflect.Descriptor instead.
func (*DeliverNoticeResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{36}
}

func (x *DeliverNoticeResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliverNoticeResponse) GetTradeTypeName() string {
	if x != nil {
		return x.TradeTypeName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetCreateTypeName() string {
	if x != nil {
		return x.CreateTypeName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetNoticeTypeName() string {
	if x != nil {
		return x.NoticeTypeName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetNoticeStatusName() string {
	if x != nil {
		return x.NoticeStatusName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetPayStatusName() string {
	if x != nil {
		return x.PayStatusName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetDeliveryTermName() string {
	if x != nil {
		return x.DeliveryTermName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetInvoiceStatusName() string {
	if x != nil {
		return x.InvoiceStatusName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetGoodsDetails() []*DeliverNoticeGoodsDetailsResponse {
	if x != nil {
		return x.GoodsDetails
	}
	return nil
}

func (x *DeliverNoticeResponse) GetTradeDetails() []*SupplierTradeResponse {
	if x != nil {
		return x.TradeDetails
	}
	return nil
}

func (x *DeliverNoticeResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeliverNoticeResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeliverNoticeResponse) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *DeliverNoticeResponse) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *DeliverNoticeResponse) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *DeliverNoticeResponse) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *DeliverNoticeResponse) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *DeliverNoticeResponse) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *DeliverNoticeResponse) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *DeliverNoticeResponse) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *DeliverNoticeResponse) GetNoticeType() int32 {
	if x != nil && x.NoticeType != nil {
		return *x.NoticeType
	}
	return 0
}

func (x *DeliverNoticeResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DeliverNoticeResponse) GetNoticeStatus() int32 {
	if x != nil && x.NoticeStatus != nil {
		return *x.NoticeStatus
	}
	return 0
}

func (x *DeliverNoticeResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *DeliverNoticeResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *DeliverNoticeResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *DeliverNoticeResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *DeliverNoticeResponse) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *DeliverNoticeResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *DeliverNoticeResponse) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *DeliverNoticeResponse) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *DeliverNoticeResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *DeliverNoticeResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *DeliverNoticeResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *DeliverNoticeResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *DeliverNoticeResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *DeliverNoticeResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *DeliverNoticeResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *DeliverNoticeResponse) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *DeliverNoticeResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *DeliverNoticeResponse) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *DeliverNoticeResponse) GetCtm() int64 {
	if x != nil && x.Ctm != nil {
		return *x.Ctm
	}
	return 0
}

func (x *DeliverNoticeResponse) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *DeliverNoticeResponse) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *DeliverNoticeResponse) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetCtmName() string {
	if x != nil {
		return x.CtmName
	}
	return ""
}

func (x *DeliverNoticeResponse) GetCanSplit() int32 {
	if x != nil && x.CanSplit != nil {
		return *x.CanSplit
	}
	return 0
}

func (x *DeliverNoticeResponse) GetEpcStorage() []*DeliverNoticeEpcScanStorageResponse {
	if x != nil {
		return x.EpcStorage
	}
	return nil
}

type DeliverNoticeRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeliverNoticeRetrieveRequest) Reset() {
	*x = DeliverNoticeRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeRetrieveRequest) ProtoMessage() {}

func (x *DeliverNoticeRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeRetrieveRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{37}
}

func (x *DeliverNoticeRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeliverNoticeSupplierTradeProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	LogisticsNo string `protobuf:"bytes,2,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
	RfidUser    string `protobuf:"bytes,3,opt,name=rfid_user,json=rfidUser,proto3" json:"rfid_user,omitempty"`
}

func (x *DeliverNoticeSupplierTradeProcessRequest) Reset() {
	*x = DeliverNoticeSupplierTradeProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverNoticeSupplierTradeProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverNoticeSupplierTradeProcessRequest) ProtoMessage() {}

func (x *DeliverNoticeSupplierTradeProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverNoticeSupplierTradeProcessRequest.ProtoReflect.Descriptor instead.
func (*DeliverNoticeSupplierTradeProcessRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{38}
}

func (x *DeliverNoticeSupplierTradeProcessRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *DeliverNoticeSupplierTradeProcessRequest) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

func (x *DeliverNoticeSupplierTradeProcessRequest) GetRfidUser() string {
	if x != nil {
		return x.RfidUser
	}
	return ""
}

type DestroyGoodsDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyGoodsDeliverRequest) Reset() {
	*x = DestroyGoodsDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyGoodsDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyGoodsDeliverRequest) ProtoMessage() {}

func (x *DestroyGoodsDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyGoodsDeliverRequest.ProtoReflect.Descriptor instead.
func (*DestroyGoodsDeliverRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{39}
}

func (x *DestroyGoodsDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyServiceConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyServiceConfRequest) Reset() {
	*x = DestroyServiceConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyServiceConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyServiceConfRequest) ProtoMessage() {}

func (x *DestroyServiceConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyServiceConfRequest.ProtoReflect.Descriptor instead.
func (*DestroyServiceConfRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{40}
}

func (x *DestroyServiceConfRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyServiceConfSolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyServiceConfSolutionRequest) Reset() {
	*x = DestroyServiceConfSolutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyServiceConfSolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyServiceConfSolutionRequest) ProtoMessage() {}

func (x *DestroyServiceConfSolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyServiceConfSolutionRequest.ProtoReflect.Descriptor instead.
func (*DestroyServiceConfSolutionRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{41}
}

func (x *DestroyServiceConfSolutionRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyServiceConfWarehouseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyServiceConfWarehouseRequest) Reset() {
	*x = DestroyServiceConfWarehouseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyServiceConfWarehouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyServiceConfWarehouseRequest) ProtoMessage() {}

func (x *DestroyServiceConfWarehouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyServiceConfWarehouseRequest.ProtoReflect.Descriptor instead.
func (*DestroyServiceConfWarehouseRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{42}
}

func (x *DestroyServiceConfWarehouseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DestroyServiceReasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyServiceReasonRequest) Reset() {
	*x = DestroyServiceReasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyServiceReasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyServiceReasonRequest) ProtoMessage() {}

func (x *DestroyServiceReasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyServiceReasonRequest.ProtoReflect.Descriptor instead.
func (*DestroyServiceReasonRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{43}
}

func (x *DestroyServiceReasonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IntegerChoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *IntegerChoiceResponse) Reset() {
	*x = IntegerChoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerChoiceResponse) ProtoMessage() {}

func (x *IntegerChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerChoiceResponse.ProtoReflect.Descriptor instead.
func (*IntegerChoiceResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{44}
}

func (x *IntegerChoiceResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IntegerChoiceResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type KeyCtmCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AddressList     []*CtmVendorAddrRequest `protobuf:"bytes,3,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	Name            *string                 `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile          string                  `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Describe        *string                 `protobuf:"bytes,6,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	DwMemId         *string                 `protobuf:"bytes,7,opt,name=dw_memId,json=dwMemId,proto3,oneof" json:"dw_memId,omitempty"`
	PlatformId      *int32                  `protobuf:"varint,8,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformName    *string                 `protobuf:"bytes,9,opt,name=platform_name,json=platformName,proto3,oneof" json:"platform_name,omitempty"`
	DataWarehouseId *string                 `protobuf:"bytes,10,opt,name=data_warehouse_id,json=dataWarehouseId,proto3,oneof" json:"data_warehouse_id,omitempty"`
	CreatorId       *int32                  `protobuf:"varint,11,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName     *string                 `protobuf:"bytes,12,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	EditorId        *int32                  `protobuf:"varint,13,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName      *string                 `protobuf:"bytes,14,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	Filters         string                  `protobuf:"bytes,15,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *KeyCtmCreateRequest) Reset() {
	*x = KeyCtmCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyCtmCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyCtmCreateRequest) ProtoMessage() {}

func (x *KeyCtmCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyCtmCreateRequest.ProtoReflect.Descriptor instead.
func (*KeyCtmCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{45}
}

func (x *KeyCtmCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyCtmCreateRequest) GetAddressList() []*CtmVendorAddrRequest {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *KeyCtmCreateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetDwMemId() string {
	if x != nil && x.DwMemId != nil {
		return *x.DwMemId
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *KeyCtmCreateRequest) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetDataWarehouseId() string {
	if x != nil && x.DataWarehouseId != nil {
		return *x.DataWarehouseId
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *KeyCtmCreateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *KeyCtmCreateRequest) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *KeyCtmCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type KeyCtmDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KeyCtmDestroyRequest) Reset() {
	*x = KeyCtmDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyCtmDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyCtmDestroyRequest) ProtoMessage() {}

func (x *KeyCtmDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyCtmDestroyRequest.ProtoReflect.Descriptor instead.
func (*KeyCtmDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{46}
}

func (x *KeyCtmDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KeyCtmListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *KeyCtmListRequest) Reset() {
	*x = KeyCtmListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyCtmListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyCtmListRequest) ProtoMessage() {}

func (x *KeyCtmListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyCtmListRequest.ProtoReflect.Descriptor instead.
func (*KeyCtmListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{47}
}

func (x *KeyCtmListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type KeyCtmListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KeyCtmResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KeyCtmListResponse) Reset() {
	*x = KeyCtmListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyCtmListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyCtmListResponse) ProtoMessage() {}

func (x *KeyCtmListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyCtmListResponse.ProtoReflect.Descriptor instead.
func (*KeyCtmListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{48}
}

func (x *KeyCtmListResponse) GetResults() []*KeyCtmResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KeyCtmListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KeyCtmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CtmAddr         []*CtmVendorAddrResponse `protobuf:"bytes,2,rep,name=ctm_addr,json=ctmAddr,proto3" json:"ctm_addr,omitempty"`
	CreateTime      string                   `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string                   `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Name            *string                  `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile          string                   `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Describe        *string                  `protobuf:"bytes,7,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	DwMemId         *string                  `protobuf:"bytes,8,opt,name=dw_memId,json=dwMemId,proto3,oneof" json:"dw_memId,omitempty"`
	PlatformId      *int32                   `protobuf:"varint,9,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformName    *string                  `protobuf:"bytes,10,opt,name=platform_name,json=platformName,proto3,oneof" json:"platform_name,omitempty"`
	DataWarehouseId *string                  `protobuf:"bytes,11,opt,name=data_warehouse_id,json=dataWarehouseId,proto3,oneof" json:"data_warehouse_id,omitempty"`
	CreatorId       *int32                   `protobuf:"varint,12,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName     *string                  `protobuf:"bytes,13,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	EditorId        *int32                   `protobuf:"varint,14,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName      *string                  `protobuf:"bytes,15,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
}

func (x *KeyCtmResponse) Reset() {
	*x = KeyCtmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyCtmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyCtmResponse) ProtoMessage() {}

func (x *KeyCtmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyCtmResponse.ProtoReflect.Descriptor instead.
func (*KeyCtmResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{49}
}

func (x *KeyCtmResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyCtmResponse) GetCtmAddr() []*CtmVendorAddrResponse {
	if x != nil {
		return x.CtmAddr
	}
	return nil
}

func (x *KeyCtmResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *KeyCtmResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *KeyCtmResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *KeyCtmResponse) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *KeyCtmResponse) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *KeyCtmResponse) GetDwMemId() string {
	if x != nil && x.DwMemId != nil {
		return *x.DwMemId
	}
	return ""
}

func (x *KeyCtmResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *KeyCtmResponse) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *KeyCtmResponse) GetDataWarehouseId() string {
	if x != nil && x.DataWarehouseId != nil {
		return *x.DataWarehouseId
	}
	return ""
}

func (x *KeyCtmResponse) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *KeyCtmResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *KeyCtmResponse) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *KeyCtmResponse) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

type KeyCtmRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KeyCtmRetrieveRequest) Reset() {
	*x = KeyCtmRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyCtmRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyCtmRetrieveRequest) ProtoMessage() {}

func (x *KeyCtmRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyCtmRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KeyCtmRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{50}
}

func (x *KeyCtmRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KeyCtmUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AddressList          []*CtmVendorAddrRequest `protobuf:"bytes,3,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	XPartialUpdateFields []string                `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 *string                 `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile               string                  `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Describe             *string                 `protobuf:"bytes,7,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	DwMemId              *string                 `protobuf:"bytes,8,opt,name=dw_memId,json=dwMemId,proto3,oneof" json:"dw_memId,omitempty"`
	PlatformId           *int32                  `protobuf:"varint,9,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformName         *string                 `protobuf:"bytes,10,opt,name=platform_name,json=platformName,proto3,oneof" json:"platform_name,omitempty"`
	DataWarehouseId      *string                 `protobuf:"bytes,11,opt,name=data_warehouse_id,json=dataWarehouseId,proto3,oneof" json:"data_warehouse_id,omitempty"`
	CreatorId            *int32                  `protobuf:"varint,12,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName          *string                 `protobuf:"bytes,13,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	EditorId             *int32                  `protobuf:"varint,14,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName           *string                 `protobuf:"bytes,15,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	Filters              string                  `protobuf:"bytes,16,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *KeyCtmUpdateRequest) Reset() {
	*x = KeyCtmUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyCtmUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyCtmUpdateRequest) ProtoMessage() {}

func (x *KeyCtmUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyCtmUpdateRequest.ProtoReflect.Descriptor instead.
func (*KeyCtmUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{51}
}

func (x *KeyCtmUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyCtmUpdateRequest) GetAddressList() []*CtmVendorAddrRequest {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *KeyCtmUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KeyCtmUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetDwMemId() string {
	if x != nil && x.DwMemId != nil {
		return *x.DwMemId
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *KeyCtmUpdateRequest) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetDataWarehouseId() string {
	if x != nil && x.DataWarehouseId != nil {
		return *x.DataWarehouseId
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *KeyCtmUpdateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *KeyCtmUpdateRequest) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *KeyCtmUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type KeyVendorCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AddressList     []*CtmVendorAddrRequest  `protobuf:"bytes,3,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	OperatorList    []*VendorOperatorRequest `protobuf:"bytes,4,rep,name=operator_list,json=operatorList,proto3" json:"operator_list,omitempty"`
	Name            *string                  `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile          string                   `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Describe        *string                  `protobuf:"bytes,7,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	PlatformId      *int32                   `protobuf:"varint,8,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformName    *string                  `protobuf:"bytes,9,opt,name=platform_name,json=platformName,proto3,oneof" json:"platform_name,omitempty"`
	DataWarehouseId *string                  `protobuf:"bytes,10,opt,name=data_warehouse_id,json=dataWarehouseId,proto3,oneof" json:"data_warehouse_id,omitempty"`
	CreatorId       *int32                   `protobuf:"varint,11,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName     *string                  `protobuf:"bytes,12,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	EditorId        *int32                   `protobuf:"varint,13,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName      *string                  `protobuf:"bytes,14,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	ShopNo          *string                  `protobuf:"bytes,15,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName        *string                  `protobuf:"bytes,16,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo     *string                  `protobuf:"bytes,17,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName   *string                  `protobuf:"bytes,18,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	Filters         string                   `protobuf:"bytes,19,opt,name=filters,proto3" json:"filters,omitempty"`
	VendorCode      *string                  `protobuf:"bytes,20,opt,name=vendor_code,json=vendorCode,proto3,oneof" json:"vendor_code,omitempty"`
}

func (x *KeyVendorCreateRequest) Reset() {
	*x = KeyVendorCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVendorCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVendorCreateRequest) ProtoMessage() {}

func (x *KeyVendorCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVendorCreateRequest.ProtoReflect.Descriptor instead.
func (*KeyVendorCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{52}
}

func (x *KeyVendorCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyVendorCreateRequest) GetAddressList() []*CtmVendorAddrRequest {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *KeyVendorCreateRequest) GetOperatorList() []*VendorOperatorRequest {
	if x != nil {
		return x.OperatorList
	}
	return nil
}

func (x *KeyVendorCreateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *KeyVendorCreateRequest) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetDataWarehouseId() string {
	if x != nil && x.DataWarehouseId != nil {
		return *x.DataWarehouseId
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *KeyVendorCreateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *KeyVendorCreateRequest) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *KeyVendorCreateRequest) GetVendorCode() string {
	if x != nil && x.VendorCode != nil {
		return *x.VendorCode
	}
	return ""
}

type KeyVendorDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KeyVendorDestroyRequest) Reset() {
	*x = KeyVendorDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVendorDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVendorDestroyRequest) ProtoMessage() {}

func (x *KeyVendorDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVendorDestroyRequest.ProtoReflect.Descriptor instead.
func (*KeyVendorDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{53}
}

func (x *KeyVendorDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KeyVendorListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *KeyVendorListRequest) Reset() {
	*x = KeyVendorListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVendorListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVendorListRequest) ProtoMessage() {}

func (x *KeyVendorListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVendorListRequest.ProtoReflect.Descriptor instead.
func (*KeyVendorListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{54}
}

func (x *KeyVendorListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type KeyVendorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*KeyVendorResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *KeyVendorListResponse) Reset() {
	*x = KeyVendorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVendorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVendorListResponse) ProtoMessage() {}

func (x *KeyVendorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVendorListResponse.ProtoReflect.Descriptor instead.
func (*KeyVendorListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{55}
}

func (x *KeyVendorListResponse) GetResults() []*KeyVendorResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KeyVendorListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type KeyVendorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VendorAddr      []*CtmVendorAddrResponse  `protobuf:"bytes,2,rep,name=vendor_addr,json=vendorAddr,proto3" json:"vendor_addr,omitempty"`
	VendorOperator  []*VendorOperatorResponse `protobuf:"bytes,3,rep,name=vendor_operator,json=vendorOperator,proto3" json:"vendor_operator,omitempty"`
	CreateTime      string                    `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string                    `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Name            *string                   `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile          string                    `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Describe        *string                   `protobuf:"bytes,8,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	PlatformId      *int32                    `protobuf:"varint,9,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformName    *string                   `protobuf:"bytes,10,opt,name=platform_name,json=platformName,proto3,oneof" json:"platform_name,omitempty"`
	DataWarehouseId *string                   `protobuf:"bytes,11,opt,name=data_warehouse_id,json=dataWarehouseId,proto3,oneof" json:"data_warehouse_id,omitempty"`
	CreatorId       *int32                    `protobuf:"varint,12,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName     *string                   `protobuf:"bytes,13,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	EditorId        *int32                    `protobuf:"varint,14,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName      *string                   `protobuf:"bytes,15,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	ShopNo          *string                   `protobuf:"bytes,16,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName        *string                   `protobuf:"bytes,17,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo     *string                   `protobuf:"bytes,18,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName   *string                   `protobuf:"bytes,19,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	VendorCode      *string                   `protobuf:"bytes,20,opt,name=vendor_code,json=vendorCode,proto3,oneof" json:"vendor_code,omitempty"`
}

func (x *KeyVendorResponse) Reset() {
	*x = KeyVendorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVendorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVendorResponse) ProtoMessage() {}

func (x *KeyVendorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVendorResponse.ProtoReflect.Descriptor instead.
func (*KeyVendorResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{56}
}

func (x *KeyVendorResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyVendorResponse) GetVendorAddr() []*CtmVendorAddrResponse {
	if x != nil {
		return x.VendorAddr
	}
	return nil
}

func (x *KeyVendorResponse) GetVendorOperator() []*VendorOperatorResponse {
	if x != nil {
		return x.VendorOperator
	}
	return nil
}

func (x *KeyVendorResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *KeyVendorResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *KeyVendorResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *KeyVendorResponse) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *KeyVendorResponse) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *KeyVendorResponse) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *KeyVendorResponse) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *KeyVendorResponse) GetDataWarehouseId() string {
	if x != nil && x.DataWarehouseId != nil {
		return *x.DataWarehouseId
	}
	return ""
}

func (x *KeyVendorResponse) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *KeyVendorResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *KeyVendorResponse) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *KeyVendorResponse) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *KeyVendorResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *KeyVendorResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *KeyVendorResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *KeyVendorResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *KeyVendorResponse) GetVendorCode() string {
	if x != nil && x.VendorCode != nil {
		return *x.VendorCode
	}
	return ""
}

type KeyVendorRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KeyVendorRetrieveRequest) Reset() {
	*x = KeyVendorRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVendorRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVendorRetrieveRequest) ProtoMessage() {}

func (x *KeyVendorRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVendorRetrieveRequest.ProtoReflect.Descriptor instead.
func (*KeyVendorRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{57}
}

func (x *KeyVendorRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KeyVendorUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AddressList          []*CtmVendorAddrRequest  `protobuf:"bytes,3,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	OperatorList         []*VendorOperatorRequest `protobuf:"bytes,4,rep,name=operator_list,json=operatorList,proto3" json:"operator_list,omitempty"`
	XPartialUpdateFields []string                 `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Name                 *string                  `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Mobile               string                   `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Describe             *string                  `protobuf:"bytes,8,opt,name=describe,proto3,oneof" json:"describe,omitempty"`
	PlatformId           *int32                   `protobuf:"varint,9,opt,name=platform_id,json=platformId,proto3,oneof" json:"platform_id,omitempty"`
	PlatformName         *string                  `protobuf:"bytes,10,opt,name=platform_name,json=platformName,proto3,oneof" json:"platform_name,omitempty"`
	DataWarehouseId      *string                  `protobuf:"bytes,11,opt,name=data_warehouse_id,json=dataWarehouseId,proto3,oneof" json:"data_warehouse_id,omitempty"`
	CreatorId            *int32                   `protobuf:"varint,12,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName          *string                  `protobuf:"bytes,13,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	EditorId             *int32                   `protobuf:"varint,14,opt,name=editor_id,json=editorId,proto3,oneof" json:"editor_id,omitempty"`
	EditorName           *string                  `protobuf:"bytes,15,opt,name=editor_name,json=editorName,proto3,oneof" json:"editor_name,omitempty"`
	ShopNo               *string                  `protobuf:"bytes,16,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *string                  `protobuf:"bytes,17,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo          *string                  `protobuf:"bytes,18,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string                  `protobuf:"bytes,19,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	Filters              string                   `protobuf:"bytes,20,opt,name=filters,proto3" json:"filters,omitempty"`
	VendorCode           *string                  `protobuf:"bytes,21,opt,name=vendor_code,json=vendorCode,proto3,oneof" json:"vendor_code,omitempty"`
}

func (x *KeyVendorUpdateRequest) Reset() {
	*x = KeyVendorUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyVendorUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVendorUpdateRequest) ProtoMessage() {}

func (x *KeyVendorUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVendorUpdateRequest.ProtoReflect.Descriptor instead.
func (*KeyVendorUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{58}
}

func (x *KeyVendorUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyVendorUpdateRequest) GetAddressList() []*CtmVendorAddrRequest {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *KeyVendorUpdateRequest) GetOperatorList() []*VendorOperatorRequest {
	if x != nil {
		return x.OperatorList
	}
	return nil
}

func (x *KeyVendorUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *KeyVendorUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetDescribe() string {
	if x != nil && x.Describe != nil {
		return *x.Describe
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetPlatformId() int32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *KeyVendorUpdateRequest) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetDataWarehouseId() string {
	if x != nil && x.DataWarehouseId != nil {
		return *x.DataWarehouseId
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *KeyVendorUpdateRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetEditorId() int32 {
	if x != nil && x.EditorId != nil {
		return *x.EditorId
	}
	return 0
}

func (x *KeyVendorUpdateRequest) GetEditorName() string {
	if x != nil && x.EditorName != nil {
		return *x.EditorName
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *KeyVendorUpdateRequest) GetVendorCode() string {
	if x != nil && x.VendorCode != nil {
		return *x.VendorCode
	}
	return ""
}

type LabelNumberValueListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LabelNumberValueListResponse) Reset() {
	*x = LabelNumberValueListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueListResponse) ProtoMessage() {}

func (x *LabelNumberValueListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueListResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{59}
}

func (x *LabelNumberValueListResponse) GetResults() []*LabelNumberValueResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *LabelNumberValueListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LabelNumberValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label *string `protobuf:"bytes,2,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Count *int32  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *LabelNumberValueResponse) Reset() {
	*x = LabelNumberValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueResponse) ProtoMessage() {}

func (x *LabelNumberValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{60}
}

func (x *LabelNumberValueResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LabelNumberValueResponse) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *LabelNumberValueResponse) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ListGoodsDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListGoodsDeliverRequest) Reset() {
	*x = ListGoodsDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGoodsDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGoodsDeliverRequest) ProtoMessage() {}

func (x *ListGoodsDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGoodsDeliverRequest.ProtoReflect.Descriptor instead.
func (*ListGoodsDeliverRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{61}
}

func (x *ListGoodsDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListServiceConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters   string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	PlatName  string  `protobuf:"bytes,3,opt,name=plat_name,json=platName,proto3" json:"plat_name,omitempty"`
	ConfName  *string `protobuf:"bytes,4,opt,name=conf_name,json=confName,proto3,oneof" json:"conf_name,omitempty"`
	TradeType int32   `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Type      int32   `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListServiceConfRequest) Reset() {
	*x = ListServiceConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceConfRequest) ProtoMessage() {}

func (x *ListServiceConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceConfRequest.ProtoReflect.Descriptor instead.
func (*ListServiceConfRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{62}
}

func (x *ListServiceConfRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListServiceConfRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ListServiceConfRequest) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *ListServiceConfRequest) GetConfName() string {
	if x != nil && x.ConfName != nil {
		return *x.ConfName
	}
	return ""
}

func (x *ListServiceConfRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *ListServiceConfRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ListServiceConfSolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListServiceConfSolutionRequest) Reset() {
	*x = ListServiceConfSolutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceConfSolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceConfSolutionRequest) ProtoMessage() {}

func (x *ListServiceConfSolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceConfSolutionRequest.ProtoReflect.Descriptor instead.
func (*ListServiceConfSolutionRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{63}
}

func (x *ListServiceConfSolutionRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type ListServiceConfWarehouseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ShopNo          string  `protobuf:"bytes,3,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName        string  `protobuf:"bytes,4,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo     string  `protobuf:"bytes,5,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName   string  `protobuf:"bytes,6,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ConfirmOvertime int32   `protobuf:"varint,7,opt,name=confirm_overtime,json=confirmOvertime,proto3" json:"confirm_overtime,omitempty"`
	FinishOvertime  int32   `protobuf:"varint,8,opt,name=finish_overtime,json=finishOvertime,proto3" json:"finish_overtime,omitempty"`
	ExpireTime      int32   `protobuf:"varint,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	AutoApprove     bool    `protobuf:"varint,10,opt,name=auto_approve,json=autoApprove,proto3" json:"auto_approve,omitempty"`
	CanReturn       bool    `protobuf:"varint,11,opt,name=can_return,json=canReturn,proto3" json:"can_return,omitempty"`
	WarehouseInNo   *string `protobuf:"bytes,12,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName *string `protobuf:"bytes,13,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OperatorId      *int32  `protobuf:"varint,14,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName    *string `protobuf:"bytes,15,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Parent          int64   `protobuf:"varint,16,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListServiceConfWarehouseRequest) Reset() {
	*x = ListServiceConfWarehouseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceConfWarehouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceConfWarehouseRequest) ProtoMessage() {}

func (x *ListServiceConfWarehouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceConfWarehouseRequest.ProtoReflect.Descriptor instead.
func (*ListServiceConfWarehouseRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{64}
}

func (x *ListServiceConfWarehouseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListServiceConfWarehouseRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetConfirmOvertime() int32 {
	if x != nil {
		return x.ConfirmOvertime
	}
	return 0
}

func (x *ListServiceConfWarehouseRequest) GetFinishOvertime() int32 {
	if x != nil {
		return x.FinishOvertime
	}
	return 0
}

func (x *ListServiceConfWarehouseRequest) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ListServiceConfWarehouseRequest) GetAutoApprove() bool {
	if x != nil {
		return x.AutoApprove
	}
	return false
}

func (x *ListServiceConfWarehouseRequest) GetCanReturn() bool {
	if x != nil {
		return x.CanReturn
	}
	return false
}

func (x *ListServiceConfWarehouseRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *ListServiceConfWarehouseRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *ListServiceConfWarehouseRequest) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

type ListServiceReasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters    string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	TradeType  int32   `protobuf:"varint,3,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ReasonType *int32  `protobuf:"varint,4,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	ReasonCode int32   `protobuf:"varint,5,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName string  `protobuf:"bytes,6,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ReasonDesc *string `protobuf:"bytes,7,opt,name=reason_desc,json=reasonDesc,proto3,oneof" json:"reason_desc,omitempty"`
	WithRemark *bool   `protobuf:"varint,8,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsValid    bool    `protobuf:"varint,9,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsReserved *bool   `protobuf:"varint,10,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	Parent     *int64  `protobuf:"varint,11,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ListServiceReasonRequest) Reset() {
	*x = ListServiceReasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceReasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceReasonRequest) ProtoMessage() {}

func (x *ListServiceReasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceReasonRequest.ProtoReflect.Descriptor instead.
func (*ListServiceReasonRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{65}
}

func (x *ListServiceReasonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListServiceReasonRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ListServiceReasonRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *ListServiceReasonRequest) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *ListServiceReasonRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *ListServiceReasonRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *ListServiceReasonRequest) GetReasonDesc() string {
	if x != nil && x.ReasonDesc != nil {
		return *x.ReasonDesc
	}
	return ""
}

func (x *ListServiceReasonRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *ListServiceReasonRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ListServiceReasonRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *ListServiceReasonRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type NoticeNextDidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoticeNextDidRequest) Reset() {
	*x = NoticeNextDidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeNextDidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeNextDidRequest) ProtoMessage() {}

func (x *NoticeNextDidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeNextDidRequest.ProtoReflect.Descriptor instead.
func (*NoticeNextDidRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{66}
}

type NoticeNextDidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextDid string `protobuf:"bytes,1,opt,name=next_did,json=nextDid,proto3" json:"next_did,omitempty"`
}

func (x *NoticeNextDidResponse) Reset() {
	*x = NoticeNextDidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeNextDidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeNextDidResponse) ProtoMessage() {}

func (x *NoticeNextDidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeNextDidResponse.ProtoReflect.Descriptor instead.
func (*NoticeNextDidResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{67}
}

func (x *NoticeNextDidResponse) GetNextDid() string {
	if x != nil {
		return x.NextDid
	}
	return ""
}

type NoticeStatusCountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Results []*NoticeStatusCountResponse `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *NoticeStatusCountListResponse) Reset() {
	*x = NoticeStatusCountListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeStatusCountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeStatusCountListResponse) ProtoMessage() {}

func (x *NoticeStatusCountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeStatusCountListResponse.ProtoReflect.Descriptor instead.
func (*NoticeStatusCountListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{68}
}

func (x *NoticeStatusCountListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NoticeStatusCountListResponse) GetResults() []*NoticeStatusCountResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type NoticeStatusCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeType *int32 `protobuf:"varint,1,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	VendorId  *int64 `protobuf:"varint,2,opt,name=vendor_id,json=vendorId,proto3,oneof" json:"vendor_id,omitempty"`
}

func (x *NoticeStatusCountRequest) Reset() {
	*x = NoticeStatusCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeStatusCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeStatusCountRequest) ProtoMessage() {}

func (x *NoticeStatusCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeStatusCountRequest.ProtoReflect.Descriptor instead.
func (*NoticeStatusCountRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{69}
}

func (x *NoticeStatusCountRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *NoticeStatusCountRequest) GetVendorId() int64 {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return 0
}

type NoticeStatusCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	NoticeStatus int32 `protobuf:"varint,3,opt,name=notice_status,json=noticeStatus,proto3" json:"notice_status,omitempty"`
}

func (x *NoticeStatusCountResponse) Reset() {
	*x = NoticeStatusCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeStatusCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeStatusCountResponse) ProtoMessage() {}

func (x *NoticeStatusCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeStatusCountResponse.ProtoReflect.Descriptor instead.
func (*NoticeStatusCountResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{70}
}

func (x *NoticeStatusCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NoticeStatusCountResponse) GetNoticeStatus() int32 {
	if x != nil {
		return x.NoticeStatus
	}
	return 0
}

type ObjectComplainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	GoodsId             *string `protobuf:"bytes,3,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName           *string `protobuf:"bytes,4,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu            *string `protobuf:"bytes,5,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo             *string `protobuf:"bytes,6,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string `protobuf:"bytes,7,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName            *string `protobuf:"bytes,8,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode            *string `protobuf:"bytes,9,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode        *string `protobuf:"bytes,10,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	PlatformOrder       *string `protobuf:"bytes,11,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	OmsOrder            *string `protobuf:"bytes,12,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	PlatformRefund      *string `protobuf:"bytes,13,opt,name=platform_refund,json=platformRefund,proto3,oneof" json:"platform_refund,omitempty"`
	OmsRefund           *string `protobuf:"bytes,14,opt,name=oms_refund,json=omsRefund,proto3,oneof" json:"oms_refund,omitempty"`
	OmsPurchase         *string `protobuf:"bytes,15,opt,name=oms_purchase,json=omsPurchase,proto3,oneof" json:"oms_purchase,omitempty"`
	PartsCode           *string `protobuf:"bytes,16,opt,name=parts_code,json=partsCode,proto3,oneof" json:"parts_code,omitempty"`
	PartsName           *string `protobuf:"bytes,17,opt,name=parts_name,json=partsName,proto3,oneof" json:"parts_name,omitempty"`
	ComplainReasonsCode *string `protobuf:"bytes,18,opt,name=complain_reasons_code,json=complainReasonsCode,proto3,oneof" json:"complain_reasons_code,omitempty"`
	ComplainReasons     *string `protobuf:"bytes,19,opt,name=complain_reasons,json=complainReasons,proto3,oneof" json:"complain_reasons,omitempty"`
	ComplainDesc        *string `protobuf:"bytes,20,opt,name=complain_desc,json=complainDesc,proto3,oneof" json:"complain_desc,omitempty"`
	MediaPath           *string `protobuf:"bytes,21,opt,name=media_path,json=mediaPath,proto3,oneof" json:"media_path,omitempty"`
	Service             *int64  `protobuf:"varint,22,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ObjectComplainRequest) Reset() {
	*x = ObjectComplainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectComplainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectComplainRequest) ProtoMessage() {}

func (x *ObjectComplainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectComplainRequest.ProtoReflect.Descriptor instead.
func (*ObjectComplainRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{71}
}

func (x *ObjectComplainRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ObjectComplainRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ObjectComplainRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *ObjectComplainRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ObjectComplainRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ObjectComplainRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ObjectComplainRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *ObjectComplainRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ObjectComplainRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *ObjectComplainRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *ObjectComplainRequest) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *ObjectComplainRequest) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *ObjectComplainRequest) GetPlatformRefund() string {
	if x != nil && x.PlatformRefund != nil {
		return *x.PlatformRefund
	}
	return ""
}

func (x *ObjectComplainRequest) GetOmsRefund() string {
	if x != nil && x.OmsRefund != nil {
		return *x.OmsRefund
	}
	return ""
}

func (x *ObjectComplainRequest) GetOmsPurchase() string {
	if x != nil && x.OmsPurchase != nil {
		return *x.OmsPurchase
	}
	return ""
}

func (x *ObjectComplainRequest) GetPartsCode() string {
	if x != nil && x.PartsCode != nil {
		return *x.PartsCode
	}
	return ""
}

func (x *ObjectComplainRequest) GetPartsName() string {
	if x != nil && x.PartsName != nil {
		return *x.PartsName
	}
	return ""
}

func (x *ObjectComplainRequest) GetComplainReasonsCode() string {
	if x != nil && x.ComplainReasonsCode != nil {
		return *x.ComplainReasonsCode
	}
	return ""
}

func (x *ObjectComplainRequest) GetComplainReasons() string {
	if x != nil && x.ComplainReasons != nil {
		return *x.ComplainReasons
	}
	return ""
}

func (x *ObjectComplainRequest) GetComplainDesc() string {
	if x != nil && x.ComplainDesc != nil {
		return *x.ComplainDesc
	}
	return ""
}

func (x *ObjectComplainRequest) GetMediaPath() string {
	if x != nil && x.MediaPath != nil {
		return *x.MediaPath
	}
	return ""
}

func (x *ObjectComplainRequest) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type ObjectComplainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime          string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime          string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	GoodsId             *string `protobuf:"bytes,4,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName           *string `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu            *string `protobuf:"bytes,6,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo             *string `protobuf:"bytes,7,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo              *string `protobuf:"bytes,8,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecName            *string `protobuf:"bytes,9,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode            *string `protobuf:"bytes,10,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode        *string `protobuf:"bytes,11,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	PlatformOrder       *string `protobuf:"bytes,12,opt,name=platform_order,json=platformOrder,proto3,oneof" json:"platform_order,omitempty"`
	OmsOrder            *string `protobuf:"bytes,13,opt,name=oms_order,json=omsOrder,proto3,oneof" json:"oms_order,omitempty"`
	PlatformRefund      *string `protobuf:"bytes,14,opt,name=platform_refund,json=platformRefund,proto3,oneof" json:"platform_refund,omitempty"`
	OmsRefund           *string `protobuf:"bytes,15,opt,name=oms_refund,json=omsRefund,proto3,oneof" json:"oms_refund,omitempty"`
	OmsPurchase         *string `protobuf:"bytes,16,opt,name=oms_purchase,json=omsPurchase,proto3,oneof" json:"oms_purchase,omitempty"`
	PartsCode           *string `protobuf:"bytes,17,opt,name=parts_code,json=partsCode,proto3,oneof" json:"parts_code,omitempty"`
	PartsName           *string `protobuf:"bytes,18,opt,name=parts_name,json=partsName,proto3,oneof" json:"parts_name,omitempty"`
	ComplainReasonsCode *string `protobuf:"bytes,19,opt,name=complain_reasons_code,json=complainReasonsCode,proto3,oneof" json:"complain_reasons_code,omitempty"`
	ComplainReasons     *string `protobuf:"bytes,20,opt,name=complain_reasons,json=complainReasons,proto3,oneof" json:"complain_reasons,omitempty"`
	ComplainDesc        *string `protobuf:"bytes,21,opt,name=complain_desc,json=complainDesc,proto3,oneof" json:"complain_desc,omitempty"`
	MediaPath           *string `protobuf:"bytes,22,opt,name=media_path,json=mediaPath,proto3,oneof" json:"media_path,omitempty"`
	Service             *int64  `protobuf:"varint,23,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ObjectComplainResponse) Reset() {
	*x = ObjectComplainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectComplainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectComplainResponse) ProtoMessage() {}

func (x *ObjectComplainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectComplainResponse.ProtoReflect.Descriptor instead.
func (*ObjectComplainResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{72}
}

func (x *ObjectComplainResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ObjectComplainResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ObjectComplainResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ObjectComplainResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *ObjectComplainResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ObjectComplainResponse) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ObjectComplainResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ObjectComplainResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *ObjectComplainResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ObjectComplainResponse) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *ObjectComplainResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *ObjectComplainResponse) GetPlatformOrder() string {
	if x != nil && x.PlatformOrder != nil {
		return *x.PlatformOrder
	}
	return ""
}

func (x *ObjectComplainResponse) GetOmsOrder() string {
	if x != nil && x.OmsOrder != nil {
		return *x.OmsOrder
	}
	return ""
}

func (x *ObjectComplainResponse) GetPlatformRefund() string {
	if x != nil && x.PlatformRefund != nil {
		return *x.PlatformRefund
	}
	return ""
}

func (x *ObjectComplainResponse) GetOmsRefund() string {
	if x != nil && x.OmsRefund != nil {
		return *x.OmsRefund
	}
	return ""
}

func (x *ObjectComplainResponse) GetOmsPurchase() string {
	if x != nil && x.OmsPurchase != nil {
		return *x.OmsPurchase
	}
	return ""
}

func (x *ObjectComplainResponse) GetPartsCode() string {
	if x != nil && x.PartsCode != nil {
		return *x.PartsCode
	}
	return ""
}

func (x *ObjectComplainResponse) GetPartsName() string {
	if x != nil && x.PartsName != nil {
		return *x.PartsName
	}
	return ""
}

func (x *ObjectComplainResponse) GetComplainReasonsCode() string {
	if x != nil && x.ComplainReasonsCode != nil {
		return *x.ComplainReasonsCode
	}
	return ""
}

func (x *ObjectComplainResponse) GetComplainReasons() string {
	if x != nil && x.ComplainReasons != nil {
		return *x.ComplainReasons
	}
	return ""
}

func (x *ObjectComplainResponse) GetComplainDesc() string {
	if x != nil && x.ComplainDesc != nil {
		return *x.ComplainDesc
	}
	return ""
}

func (x *ObjectComplainResponse) GetMediaPath() string {
	if x != nil && x.MediaPath != nil {
		return *x.MediaPath
	}
	return ""
}

func (x *ObjectComplainResponse) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type PurchaseDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId           int32    `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	WmsOuterNo      *string  `protobuf:"bytes,2,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	SpecNo          *string  `protobuf:"bytes,3,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	BrandName       *string  `protobuf:"bytes,4,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	Num             *float64 `protobuf:"fixed64,5,opt,name=num,proto3,oneof" json:"num,omitempty"`
	Price           *float64 `protobuf:"fixed64,6,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Discount        *float64 `protobuf:"fixed64,7,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	Tax             *float64 `protobuf:"fixed64,8,opt,name=tax,proto3,oneof" json:"tax,omitempty"`
	TaxPrice        *float64 `protobuf:"fixed64,9,opt,name=tax_price,json=taxPrice,proto3,oneof" json:"tax_price,omitempty"`
	TaxAmount       *float64 `protobuf:"fixed64,10,opt,name=tax_amount,json=taxAmount,proto3,oneof" json:"tax_amount,omitempty"`
	Amount          *float64 `protobuf:"fixed64,11,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	StockinAmount   *float64 `protobuf:"fixed64,12,opt,name=stockin_amount,json=stockinAmount,proto3,oneof" json:"stockin_amount,omitempty"`
	StockinNum      *float64 `protobuf:"fixed64,13,opt,name=stockin_num,json=stockinNum,proto3,oneof" json:"stockin_num,omitempty"`
	Prop1           *string  `protobuf:"bytes,14,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2           *string  `protobuf:"bytes,15,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Remark          *string  `protobuf:"bytes,16,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified        *string  `protobuf:"bytes,17,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ProviderGoodsNo *string  `protobuf:"bytes,18,opt,name=provider_goods_no,json=providerGoodsNo,proto3,oneof" json:"provider_goods_no,omitempty"`
	GoodsNo         *string  `protobuf:"bytes,19,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName       *string  `protobuf:"bytes,20,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	ShortName       *string  `protobuf:"bytes,21,opt,name=short_name,json=shortName,proto3,oneof" json:"short_name,omitempty"`
	SpecName        *string  `protobuf:"bytes,22,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecCode        *string  `protobuf:"bytes,23,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	BaseUnit        *string  `protobuf:"bytes,24,opt,name=base_unit,json=baseUnit,proto3,oneof" json:"base_unit,omitempty"`
	PurchaseUnit    *string  `protobuf:"bytes,25,opt,name=purchase_unit,json=purchaseUnit,proto3,oneof" json:"purchase_unit,omitempty"`
	ArriveNum       *float64 `protobuf:"fixed64,26,opt,name=arrive_num,json=arriveNum,proto3,oneof" json:"arrive_num,omitempty"`
	StopwaitNum     *float64 `protobuf:"fixed64,27,opt,name=stopwait_num,json=stopwaitNum,proto3,oneof" json:"stopwait_num,omitempty"`
	PurchasePrice   *float64 `protobuf:"fixed64,28,opt,name=purchase_price,json=purchasePrice,proto3,oneof" json:"purchase_price,omitempty"`
	LastPrice       *float64 `protobuf:"fixed64,29,opt,name=last_price,json=lastPrice,proto3,oneof" json:"last_price,omitempty"`
	LastSecondPrice *float64 `protobuf:"fixed64,30,opt,name=last_second_price,json=lastSecondPrice,proto3,oneof" json:"last_second_price,omitempty"`
	LowestPrice     *float64 `protobuf:"fixed64,31,opt,name=lowest_price,json=lowestPrice,proto3,oneof" json:"lowest_price,omitempty"`
	Weight          *float64 `protobuf:"fixed64,32,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	ArriveMoreNum   *float64 `protobuf:"fixed64,33,opt,name=arrive_more_num,json=arriveMoreNum,proto3,oneof" json:"arrive_more_num,omitempty"`
	LackNum         *float64 `protobuf:"fixed64,34,opt,name=lack_num,json=lackNum,proto3,oneof" json:"lack_num,omitempty"`
	SpecId          *int32   `protobuf:"varint,35,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	WarehouseId     *int32   `protobuf:"varint,36,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	Tag             *int32   `protobuf:"varint,37,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	Num2            *float64 `protobuf:"fixed64,38,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	UnitRatio       *float64 `protobuf:"fixed64,39,opt,name=unit_ratio,json=unitRatio,proto3,oneof" json:"unit_ratio,omitempty"`
	UnitId          *int32   `protobuf:"varint,40,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	BaseUnitId      *int32   `protobuf:"varint,41,opt,name=base_unit_id,json=baseUnitId,proto3,oneof" json:"base_unit_id,omitempty"`
	Created         *string  `protobuf:"bytes,42,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Purchase        *int32   `protobuf:"varint,43,opt,name=purchase,proto3,oneof" json:"purchase,omitempty"`
}

func (x *PurchaseDetailResponse) Reset() {
	*x = PurchaseDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseDetailResponse) ProtoMessage() {}

func (x *PurchaseDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseDetailResponse.ProtoReflect.Descriptor instead.
func (*PurchaseDetailResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{73}
}

func (x *PurchaseDetailResponse) GetRecId() int32 {
	if x != nil {
		return x.RecId
	}
	return 0
}

func (x *PurchaseDetailResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *PurchaseDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *PurchaseDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *PurchaseDetailResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *PurchaseDetailResponse) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *PurchaseDetailResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *PurchaseDetailResponse) GetTax() float64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *PurchaseDetailResponse) GetTaxPrice() float64 {
	if x != nil && x.TaxPrice != nil {
		return *x.TaxPrice
	}
	return 0
}

func (x *PurchaseDetailResponse) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *PurchaseDetailResponse) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *PurchaseDetailResponse) GetStockinAmount() float64 {
	if x != nil && x.StockinAmount != nil {
		return *x.StockinAmount
	}
	return 0
}

func (x *PurchaseDetailResponse) GetStockinNum() float64 {
	if x != nil && x.StockinNum != nil {
		return *x.StockinNum
	}
	return 0
}

func (x *PurchaseDetailResponse) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *PurchaseDetailResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *PurchaseDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *PurchaseDetailResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *PurchaseDetailResponse) GetProviderGoodsNo() string {
	if x != nil && x.ProviderGoodsNo != nil {
		return *x.ProviderGoodsNo
	}
	return ""
}

func (x *PurchaseDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *PurchaseDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *PurchaseDetailResponse) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *PurchaseDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *PurchaseDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *PurchaseDetailResponse) GetBaseUnit() string {
	if x != nil && x.BaseUnit != nil {
		return *x.BaseUnit
	}
	return ""
}

func (x *PurchaseDetailResponse) GetPurchaseUnit() string {
	if x != nil && x.PurchaseUnit != nil {
		return *x.PurchaseUnit
	}
	return ""
}

func (x *PurchaseDetailResponse) GetArriveNum() float64 {
	if x != nil && x.ArriveNum != nil {
		return *x.ArriveNum
	}
	return 0
}

func (x *PurchaseDetailResponse) GetStopwaitNum() float64 {
	if x != nil && x.StopwaitNum != nil {
		return *x.StopwaitNum
	}
	return 0
}

func (x *PurchaseDetailResponse) GetPurchasePrice() float64 {
	if x != nil && x.PurchasePrice != nil {
		return *x.PurchasePrice
	}
	return 0
}

func (x *PurchaseDetailResponse) GetLastPrice() float64 {
	if x != nil && x.LastPrice != nil {
		return *x.LastPrice
	}
	return 0
}

func (x *PurchaseDetailResponse) GetLastSecondPrice() float64 {
	if x != nil && x.LastSecondPrice != nil {
		return *x.LastSecondPrice
	}
	return 0
}

func (x *PurchaseDetailResponse) GetLowestPrice() float64 {
	if x != nil && x.LowestPrice != nil {
		return *x.LowestPrice
	}
	return 0
}

func (x *PurchaseDetailResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *PurchaseDetailResponse) GetArriveMoreNum() float64 {
	if x != nil && x.ArriveMoreNum != nil {
		return *x.ArriveMoreNum
	}
	return 0
}

func (x *PurchaseDetailResponse) GetLackNum() float64 {
	if x != nil && x.LackNum != nil {
		return *x.LackNum
	}
	return 0
}

func (x *PurchaseDetailResponse) GetSpecId() int32 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *PurchaseDetailResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *PurchaseDetailResponse) GetTag() int32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *PurchaseDetailResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *PurchaseDetailResponse) GetUnitRatio() float64 {
	if x != nil && x.UnitRatio != nil {
		return *x.UnitRatio
	}
	return 0
}

func (x *PurchaseDetailResponse) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *PurchaseDetailResponse) GetBaseUnitId() int32 {
	if x != nil && x.BaseUnitId != nil {
		return *x.BaseUnitId
	}
	return 0
}

func (x *PurchaseDetailResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *PurchaseDetailResponse) GetPurchase() int32 {
	if x != nil && x.Purchase != nil {
		return *x.Purchase
	}
	return 0
}

type PurchaseOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*PurchaseOrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PurchaseOrderListResponse) Reset() {
	*x = PurchaseOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderListResponse) ProtoMessage() {}

func (x *PurchaseOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderListResponse.ProtoReflect.Descriptor instead.
func (*PurchaseOrderListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{74}
}

func (x *PurchaseOrderListResponse) GetResults() []*PurchaseOrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PurchaseOrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseId        int32    `protobuf:"varint,1,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty"`
	PurchaseNo        *string  `protobuf:"bytes,2,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	PurchaseOuterNo   *string  `protobuf:"bytes,3,opt,name=purchase_outer_no,json=purchaseOuterNo,proto3,oneof" json:"purchase_outer_no,omitempty"`
	OuterNo           *string  `protobuf:"bytes,4,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	WarehouseName     *string  `protobuf:"bytes,5,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseNo       *string  `protobuf:"bytes,6,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	Status            *int32   `protobuf:"varint,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProviderNo        *string  `protobuf:"bytes,8,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName      *string  `protobuf:"bytes,9,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Contact           *string  `protobuf:"bytes,10,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno             *string  `protobuf:"bytes,11,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	PurchaserName     *string  `protobuf:"bytes,12,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	ReceiveAddress    *string  `protobuf:"bytes,13,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	LogisticsType     *int32   `protobuf:"varint,14,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	CheckTime         *string  `protobuf:"bytes,15,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	GoodsAmount       *float64 `protobuf:"fixed64,16,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostFee           *float64 `protobuf:"fixed64,17,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee          *float64 `protobuf:"fixed64,18,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	TaxGoodsAmount    *float64 `protobuf:"fixed64,19,opt,name=tax_goods_amount,json=taxGoodsAmount,proto3,oneof" json:"tax_goods_amount,omitempty"`
	Remark            *string  `protobuf:"bytes,20,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified          *string  `protobuf:"bytes,21,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ExpectArriveTime  *string  `protobuf:"bytes,22,opt,name=expect_arrive_time,json=expectArriveTime,proto3,oneof" json:"expect_arrive_time,omitempty"`
	Prop1             *string  `protobuf:"bytes,23,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2             *string  `protobuf:"bytes,24,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Created           *string  `protobuf:"bytes,25,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatorId         *int32   `protobuf:"varint,26,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName       *string  `protobuf:"bytes,27,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	WarehouseId       *int32   `protobuf:"varint,28,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ApiOuterNo        *string  `protobuf:"bytes,29,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	WmsOuterNo        *string  `protobuf:"bytes,30,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus         *int32   `protobuf:"varint,31,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo         *string  `protobuf:"bytes,32,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	PurchaserId       *int32   `protobuf:"varint,33,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	OrderType         *int32   `protobuf:"varint,34,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	FlagId            *int32   `protobuf:"varint,35,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	ProviderId        *int32   `protobuf:"varint,36,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	CheckOperatorId   *int32   `protobuf:"varint,37,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	FacheckOperatorId *int32   `protobuf:"varint,38,opt,name=facheck_operator_id,json=facheckOperatorId,proto3,oneof" json:"facheck_operator_id,omitempty"`
	FacheckTime       *string  `protobuf:"bytes,39,opt,name=facheck_time,json=facheckTime,proto3,oneof" json:"facheck_time,omitempty"`
	GoodsFee          *float64 `protobuf:"fixed64,40,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount        *float64 `protobuf:"fixed64,41,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	TaxFee            *float64 `protobuf:"fixed64,42,opt,name=tax_fee,json=taxFee,proto3,oneof" json:"tax_fee,omitempty"`
	GoodsTypeCount    *int32   `protobuf:"varint,43,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsArriveCount  *float64 `protobuf:"fixed64,44,opt,name=goods_arrive_count,json=goodsArriveCount,proto3,oneof" json:"goods_arrive_count,omitempty"`
	RevertReason      *int32   `protobuf:"varint,45,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	VersionId         *int32   `protobuf:"varint,46,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	NoteCount         *int32   `protobuf:"varint,47,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	PropTime1         *string  `protobuf:"bytes,48,opt,name=prop_time1,json=propTime1,proto3,oneof" json:"prop_time1,omitempty"`
}

func (x *PurchaseOrderRequest) Reset() {
	*x = PurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderRequest) ProtoMessage() {}

func (x *PurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*PurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{75}
}

func (x *PurchaseOrderRequest) GetPurchaseId() int32 {
	if x != nil {
		return x.PurchaseId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetPurchaseOuterNo() string {
	if x != nil && x.PurchaseOuterNo != nil {
		return *x.PurchaseOuterNo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *PurchaseOrderRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PurchaseOrderRequest) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *PurchaseOrderRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *PurchaseOrderRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *PurchaseOrderRequest) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *PurchaseOrderRequest) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *PurchaseOrderRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *PurchaseOrderRequest) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *PurchaseOrderRequest) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *PurchaseOrderRequest) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *PurchaseOrderRequest) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *PurchaseOrderRequest) GetTaxGoodsAmount() float64 {
	if x != nil && x.TaxGoodsAmount != nil {
		return *x.TaxGoodsAmount
	}
	return 0
}

func (x *PurchaseOrderRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *PurchaseOrderRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *PurchaseOrderRequest) GetExpectArriveTime() string {
	if x != nil && x.ExpectArriveTime != nil {
		return *x.ExpectArriveTime
	}
	return ""
}

func (x *PurchaseOrderRequest) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *PurchaseOrderRequest) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *PurchaseOrderRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *PurchaseOrderRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *PurchaseOrderRequest) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *PurchaseOrderRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *PurchaseOrderRequest) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *PurchaseOrderRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetFacheckOperatorId() int32 {
	if x != nil && x.FacheckOperatorId != nil {
		return *x.FacheckOperatorId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetFacheckTime() string {
	if x != nil && x.FacheckTime != nil {
		return *x.FacheckTime
	}
	return ""
}

func (x *PurchaseOrderRequest) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *PurchaseOrderRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *PurchaseOrderRequest) GetTaxFee() float64 {
	if x != nil && x.TaxFee != nil {
		return *x.TaxFee
	}
	return 0
}

func (x *PurchaseOrderRequest) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *PurchaseOrderRequest) GetGoodsArriveCount() float64 {
	if x != nil && x.GoodsArriveCount != nil {
		return *x.GoodsArriveCount
	}
	return 0
}

func (x *PurchaseOrderRequest) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *PurchaseOrderRequest) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *PurchaseOrderRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *PurchaseOrderRequest) GetPropTime1() string {
	if x != nil && x.PropTime1 != nil {
		return *x.PropTime1
	}
	return ""
}

type PurchaseOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseId        int32                     `protobuf:"varint,1,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty"`
	PurchaseNo        *string                   `protobuf:"bytes,2,opt,name=purchase_no,json=purchaseNo,proto3,oneof" json:"purchase_no,omitempty"`
	PurchaseOuterNo   *string                   `protobuf:"bytes,3,opt,name=purchase_outer_no,json=purchaseOuterNo,proto3,oneof" json:"purchase_outer_no,omitempty"`
	OuterNo           *string                   `protobuf:"bytes,4,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	WarehouseName     *string                   `protobuf:"bytes,5,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseNo       *string                   `protobuf:"bytes,6,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	Status            *int32                    `protobuf:"varint,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ProviderNo        *string                   `protobuf:"bytes,8,opt,name=provider_no,json=providerNo,proto3,oneof" json:"provider_no,omitempty"`
	ProviderName      *string                   `protobuf:"bytes,9,opt,name=provider_name,json=providerName,proto3,oneof" json:"provider_name,omitempty"`
	Contact           *string                   `protobuf:"bytes,10,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno             *string                   `protobuf:"bytes,11,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	PurchaserName     *string                   `protobuf:"bytes,12,opt,name=purchaser_name,json=purchaserName,proto3,oneof" json:"purchaser_name,omitempty"`
	ReceiveAddress    *string                   `protobuf:"bytes,13,opt,name=receive_address,json=receiveAddress,proto3,oneof" json:"receive_address,omitempty"`
	LogisticsType     *int32                    `protobuf:"varint,14,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	CheckTime         *string                   `protobuf:"bytes,15,opt,name=check_time,json=checkTime,proto3,oneof" json:"check_time,omitempty"`
	GoodsAmount       *float64                  `protobuf:"fixed64,16,opt,name=goods_amount,json=goodsAmount,proto3,oneof" json:"goods_amount,omitempty"`
	PostFee           *float64                  `protobuf:"fixed64,17,opt,name=post_fee,json=postFee,proto3,oneof" json:"post_fee,omitempty"`
	OtherFee          *float64                  `protobuf:"fixed64,18,opt,name=other_fee,json=otherFee,proto3,oneof" json:"other_fee,omitempty"`
	TaxGoodsAmount    *float64                  `protobuf:"fixed64,19,opt,name=tax_goods_amount,json=taxGoodsAmount,proto3,oneof" json:"tax_goods_amount,omitempty"`
	Remark            *string                   `protobuf:"bytes,20,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Modified          *string                   `protobuf:"bytes,21,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	ExpectArriveTime  *string                   `protobuf:"bytes,22,opt,name=expect_arrive_time,json=expectArriveTime,proto3,oneof" json:"expect_arrive_time,omitempty"`
	Prop1             *string                   `protobuf:"bytes,23,opt,name=prop1,proto3,oneof" json:"prop1,omitempty"`
	Prop2             *string                   `protobuf:"bytes,24,opt,name=prop2,proto3,oneof" json:"prop2,omitempty"`
	Created           *string                   `protobuf:"bytes,25,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatorId         *int32                    `protobuf:"varint,26,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName       *string                   `protobuf:"bytes,27,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	WarehouseId       *int32                    `protobuf:"varint,28,opt,name=warehouse_id,json=warehouseId,proto3,oneof" json:"warehouse_id,omitempty"`
	ApiOuterNo        *string                   `protobuf:"bytes,29,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	WmsOuterNo        *string                   `protobuf:"bytes,30,opt,name=wms_outer_no,json=wmsOuterNo,proto3,oneof" json:"wms_outer_no,omitempty"`
	WmsStatus         *int32                    `protobuf:"varint,31,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	ErrorInfo         *string                   `protobuf:"bytes,32,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	PurchaserId       *int32                    `protobuf:"varint,33,opt,name=purchaser_id,json=purchaserId,proto3,oneof" json:"purchaser_id,omitempty"`
	OrderType         *int32                    `protobuf:"varint,34,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	FlagId            *int32                    `protobuf:"varint,35,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	ProviderId        *int32                    `protobuf:"varint,36,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	CheckOperatorId   *int32                    `protobuf:"varint,37,opt,name=check_operator_id,json=checkOperatorId,proto3,oneof" json:"check_operator_id,omitempty"`
	FacheckOperatorId *int32                    `protobuf:"varint,38,opt,name=facheck_operator_id,json=facheckOperatorId,proto3,oneof" json:"facheck_operator_id,omitempty"`
	FacheckTime       *string                   `protobuf:"bytes,39,opt,name=facheck_time,json=facheckTime,proto3,oneof" json:"facheck_time,omitempty"`
	GoodsFee          *float64                  `protobuf:"fixed64,40,opt,name=goods_fee,json=goodsFee,proto3,oneof" json:"goods_fee,omitempty"`
	GoodsCount        *float64                  `protobuf:"fixed64,41,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	TaxFee            *float64                  `protobuf:"fixed64,42,opt,name=tax_fee,json=taxFee,proto3,oneof" json:"tax_fee,omitempty"`
	GoodsTypeCount    *int32                    `protobuf:"varint,43,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsArriveCount  *float64                  `protobuf:"fixed64,44,opt,name=goods_arrive_count,json=goodsArriveCount,proto3,oneof" json:"goods_arrive_count,omitempty"`
	RevertReason      *int32                    `protobuf:"varint,45,opt,name=revert_reason,json=revertReason,proto3,oneof" json:"revert_reason,omitempty"`
	VersionId         *int32                    `protobuf:"varint,46,opt,name=version_id,json=versionId,proto3,oneof" json:"version_id,omitempty"`
	NoteCount         *int32                    `protobuf:"varint,47,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	PropTime1         *string                   `protobuf:"bytes,48,opt,name=prop_time1,json=propTime1,proto3,oneof" json:"prop_time1,omitempty"`
	PurchaseDetails   []*PurchaseDetailResponse `protobuf:"bytes,49,rep,name=purchase_details,json=purchaseDetails,proto3" json:"purchase_details,omitempty"`
}

func (x *PurchaseOrderResponse) Reset() {
	*x = PurchaseOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderResponse) ProtoMessage() {}

func (x *PurchaseOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderResponse.ProtoReflect.Descriptor instead.
func (*PurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{76}
}

func (x *PurchaseOrderResponse) GetPurchaseId() int32 {
	if x != nil {
		return x.PurchaseId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetPurchaseNo() string {
	if x != nil && x.PurchaseNo != nil {
		return *x.PurchaseNo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetPurchaseOuterNo() string {
	if x != nil && x.PurchaseOuterNo != nil {
		return *x.PurchaseOuterNo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *PurchaseOrderResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PurchaseOrderResponse) GetProviderNo() string {
	if x != nil && x.ProviderNo != nil {
		return *x.ProviderNo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetProviderName() string {
	if x != nil && x.ProviderName != nil {
		return *x.ProviderName
	}
	return ""
}

func (x *PurchaseOrderResponse) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *PurchaseOrderResponse) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *PurchaseOrderResponse) GetPurchaserName() string {
	if x != nil && x.PurchaserName != nil {
		return *x.PurchaserName
	}
	return ""
}

func (x *PurchaseOrderResponse) GetReceiveAddress() string {
	if x != nil && x.ReceiveAddress != nil {
		return *x.ReceiveAddress
	}
	return ""
}

func (x *PurchaseOrderResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *PurchaseOrderResponse) GetCheckTime() string {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return ""
}

func (x *PurchaseOrderResponse) GetGoodsAmount() float64 {
	if x != nil && x.GoodsAmount != nil {
		return *x.GoodsAmount
	}
	return 0
}

func (x *PurchaseOrderResponse) GetPostFee() float64 {
	if x != nil && x.PostFee != nil {
		return *x.PostFee
	}
	return 0
}

func (x *PurchaseOrderResponse) GetOtherFee() float64 {
	if x != nil && x.OtherFee != nil {
		return *x.OtherFee
	}
	return 0
}

func (x *PurchaseOrderResponse) GetTaxGoodsAmount() float64 {
	if x != nil && x.TaxGoodsAmount != nil {
		return *x.TaxGoodsAmount
	}
	return 0
}

func (x *PurchaseOrderResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *PurchaseOrderResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *PurchaseOrderResponse) GetExpectArriveTime() string {
	if x != nil && x.ExpectArriveTime != nil {
		return *x.ExpectArriveTime
	}
	return ""
}

func (x *PurchaseOrderResponse) GetProp1() string {
	if x != nil && x.Prop1 != nil {
		return *x.Prop1
	}
	return ""
}

func (x *PurchaseOrderResponse) GetProp2() string {
	if x != nil && x.Prop2 != nil {
		return *x.Prop2
	}
	return ""
}

func (x *PurchaseOrderResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *PurchaseOrderResponse) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *PurchaseOrderResponse) GetWarehouseId() int32 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetWmsOuterNo() string {
	if x != nil && x.WmsOuterNo != nil {
		return *x.WmsOuterNo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *PurchaseOrderResponse) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *PurchaseOrderResponse) GetPurchaserId() int32 {
	if x != nil && x.PurchaserId != nil {
		return *x.PurchaserId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *PurchaseOrderResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetCheckOperatorId() int32 {
	if x != nil && x.CheckOperatorId != nil {
		return *x.CheckOperatorId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetFacheckOperatorId() int32 {
	if x != nil && x.FacheckOperatorId != nil {
		return *x.FacheckOperatorId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetFacheckTime() string {
	if x != nil && x.FacheckTime != nil {
		return *x.FacheckTime
	}
	return ""
}

func (x *PurchaseOrderResponse) GetGoodsFee() float64 {
	if x != nil && x.GoodsFee != nil {
		return *x.GoodsFee
	}
	return 0
}

func (x *PurchaseOrderResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *PurchaseOrderResponse) GetTaxFee() float64 {
	if x != nil && x.TaxFee != nil {
		return *x.TaxFee
	}
	return 0
}

func (x *PurchaseOrderResponse) GetGoodsTypeCount() int32 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *PurchaseOrderResponse) GetGoodsArriveCount() float64 {
	if x != nil && x.GoodsArriveCount != nil {
		return *x.GoodsArriveCount
	}
	return 0
}

func (x *PurchaseOrderResponse) GetRevertReason() int32 {
	if x != nil && x.RevertReason != nil {
		return *x.RevertReason
	}
	return 0
}

func (x *PurchaseOrderResponse) GetVersionId() int32 {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return 0
}

func (x *PurchaseOrderResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *PurchaseOrderResponse) GetPropTime1() string {
	if x != nil && x.PropTime1 != nil {
		return *x.PropTime1
	}
	return ""
}

func (x *PurchaseOrderResponse) GetPurchaseDetails() []*PurchaseDetailResponse {
	if x != nil {
		return x.PurchaseDetails
	}
	return nil
}

type RetrieveGoodsDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveGoodsDeliverRequest) Reset() {
	*x = RetrieveGoodsDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveGoodsDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveGoodsDeliverRequest) ProtoMessage() {}

func (x *RetrieveGoodsDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveGoodsDeliverRequest.ProtoReflect.Descriptor instead.
func (*RetrieveGoodsDeliverRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{77}
}

func (x *RetrieveGoodsDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveServiceConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters   string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	PlatName  string  `protobuf:"bytes,3,opt,name=plat_name,json=platName,proto3" json:"plat_name,omitempty"`
	ConfName  *string `protobuf:"bytes,4,opt,name=conf_name,json=confName,proto3,oneof" json:"conf_name,omitempty"`
	TradeType int32   `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Type      int32   `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *RetrieveServiceConfRequest) Reset() {
	*x = RetrieveServiceConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveServiceConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveServiceConfRequest) ProtoMessage() {}

func (x *RetrieveServiceConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveServiceConfRequest.ProtoReflect.Descriptor instead.
func (*RetrieveServiceConfRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{78}
}

func (x *RetrieveServiceConfRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RetrieveServiceConfRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RetrieveServiceConfRequest) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *RetrieveServiceConfRequest) GetConfName() string {
	if x != nil && x.ConfName != nil {
		return *x.ConfName
	}
	return ""
}

func (x *RetrieveServiceConfRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *RetrieveServiceConfRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type RetrieveServiceConfSolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters           string `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Type              int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Employee          *int32 `protobuf:"varint,4,opt,name=employee,proto3,oneof" json:"employee,omitempty"`
	ShopNo            *int32 `protobuf:"varint,5,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName          *int32 `protobuf:"varint,6,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo       *int32 `protobuf:"varint,7,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName     *int32 `protobuf:"varint,8,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseInNo     *int32 `protobuf:"varint,9,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName   *int32 `protobuf:"varint,10,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	ComplainPayDetail bool   `protobuf:"varint,11,opt,name=complain_pay_detail,json=complainPayDetail,proto3" json:"complain_pay_detail,omitempty"`
	ComplainInvoice   bool   `protobuf:"varint,12,opt,name=complain_invoice,json=complainInvoice,proto3" json:"complain_invoice,omitempty"`
	ComplainStockIn   bool   `protobuf:"varint,13,opt,name=complain_stock_in,json=complainStockIn,proto3" json:"complain_stock_in,omitempty"`
	ComplainStockOut  bool   `protobuf:"varint,14,opt,name=complain_stock_out,json=complainStockOut,proto3" json:"complain_stock_out,omitempty"`
	ComplainRefund    bool   `protobuf:"varint,15,opt,name=complain_refund,json=complainRefund,proto3" json:"complain_refund,omitempty"`
}

func (x *RetrieveServiceConfSolutionRequest) Reset() {
	*x = RetrieveServiceConfSolutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveServiceConfSolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveServiceConfSolutionRequest) ProtoMessage() {}

func (x *RetrieveServiceConfSolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveServiceConfSolutionRequest.ProtoReflect.Descriptor instead.
func (*RetrieveServiceConfSolutionRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{79}
}

func (x *RetrieveServiceConfSolutionRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RetrieveServiceConfSolutionRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetEmployee() int32 {
	if x != nil && x.Employee != nil {
		return *x.Employee
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetShopNo() int32 {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetShopName() int32 {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetWarehouseNo() int32 {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetWarehouseName() int32 {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetWarehouseInNo() int32 {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetWarehouseInName() int32 {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return 0
}

func (x *RetrieveServiceConfSolutionRequest) GetComplainPayDetail() bool {
	if x != nil {
		return x.ComplainPayDetail
	}
	return false
}

func (x *RetrieveServiceConfSolutionRequest) GetComplainInvoice() bool {
	if x != nil {
		return x.ComplainInvoice
	}
	return false
}

func (x *RetrieveServiceConfSolutionRequest) GetComplainStockIn() bool {
	if x != nil {
		return x.ComplainStockIn
	}
	return false
}

func (x *RetrieveServiceConfSolutionRequest) GetComplainStockOut() bool {
	if x != nil {
		return x.ComplainStockOut
	}
	return false
}

func (x *RetrieveServiceConfSolutionRequest) GetComplainRefund() bool {
	if x != nil {
		return x.ComplainRefund
	}
	return false
}

type RetrieveServiceConfWarehouseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters         string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ShopNo          string  `protobuf:"bytes,3,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName        string  `protobuf:"bytes,4,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo     string  `protobuf:"bytes,5,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName   string  `protobuf:"bytes,6,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ConfirmOvertime int32   `protobuf:"varint,7,opt,name=confirm_overtime,json=confirmOvertime,proto3" json:"confirm_overtime,omitempty"`
	FinishOvertime  int32   `protobuf:"varint,8,opt,name=finish_overtime,json=finishOvertime,proto3" json:"finish_overtime,omitempty"`
	ExpireTime      int32   `protobuf:"varint,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	AutoApprove     bool    `protobuf:"varint,10,opt,name=auto_approve,json=autoApprove,proto3" json:"auto_approve,omitempty"`
	CanReturn       bool    `protobuf:"varint,11,opt,name=can_return,json=canReturn,proto3" json:"can_return,omitempty"`
	WarehouseInNo   *string `protobuf:"bytes,12,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName *string `protobuf:"bytes,13,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OperatorId      *int32  `protobuf:"varint,14,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName    *string `protobuf:"bytes,15,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Parent          int64   `protobuf:"varint,16,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *RetrieveServiceConfWarehouseRequest) Reset() {
	*x = RetrieveServiceConfWarehouseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveServiceConfWarehouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveServiceConfWarehouseRequest) ProtoMessage() {}

func (x *RetrieveServiceConfWarehouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveServiceConfWarehouseRequest.ProtoReflect.Descriptor instead.
func (*RetrieveServiceConfWarehouseRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{80}
}

func (x *RetrieveServiceConfWarehouseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RetrieveServiceConfWarehouseRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetConfirmOvertime() int32 {
	if x != nil {
		return x.ConfirmOvertime
	}
	return 0
}

func (x *RetrieveServiceConfWarehouseRequest) GetFinishOvertime() int32 {
	if x != nil {
		return x.FinishOvertime
	}
	return 0
}

func (x *RetrieveServiceConfWarehouseRequest) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *RetrieveServiceConfWarehouseRequest) GetAutoApprove() bool {
	if x != nil {
		return x.AutoApprove
	}
	return false
}

func (x *RetrieveServiceConfWarehouseRequest) GetCanReturn() bool {
	if x != nil {
		return x.CanReturn
	}
	return false
}

func (x *RetrieveServiceConfWarehouseRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *RetrieveServiceConfWarehouseRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *RetrieveServiceConfWarehouseRequest) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

type RetrieveServiceReasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters    string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	TradeType  int32   `protobuf:"varint,3,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ReasonType *int32  `protobuf:"varint,4,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	ReasonCode int32   `protobuf:"varint,5,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName string  `protobuf:"bytes,6,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ReasonDesc *string `protobuf:"bytes,7,opt,name=reason_desc,json=reasonDesc,proto3,oneof" json:"reason_desc,omitempty"`
	WithRemark *bool   `protobuf:"varint,8,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsValid    bool    `protobuf:"varint,9,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsReserved *bool   `protobuf:"varint,10,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	Parent     *int64  `protobuf:"varint,11,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *RetrieveServiceReasonRequest) Reset() {
	*x = RetrieveServiceReasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveServiceReasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveServiceReasonRequest) ProtoMessage() {}

func (x *RetrieveServiceReasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveServiceReasonRequest.ProtoReflect.Descriptor instead.
func (*RetrieveServiceReasonRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{81}
}

func (x *RetrieveServiceReasonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RetrieveServiceReasonRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *RetrieveServiceReasonRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *RetrieveServiceReasonRequest) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *RetrieveServiceReasonRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RetrieveServiceReasonRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *RetrieveServiceReasonRequest) GetReasonDesc() string {
	if x != nil && x.ReasonDesc != nil {
		return *x.ReasonDesc
	}
	return ""
}

func (x *RetrieveServiceReasonRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *RetrieveServiceReasonRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *RetrieveServiceReasonRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *RetrieveServiceReasonRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ServiceConfListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceConfResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ServiceConfListResponse) Reset() {
	*x = ServiceConfListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfListResponse) ProtoMessage() {}

func (x *ServiceConfListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfListResponse.ProtoReflect.Descriptor instead.
func (*ServiceConfListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{82}
}

func (x *ServiceConfListResponse) GetResults() []*ServiceConfResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ServiceConfListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ServiceConfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeTypeName string                          `protobuf:"bytes,2,opt,name=trade_type_name,json=tradeTypeName,proto3" json:"trade_type_name,omitempty"`
	TypeName      string                          `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Warehouse     []*ServiceConfWarehouseResponse `protobuf:"bytes,4,rep,name=warehouse,proto3" json:"warehouse,omitempty"`
	CreateTime    string                          `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string                          `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	PlatName      string                          `protobuf:"bytes,7,opt,name=plat_name,json=platName,proto3" json:"plat_name,omitempty"`
	ConfName      *string                         `protobuf:"bytes,8,opt,name=conf_name,json=confName,proto3,oneof" json:"conf_name,omitempty"`
	TradeType     int32                           `protobuf:"varint,9,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Type          int32                           `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ServiceConfResponse) Reset() {
	*x = ServiceConfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfResponse) ProtoMessage() {}

func (x *ServiceConfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfResponse.ProtoReflect.Descriptor instead.
func (*ServiceConfResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{83}
}

func (x *ServiceConfResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceConfResponse) GetTradeTypeName() string {
	if x != nil {
		return x.TradeTypeName
	}
	return ""
}

func (x *ServiceConfResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ServiceConfResponse) GetWarehouse() []*ServiceConfWarehouseResponse {
	if x != nil {
		return x.Warehouse
	}
	return nil
}

func (x *ServiceConfResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceConfResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceConfResponse) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *ServiceConfResponse) GetConfName() string {
	if x != nil && x.ConfName != nil {
		return *x.ConfName
	}
	return ""
}

func (x *ServiceConfResponse) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *ServiceConfResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ServiceConfSolutionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceConfSolutionResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ServiceConfSolutionListResponse) Reset() {
	*x = ServiceConfSolutionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfSolutionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfSolutionListResponse) ProtoMessage() {}

func (x *ServiceConfSolutionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfSolutionListResponse.ProtoReflect.Descriptor instead.
func (*ServiceConfSolutionListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{84}
}

func (x *ServiceConfSolutionListResponse) GetResults() []*ServiceConfSolutionResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ServiceConfSolutionListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ServiceConfSolutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime        string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime        string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Type              int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Employee          *int32 `protobuf:"varint,5,opt,name=employee,proto3,oneof" json:"employee,omitempty"`
	ShopNo            *int32 `protobuf:"varint,6,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName          *int32 `protobuf:"varint,7,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo       *int32 `protobuf:"varint,8,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName     *int32 `protobuf:"varint,9,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseInNo     *int32 `protobuf:"varint,10,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName   *int32 `protobuf:"varint,11,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	ComplainPayDetail bool   `protobuf:"varint,12,opt,name=complain_pay_detail,json=complainPayDetail,proto3" json:"complain_pay_detail,omitempty"`
	ComplainInvoice   bool   `protobuf:"varint,13,opt,name=complain_invoice,json=complainInvoice,proto3" json:"complain_invoice,omitempty"`
	ComplainStockIn   bool   `protobuf:"varint,14,opt,name=complain_stock_in,json=complainStockIn,proto3" json:"complain_stock_in,omitempty"`
	ComplainStockOut  bool   `protobuf:"varint,15,opt,name=complain_stock_out,json=complainStockOut,proto3" json:"complain_stock_out,omitempty"`
	ComplainRefund    bool   `protobuf:"varint,16,opt,name=complain_refund,json=complainRefund,proto3" json:"complain_refund,omitempty"`
}

func (x *ServiceConfSolutionResponse) Reset() {
	*x = ServiceConfSolutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfSolutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfSolutionResponse) ProtoMessage() {}

func (x *ServiceConfSolutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfSolutionResponse.ProtoReflect.Descriptor instead.
func (*ServiceConfSolutionResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{85}
}

func (x *ServiceConfSolutionResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceConfSolutionResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceConfSolutionResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetEmployee() int32 {
	if x != nil && x.Employee != nil {
		return *x.Employee
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetShopNo() int32 {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetShopName() int32 {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetWarehouseNo() int32 {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetWarehouseName() int32 {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetWarehouseInNo() int32 {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetWarehouseInName() int32 {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return 0
}

func (x *ServiceConfSolutionResponse) GetComplainPayDetail() bool {
	if x != nil {
		return x.ComplainPayDetail
	}
	return false
}

func (x *ServiceConfSolutionResponse) GetComplainInvoice() bool {
	if x != nil {
		return x.ComplainInvoice
	}
	return false
}

func (x *ServiceConfSolutionResponse) GetComplainStockIn() bool {
	if x != nil {
		return x.ComplainStockIn
	}
	return false
}

func (x *ServiceConfSolutionResponse) GetComplainStockOut() bool {
	if x != nil {
		return x.ComplainStockOut
	}
	return false
}

func (x *ServiceConfSolutionResponse) GetComplainRefund() bool {
	if x != nil {
		return x.ComplainRefund
	}
	return false
}

type ServiceConfWarehouseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceConfWarehouseResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ServiceConfWarehouseListResponse) Reset() {
	*x = ServiceConfWarehouseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfWarehouseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfWarehouseListResponse) ProtoMessage() {}

func (x *ServiceConfWarehouseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfWarehouseListResponse.ProtoReflect.Descriptor instead.
func (*ServiceConfWarehouseListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{86}
}

func (x *ServiceConfWarehouseListResponse) GetResults() []*ServiceConfWarehouseResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ServiceConfWarehouseListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ServiceConfWarehouseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime      string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ShopNo          string  `protobuf:"bytes,4,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName        string  `protobuf:"bytes,5,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo     string  `protobuf:"bytes,6,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName   string  `protobuf:"bytes,7,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ConfirmOvertime int32   `protobuf:"varint,8,opt,name=confirm_overtime,json=confirmOvertime,proto3" json:"confirm_overtime,omitempty"`
	FinishOvertime  int32   `protobuf:"varint,9,opt,name=finish_overtime,json=finishOvertime,proto3" json:"finish_overtime,omitempty"`
	ExpireTime      int32   `protobuf:"varint,10,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	AutoApprove     bool    `protobuf:"varint,11,opt,name=auto_approve,json=autoApprove,proto3" json:"auto_approve,omitempty"`
	CanReturn       bool    `protobuf:"varint,12,opt,name=can_return,json=canReturn,proto3" json:"can_return,omitempty"`
	WarehouseInNo   *string `protobuf:"bytes,13,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName *string `protobuf:"bytes,14,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OperatorId      *int32  `protobuf:"varint,15,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName    *string `protobuf:"bytes,16,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Parent          int64   `protobuf:"varint,17,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ServiceConfWarehouseResponse) Reset() {
	*x = ServiceConfWarehouseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfWarehouseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfWarehouseResponse) ProtoMessage() {}

func (x *ServiceConfWarehouseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfWarehouseResponse.ProtoReflect.Descriptor instead.
func (*ServiceConfWarehouseResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{87}
}

func (x *ServiceConfWarehouseResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceConfWarehouseResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetConfirmOvertime() int32 {
	if x != nil {
		return x.ConfirmOvertime
	}
	return 0
}

func (x *ServiceConfWarehouseResponse) GetFinishOvertime() int32 {
	if x != nil {
		return x.FinishOvertime
	}
	return 0
}

func (x *ServiceConfWarehouseResponse) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ServiceConfWarehouseResponse) GetAutoApprove() bool {
	if x != nil {
		return x.AutoApprove
	}
	return false
}

func (x *ServiceConfWarehouseResponse) GetCanReturn() bool {
	if x != nil {
		return x.CanReturn
	}
	return false
}

func (x *ServiceConfWarehouseResponse) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *ServiceConfWarehouseResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *ServiceConfWarehouseResponse) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

type ServiceDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ServiceDestroyRequest) Reset() {
	*x = ServiceDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDestroyRequest) ProtoMessage() {}

func (x *ServiceDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDestroyRequest.ProtoReflect.Descriptor instead.
func (*ServiceDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{88}
}

func (x *ServiceDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ServiceGoodsDetailListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceGoodsDetailResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ServiceGoodsDetailListResponse) Reset() {
	*x = ServiceGoodsDetailListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGoodsDetailListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGoodsDetailListResponse) ProtoMessage() {}

func (x *ServiceGoodsDetailListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGoodsDetailListResponse.ProtoReflect.Descriptor instead.
func (*ServiceGoodsDetailListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{89}
}

func (x *ServiceGoodsDetailListResponse) GetResults() []*ServiceGoodsDetailResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ServiceGoodsDetailListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ServiceGoodsDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters       string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	CanEdit       bool     `protobuf:"varint,3,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num           int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64  `protobuf:"fixed64,6,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64  `protobuf:"fixed64,7,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64  `protobuf:"fixed64,8,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64  `protobuf:"fixed64,9,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount   *float64 `protobuf:"fixed64,10,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut      *int32   `protobuf:"varint,11,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore    *int32   `protobuf:"varint,12,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge    *int32   `protobuf:"varint,13,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status        *int32   `protobuf:"varint,14,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32   `protobuf:"varint,15,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string  `protobuf:"bytes,16,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string  `protobuf:"bytes,17,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu      *string  `protobuf:"bytes,18,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo       *string  `protobuf:"bytes,19,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string   `protobuf:"bytes,20,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string  `protobuf:"bytes,21,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode      *string  `protobuf:"bytes,22,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode  *string  `protobuf:"bytes,23,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark        *string  `protobuf:"bytes,24,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo          *string  `protobuf:"bytes,25,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	Service       *int64   `protobuf:"varint,26,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ServiceGoodsDetailRequest) Reset() {
	*x = ServiceGoodsDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGoodsDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGoodsDetailRequest) ProtoMessage() {}

func (x *ServiceGoodsDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGoodsDetailRequest.ProtoReflect.Descriptor instead.
func (*ServiceGoodsDetailRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{90}
}

func (x *ServiceGoodsDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *ServiceGoodsDetailRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *ServiceGoodsDetailRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *ServiceGoodsDetailRequest) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type ServiceGoodsDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusName       string   `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	RefundStatusName string   `protobuf:"bytes,3,opt,name=refund_status_name,json=refundStatusName,proto3" json:"refund_status_name,omitempty"`
	CreateTime       string   `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       string   `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CanEdit          bool     `protobuf:"varint,6,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	Num              int32    `protobuf:"varint,7,opt,name=num,proto3" json:"num,omitempty"`
	Price            float64  `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount     float64  `protobuf:"fixed64,9,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount         float64  `protobuf:"fixed64,10,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount    float64  `protobuf:"fixed64,11,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount      float64  `protobuf:"fixed64,12,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	DebitAmount      *float64 `protobuf:"fixed64,13,opt,name=debit_amount,json=debitAmount,proto3,oneof" json:"debit_amount,omitempty"`
	PriceNut         *int32   `protobuf:"varint,14,opt,name=price_nut,json=priceNut,proto3,oneof" json:"price_nut,omitempty"`
	PriceScore       *int32   `protobuf:"varint,15,opt,name=price_score,json=priceScore,proto3,oneof" json:"price_score,omitempty"`
	PriceBadge       *int32   `protobuf:"varint,16,opt,name=price_badge,json=priceBadge,proto3,oneof" json:"price_badge,omitempty"`
	Status           *int32   `protobuf:"varint,17,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus     *int32   `protobuf:"varint,18,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId          *string  `protobuf:"bytes,19,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName        *string  `protobuf:"bytes,20,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsSpu         *string  `protobuf:"bytes,21,opt,name=goods_spu,json=goodsSpu,proto3,oneof" json:"goods_spu,omitempty"`
	GoodsNo          *string  `protobuf:"bytes,22,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo           string   `protobuf:"bytes,23,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName         *string  `protobuf:"bytes,24,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	RfidCode         *string  `protobuf:"bytes,25,opt,name=rfid_code,json=rfidCode,proto3,oneof" json:"rfid_code,omitempty"`
	SecurityCode     *string  `protobuf:"bytes,26,opt,name=security_code,json=securityCode,proto3,oneof" json:"security_code,omitempty"`
	Remark           *string  `protobuf:"bytes,27,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Memo             *string  `protobuf:"bytes,28,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	Service          *int64   `protobuf:"varint,29,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ServiceGoodsDetailResponse) Reset() {
	*x = ServiceGoodsDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGoodsDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGoodsDetailResponse) ProtoMessage() {}

func (x *ServiceGoodsDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGoodsDetailResponse.ProtoReflect.Descriptor instead.
func (*ServiceGoodsDetailResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{91}
}

func (x *ServiceGoodsDetailResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetRefundStatusName() string {
	if x != nil {
		return x.RefundStatusName
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *ServiceGoodsDetailResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetDebitAmount() float64 {
	if x != nil && x.DebitAmount != nil {
		return *x.DebitAmount
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetPriceNut() int32 {
	if x != nil && x.PriceNut != nil {
		return *x.PriceNut
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetPriceScore() int32 {
	if x != nil && x.PriceScore != nil {
		return *x.PriceScore
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetPriceBadge() int32 {
	if x != nil && x.PriceBadge != nil {
		return *x.PriceBadge
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *ServiceGoodsDetailResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetGoodsSpu() string {
	if x != nil && x.GoodsSpu != nil {
		return *x.GoodsSpu
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetRfidCode() string {
	if x != nil && x.RfidCode != nil {
		return *x.RfidCode
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetSecurityCode() string {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *ServiceGoodsDetailResponse) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type ServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters          string                       `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ComplainContent  *ObjectComplainRequest       `protobuf:"bytes,3,opt,name=complain_content,json=complainContent,proto3" json:"complain_content,omitempty"`
	SwapGoodsDetails []*ServiceGoodsDetailRequest `protobuf:"bytes,4,rep,name=swap_goods_details,json=swapGoodsDetails,proto3" json:"swap_goods_details,omitempty"`
	PayDetails       []*ServicePayDetailRequest   `protobuf:"bytes,5,rep,name=pay_details,json=payDetails,proto3" json:"pay_details,omitempty"`
	StockOutDetails  []*ServiceStockOutRequest    `protobuf:"bytes,6,rep,name=stock_out_details,json=stockOutDetails,proto3" json:"stock_out_details,omitempty"`
	CreateName       *string                      `protobuf:"bytes,7,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType       *int32                       `protobuf:"varint,8,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	ApproveTime      *string                      `protobuf:"bytes,9,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName      *string                      `protobuf:"bytes,10,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons   *string                      `protobuf:"bytes,11,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons    *string                      `protobuf:"bytes,12,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons    *string                      `protobuf:"bytes,13,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	Sid              string                       `protobuf:"bytes,14,opt,name=sid,proto3" json:"sid,omitempty"`
	TradeType        *int32                       `protobuf:"varint,15,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type             *int32                       `protobuf:"varint,16,opt,name=type,proto3,oneof" json:"type,omitempty"`
	RecordType       *int32                       `protobuf:"varint,17,opt,name=record_type,json=recordType,proto3,oneof" json:"record_type,omitempty"`
	Judgement        *int32                       `protobuf:"varint,18,opt,name=judgement,proto3,oneof" json:"judgement,omitempty"`
	ServiceStatus    *int32                       `protobuf:"varint,19,opt,name=service_status,json=serviceStatus,proto3,oneof" json:"service_status,omitempty"`
	TradeStatus      *int32                       `protobuf:"varint,20,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus        *int32                       `protobuf:"varint,21,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string                      `protobuf:"bytes,22,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm     *int32                       `protobuf:"varint,23,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick        *string                      `protobuf:"bytes,24,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile      *string                      `protobuf:"bytes,25,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage     *string                      `protobuf:"bytes,26,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	BuyerLabel       *string                      `protobuf:"bytes,27,opt,name=buyer_label,json=buyerLabel,proto3,oneof" json:"buyer_label,omitempty"`
	BuyerSource      *int32                       `protobuf:"varint,28,opt,name=buyer_source,json=buyerSource,proto3,oneof" json:"buyer_source,omitempty"`
	SellerName       *string                      `protobuf:"bytes,29,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo       *string                      `protobuf:"bytes,30,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo           *string                      `protobuf:"bytes,31,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName         *string                      `protobuf:"bytes,32,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo      *string                      `protobuf:"bytes,33,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName    *string                      `protobuf:"bytes,34,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName     *string                      `protobuf:"bytes,35,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string                      `protobuf:"bytes,36,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string                      `protobuf:"bytes,37,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string                      `protobuf:"bytes,38,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string                      `protobuf:"bytes,39,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string                      `protobuf:"bytes,40,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount       *float64                     `protobuf:"fixed64,41,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount      *float64                     `protobuf:"fixed64,42,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64                     `protobuf:"fixed64,43,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid             *float64                     `protobuf:"fixed64,44,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount        *float64                     `protobuf:"fixed64,45,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable       *float64                     `protobuf:"fixed64,46,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount         *float64                     `protobuf:"fixed64,47,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus    *int32                       `protobuf:"varint,48,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	LogisticsInName  *string                      `protobuf:"bytes,49,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode  *string                      `protobuf:"bytes,50,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsInNo    *string                      `protobuf:"bytes,51,opt,name=logistics_in_no,json=logisticsInNo,proto3,oneof" json:"logistics_in_no,omitempty"`
	WarehouseInNo    *string                      `protobuf:"bytes,52,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName  *string                      `protobuf:"bytes,53,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OuterNo          *string                      `protobuf:"bytes,54,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
}

func (x *ServiceListRequest) Reset() {
	*x = ServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListRequest) ProtoMessage() {}

func (x *ServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListRequest.ProtoReflect.Descriptor instead.
func (*ServiceListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{92}
}

func (x *ServiceListRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ServiceListRequest) GetComplainContent() *ObjectComplainRequest {
	if x != nil {
		return x.ComplainContent
	}
	return nil
}

func (x *ServiceListRequest) GetSwapGoodsDetails() []*ServiceGoodsDetailRequest {
	if x != nil {
		return x.SwapGoodsDetails
	}
	return nil
}

func (x *ServiceListRequest) GetPayDetails() []*ServicePayDetailRequest {
	if x != nil {
		return x.PayDetails
	}
	return nil
}

func (x *ServiceListRequest) GetStockOutDetails() []*ServiceStockOutRequest {
	if x != nil {
		return x.StockOutDetails
	}
	return nil
}

func (x *ServiceListRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *ServiceListRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *ServiceListRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *ServiceListRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *ServiceListRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *ServiceListRequest) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *ServiceListRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *ServiceListRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *ServiceListRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *ServiceListRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ServiceListRequest) GetRecordType() int32 {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return 0
}

func (x *ServiceListRequest) GetJudgement() int32 {
	if x != nil && x.Judgement != nil {
		return *x.Judgement
	}
	return 0
}

func (x *ServiceListRequest) GetServiceStatus() int32 {
	if x != nil && x.ServiceStatus != nil {
		return *x.ServiceStatus
	}
	return 0
}

func (x *ServiceListRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *ServiceListRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *ServiceListRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *ServiceListRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *ServiceListRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *ServiceListRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *ServiceListRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *ServiceListRequest) GetBuyerLabel() string {
	if x != nil && x.BuyerLabel != nil {
		return *x.BuyerLabel
	}
	return ""
}

func (x *ServiceListRequest) GetBuyerSource() int32 {
	if x != nil && x.BuyerSource != nil {
		return *x.BuyerSource
	}
	return 0
}

func (x *ServiceListRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *ServiceListRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *ServiceListRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ServiceListRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ServiceListRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *ServiceListRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *ServiceListRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *ServiceListRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *ServiceListRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *ServiceListRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *ServiceListRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *ServiceListRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *ServiceListRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *ServiceListRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *ServiceListRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *ServiceListRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *ServiceListRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *ServiceListRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *ServiceListRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *ServiceListRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *ServiceListRequest) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *ServiceListRequest) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *ServiceListRequest) GetLogisticsInNo() string {
	if x != nil && x.LogisticsInNo != nil {
		return *x.LogisticsInNo
	}
	return ""
}

func (x *ServiceListRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *ServiceListRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *ServiceListRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

type ServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ServiceListResponse) Reset() {
	*x = ServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListResponse) ProtoMessage() {}

func (x *ServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListResponse.ProtoReflect.Descriptor instead.
func (*ServiceListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{93}
}

func (x *ServiceListResponse) GetResults() []*ServiceResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ServiceListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ServiceOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeType     []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Type          []*LabelNumberValueResponse `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
	CreateType    []*LabelNumberValueResponse `protobuf:"bytes,3,rep,name=create_type,json=createType,proto3" json:"create_type,omitempty"`
	ServiceStatus []*LabelNumberValueResponse `protobuf:"bytes,4,rep,name=service_status,json=serviceStatus,proto3" json:"service_status,omitempty"`
	TradeStatus   []*LabelNumberValueResponse `protobuf:"bytes,5,rep,name=trade_status,json=tradeStatus,proto3" json:"trade_status,omitempty"`
	PayStatus     []*LabelNumberValueResponse `protobuf:"bytes,6,rep,name=pay_status,json=payStatus,proto3" json:"pay_status,omitempty"`
	ReasonType    []*LabelNumberValueResponse `protobuf:"bytes,7,rep,name=reason_type,json=reasonType,proto3" json:"reason_type,omitempty"`
	RecordType    []*LabelNumberValueResponse `protobuf:"bytes,8,rep,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`
	BuyerSource   []*LabelNumberValueResponse `protobuf:"bytes,9,rep,name=buyer_source,json=buyerSource,proto3" json:"buyer_source,omitempty"`
	Judgement     []*LabelNumberValueResponse `protobuf:"bytes,10,rep,name=judgement,proto3" json:"judgement,omitempty"`
}

func (x *ServiceOptionsResponse) Reset() {
	*x = ServiceOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceOptionsResponse) ProtoMessage() {}

func (x *ServiceOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceOptionsResponse.ProtoReflect.Descriptor instead.
func (*ServiceOptionsResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{94}
}

func (x *ServiceOptionsResponse) GetTradeType() []*LabelNumberValueResponse {
	if x != nil {
		return x.TradeType
	}
	return nil
}

func (x *ServiceOptionsResponse) GetType() []*LabelNumberValueResponse {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ServiceOptionsResponse) GetCreateType() []*LabelNumberValueResponse {
	if x != nil {
		return x.CreateType
	}
	return nil
}

func (x *ServiceOptionsResponse) GetServiceStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.ServiceStatus
	}
	return nil
}

func (x *ServiceOptionsResponse) GetTradeStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.TradeStatus
	}
	return nil
}

func (x *ServiceOptionsResponse) GetPayStatus() []*LabelNumberValueResponse {
	if x != nil {
		return x.PayStatus
	}
	return nil
}

func (x *ServiceOptionsResponse) GetReasonType() []*LabelNumberValueResponse {
	if x != nil {
		return x.ReasonType
	}
	return nil
}

func (x *ServiceOptionsResponse) GetRecordType() []*LabelNumberValueResponse {
	if x != nil {
		return x.RecordType
	}
	return nil
}

func (x *ServiceOptionsResponse) GetBuyerSource() []*LabelNumberValueResponse {
	if x != nil {
		return x.BuyerSource
	}
	return nil
}

func (x *ServiceOptionsResponse) GetJudgement() []*LabelNumberValueResponse {
	if x != nil {
		return x.Judgement
	}
	return nil
}

type ServicePartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string                       `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ComplainContent      *ObjectComplainRequest       `protobuf:"bytes,3,opt,name=complain_content,json=complainContent,proto3" json:"complain_content,omitempty"`
	SwapGoodsDetails     []*ServiceGoodsDetailRequest `protobuf:"bytes,4,rep,name=swap_goods_details,json=swapGoodsDetails,proto3" json:"swap_goods_details,omitempty"`
	PayDetails           []*ServicePayDetailRequest   `protobuf:"bytes,5,rep,name=pay_details,json=payDetails,proto3" json:"pay_details,omitempty"`
	StockOutDetails      []*ServiceStockOutRequest    `protobuf:"bytes,6,rep,name=stock_out_details,json=stockOutDetails,proto3" json:"stock_out_details,omitempty"`
	XPartialUpdateFields []string                     `protobuf:"bytes,7,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateName           *string                      `protobuf:"bytes,8,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType           *int32                       `protobuf:"varint,9,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	ApproveTime          *string                      `protobuf:"bytes,10,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName          *string                      `protobuf:"bytes,11,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons       *string                      `protobuf:"bytes,12,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons        *string                      `protobuf:"bytes,13,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons        *string                      `protobuf:"bytes,14,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	Sid                  string                       `protobuf:"bytes,15,opt,name=sid,proto3" json:"sid,omitempty"`
	TradeType            *int32                       `protobuf:"varint,16,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type                 *int32                       `protobuf:"varint,17,opt,name=type,proto3,oneof" json:"type,omitempty"`
	RecordType           *int32                       `protobuf:"varint,18,opt,name=record_type,json=recordType,proto3,oneof" json:"record_type,omitempty"`
	Judgement            *int32                       `protobuf:"varint,19,opt,name=judgement,proto3,oneof" json:"judgement,omitempty"`
	ServiceStatus        *int32                       `protobuf:"varint,20,opt,name=service_status,json=serviceStatus,proto3,oneof" json:"service_status,omitempty"`
	TradeStatus          *int32                       `protobuf:"varint,21,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus            *int32                       `protobuf:"varint,22,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime              *string                      `protobuf:"bytes,23,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm         *int32                       `protobuf:"varint,24,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick            *string                      `protobuf:"bytes,25,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile          *string                      `protobuf:"bytes,26,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage         *string                      `protobuf:"bytes,27,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	BuyerLabel           *string                      `protobuf:"bytes,28,opt,name=buyer_label,json=buyerLabel,proto3,oneof" json:"buyer_label,omitempty"`
	BuyerSource          *int32                       `protobuf:"varint,29,opt,name=buyer_source,json=buyerSource,proto3,oneof" json:"buyer_source,omitempty"`
	SellerName           *string                      `protobuf:"bytes,30,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo           *string                      `protobuf:"bytes,31,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo               *string                      `protobuf:"bytes,32,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *string                      `protobuf:"bytes,33,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo          *string                      `protobuf:"bytes,34,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string                      `protobuf:"bytes,35,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName         *string                      `protobuf:"bytes,36,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince     *string                      `protobuf:"bytes,37,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *string                      `protobuf:"bytes,38,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *string                      `protobuf:"bytes,39,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string                      `protobuf:"bytes,40,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string                      `protobuf:"bytes,41,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount           *float64                     `protobuf:"fixed64,42,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64                     `protobuf:"fixed64,43,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee            *float64                     `protobuf:"fixed64,44,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                 *float64                     `protobuf:"fixed64,45,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount            *float64                     `protobuf:"fixed64,46,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable           *float64                     `protobuf:"fixed64,47,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount             *float64                     `protobuf:"fixed64,48,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus        *int32                       `protobuf:"varint,49,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	LogisticsInName      *string                      `protobuf:"bytes,50,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode      *string                      `protobuf:"bytes,51,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsInNo        *string                      `protobuf:"bytes,52,opt,name=logistics_in_no,json=logisticsInNo,proto3,oneof" json:"logistics_in_no,omitempty"`
	WarehouseInNo        *string                      `protobuf:"bytes,53,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName      *string                      `protobuf:"bytes,54,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OuterNo              *string                      `protobuf:"bytes,55,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
}

func (x *ServicePartialUpdateRequest) Reset() {
	*x = ServicePartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePartialUpdateRequest) ProtoMessage() {}

func (x *ServicePartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServicePartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{95}
}

func (x *ServicePartialUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetComplainContent() *ObjectComplainRequest {
	if x != nil {
		return x.ComplainContent
	}
	return nil
}

func (x *ServicePartialUpdateRequest) GetSwapGoodsDetails() []*ServiceGoodsDetailRequest {
	if x != nil {
		return x.SwapGoodsDetails
	}
	return nil
}

func (x *ServicePartialUpdateRequest) GetPayDetails() []*ServicePayDetailRequest {
	if x != nil {
		return x.PayDetails
	}
	return nil
}

func (x *ServicePartialUpdateRequest) GetStockOutDetails() []*ServiceStockOutRequest {
	if x != nil {
		return x.StockOutDetails
	}
	return nil
}

func (x *ServicePartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ServicePartialUpdateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetRecordType() int32 {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetJudgement() int32 {
	if x != nil && x.Judgement != nil {
		return *x.Judgement
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetServiceStatus() int32 {
	if x != nil && x.ServiceStatus != nil {
		return *x.ServiceStatus
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetBuyerLabel() string {
	if x != nil && x.BuyerLabel != nil {
		return *x.BuyerLabel
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetBuyerSource() int32 {
	if x != nil && x.BuyerSource != nil {
		return *x.BuyerSource
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *ServicePartialUpdateRequest) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetLogisticsInNo() string {
	if x != nil && x.LogisticsInNo != nil {
		return *x.LogisticsInNo
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *ServicePartialUpdateRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

type ServicePayDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters             string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	PrepayId            *string `protobuf:"bytes,3,opt,name=prepay_id,json=prepayId,proto3,oneof" json:"prepay_id,omitempty"`
	PrepayExpired       *string `protobuf:"bytes,4,opt,name=prepay_expired,json=prepayExpired,proto3,oneof" json:"prepay_expired,omitempty"`
	TradeType           *string `protobuf:"bytes,5,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	TradeState          *string `protobuf:"bytes,6,opt,name=trade_state,json=tradeState,proto3,oneof" json:"trade_state,omitempty"`
	TradeStateDesc      *string `protobuf:"bytes,7,opt,name=trade_state_desc,json=tradeStateDesc,proto3,oneof" json:"trade_state_desc,omitempty"`
	TransactionId       *string `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	AppId               *string `protobuf:"bytes,9,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	MchId               *string `protobuf:"bytes,10,opt,name=mch_id,json=mchId,proto3,oneof" json:"mch_id,omitempty"`
	OpenId              string  `protobuf:"bytes,11,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutTradeNo          *string `protobuf:"bytes,12,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	Attach              *string `protobuf:"bytes,13,opt,name=attach,proto3,oneof" json:"attach,omitempty"`
	Total               *int32  `protobuf:"varint,14,opt,name=total,proto3,oneof" json:"total,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,15,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	Currency            *string `protobuf:"bytes,16,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	BankType            *string `protobuf:"bytes,17,opt,name=bank_type,json=bankType,proto3,oneof" json:"bank_type,omitempty"`
	SuccessTime         *string `protobuf:"bytes,18,opt,name=success_time,json=successTime,proto3,oneof" json:"success_time,omitempty"`
	OutRefundNo         *string `protobuf:"bytes,19,opt,name=out_refund_no,json=outRefundNo,proto3,oneof" json:"out_refund_no,omitempty"`
	Reason              *string `protobuf:"bytes,20,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Refund              *int32  `protobuf:"varint,21,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,22,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,23,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,24,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,25,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	RefundFee           *int32  `protobuf:"varint,26,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	RefundId            *string `protobuf:"bytes,27,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,28,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,29,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	Status              *string `protobuf:"bytes,30,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CancelReasons       *string `protobuf:"bytes,31,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	Service             *int64  `protobuf:"varint,32,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ServicePayDetailRequest) Reset() {
	*x = ServicePayDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePayDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePayDetailRequest) ProtoMessage() {}

func (x *ServicePayDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePayDetailRequest.ProtoReflect.Descriptor instead.
func (*ServicePayDetailRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{96}
}

func (x *ServicePayDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServicePayDetailRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ServicePayDetailRequest) GetPrepayId() string {
	if x != nil && x.PrepayId != nil {
		return *x.PrepayId
	}
	return ""
}

func (x *ServicePayDetailRequest) GetPrepayExpired() string {
	if x != nil && x.PrepayExpired != nil {
		return *x.PrepayExpired
	}
	return ""
}

func (x *ServicePayDetailRequest) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *ServicePayDetailRequest) GetTradeState() string {
	if x != nil && x.TradeState != nil {
		return *x.TradeState
	}
	return ""
}

func (x *ServicePayDetailRequest) GetTradeStateDesc() string {
	if x != nil && x.TradeStateDesc != nil {
		return *x.TradeStateDesc
	}
	return ""
}

func (x *ServicePayDetailRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *ServicePayDetailRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *ServicePayDetailRequest) GetMchId() string {
	if x != nil && x.MchId != nil {
		return *x.MchId
	}
	return ""
}

func (x *ServicePayDetailRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *ServicePayDetailRequest) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *ServicePayDetailRequest) GetAttach() string {
	if x != nil && x.Attach != nil {
		return *x.Attach
	}
	return ""
}

func (x *ServicePayDetailRequest) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *ServicePayDetailRequest) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *ServicePayDetailRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ServicePayDetailRequest) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *ServicePayDetailRequest) GetSuccessTime() string {
	if x != nil && x.SuccessTime != nil {
		return *x.SuccessTime
	}
	return ""
}

func (x *ServicePayDetailRequest) GetOutRefundNo() string {
	if x != nil && x.OutRefundNo != nil {
		return *x.OutRefundNo
	}
	return ""
}

func (x *ServicePayDetailRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *ServicePayDetailRequest) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *ServicePayDetailRequest) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *ServicePayDetailRequest) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *ServicePayDetailRequest) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *ServicePayDetailRequest) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *ServicePayDetailRequest) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *ServicePayDetailRequest) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *ServicePayDetailRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ServicePayDetailRequest) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *ServicePayDetailRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ServicePayDetailRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *ServicePayDetailRequest) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type ServicePayDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeTypeName       string  `protobuf:"bytes,2,opt,name=trade_type_name,json=tradeTypeName,proto3" json:"trade_type_name,omitempty"`
	CreateTime          string  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime          string  `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	PrepayId            *string `protobuf:"bytes,5,opt,name=prepay_id,json=prepayId,proto3,oneof" json:"prepay_id,omitempty"`
	PrepayExpired       *string `protobuf:"bytes,6,opt,name=prepay_expired,json=prepayExpired,proto3,oneof" json:"prepay_expired,omitempty"`
	TradeType           *string `protobuf:"bytes,7,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	TradeState          *string `protobuf:"bytes,8,opt,name=trade_state,json=tradeState,proto3,oneof" json:"trade_state,omitempty"`
	TradeStateDesc      *string `protobuf:"bytes,9,opt,name=trade_state_desc,json=tradeStateDesc,proto3,oneof" json:"trade_state_desc,omitempty"`
	TransactionId       *string `protobuf:"bytes,10,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	AppId               *string `protobuf:"bytes,11,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	MchId               *string `protobuf:"bytes,12,opt,name=mch_id,json=mchId,proto3,oneof" json:"mch_id,omitempty"`
	OpenId              string  `protobuf:"bytes,13,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutTradeNo          *string `protobuf:"bytes,14,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	Attach              *string `protobuf:"bytes,15,opt,name=attach,proto3,oneof" json:"attach,omitempty"`
	Total               *int32  `protobuf:"varint,16,opt,name=total,proto3,oneof" json:"total,omitempty"`
	PayerTotal          *int32  `protobuf:"varint,17,opt,name=payer_total,json=payerTotal,proto3,oneof" json:"payer_total,omitempty"`
	Currency            *string `protobuf:"bytes,18,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	BankType            *string `protobuf:"bytes,19,opt,name=bank_type,json=bankType,proto3,oneof" json:"bank_type,omitempty"`
	SuccessTime         *string `protobuf:"bytes,20,opt,name=success_time,json=successTime,proto3,oneof" json:"success_time,omitempty"`
	OutRefundNo         *string `protobuf:"bytes,21,opt,name=out_refund_no,json=outRefundNo,proto3,oneof" json:"out_refund_no,omitempty"`
	Reason              *string `protobuf:"bytes,22,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Refund              *int32  `protobuf:"varint,23,opt,name=refund,proto3,oneof" json:"refund,omitempty"`
	PayerRefund         *int32  `protobuf:"varint,24,opt,name=payer_refund,json=payerRefund,proto3,oneof" json:"payer_refund,omitempty"`
	SettlementRefund    *int32  `protobuf:"varint,25,opt,name=settlement_refund,json=settlementRefund,proto3,oneof" json:"settlement_refund,omitempty"`
	SettlementTotal     *int32  `protobuf:"varint,26,opt,name=settlement_total,json=settlementTotal,proto3,oneof" json:"settlement_total,omitempty"`
	DiscountRefund      *int32  `protobuf:"varint,27,opt,name=discount_refund,json=discountRefund,proto3,oneof" json:"discount_refund,omitempty"`
	RefundFee           *int32  `protobuf:"varint,28,opt,name=refund_fee,json=refundFee,proto3,oneof" json:"refund_fee,omitempty"`
	RefundId            *string `protobuf:"bytes,29,opt,name=refund_id,json=refundId,proto3,oneof" json:"refund_id,omitempty"`
	Channel             *string `protobuf:"bytes,30,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	UserReceivedAccount *string `protobuf:"bytes,31,opt,name=user_received_account,json=userReceivedAccount,proto3,oneof" json:"user_received_account,omitempty"`
	Status              *string `protobuf:"bytes,32,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CancelReasons       *string `protobuf:"bytes,33,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	Service             *int64  `protobuf:"varint,34,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ServicePayDetailResponse) Reset() {
	*x = ServicePayDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePayDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePayDetailResponse) ProtoMessage() {}

func (x *ServicePayDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePayDetailResponse.ProtoReflect.Descriptor instead.
func (*ServicePayDetailResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{97}
}

func (x *ServicePayDetailResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServicePayDetailResponse) GetTradeTypeName() string {
	if x != nil {
		return x.TradeTypeName
	}
	return ""
}

func (x *ServicePayDetailResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServicePayDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServicePayDetailResponse) GetPrepayId() string {
	if x != nil && x.PrepayId != nil {
		return *x.PrepayId
	}
	return ""
}

func (x *ServicePayDetailResponse) GetPrepayExpired() string {
	if x != nil && x.PrepayExpired != nil {
		return *x.PrepayExpired
	}
	return ""
}

func (x *ServicePayDetailResponse) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *ServicePayDetailResponse) GetTradeState() string {
	if x != nil && x.TradeState != nil {
		return *x.TradeState
	}
	return ""
}

func (x *ServicePayDetailResponse) GetTradeStateDesc() string {
	if x != nil && x.TradeStateDesc != nil {
		return *x.TradeStateDesc
	}
	return ""
}

func (x *ServicePayDetailResponse) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *ServicePayDetailResponse) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *ServicePayDetailResponse) GetMchId() string {
	if x != nil && x.MchId != nil {
		return *x.MchId
	}
	return ""
}

func (x *ServicePayDetailResponse) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *ServicePayDetailResponse) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *ServicePayDetailResponse) GetAttach() string {
	if x != nil && x.Attach != nil {
		return *x.Attach
	}
	return ""
}

func (x *ServicePayDetailResponse) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *ServicePayDetailResponse) GetPayerTotal() int32 {
	if x != nil && x.PayerTotal != nil {
		return *x.PayerTotal
	}
	return 0
}

func (x *ServicePayDetailResponse) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ServicePayDetailResponse) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *ServicePayDetailResponse) GetSuccessTime() string {
	if x != nil && x.SuccessTime != nil {
		return *x.SuccessTime
	}
	return ""
}

func (x *ServicePayDetailResponse) GetOutRefundNo() string {
	if x != nil && x.OutRefundNo != nil {
		return *x.OutRefundNo
	}
	return ""
}

func (x *ServicePayDetailResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *ServicePayDetailResponse) GetRefund() int32 {
	if x != nil && x.Refund != nil {
		return *x.Refund
	}
	return 0
}

func (x *ServicePayDetailResponse) GetPayerRefund() int32 {
	if x != nil && x.PayerRefund != nil {
		return *x.PayerRefund
	}
	return 0
}

func (x *ServicePayDetailResponse) GetSettlementRefund() int32 {
	if x != nil && x.SettlementRefund != nil {
		return *x.SettlementRefund
	}
	return 0
}

func (x *ServicePayDetailResponse) GetSettlementTotal() int32 {
	if x != nil && x.SettlementTotal != nil {
		return *x.SettlementTotal
	}
	return 0
}

func (x *ServicePayDetailResponse) GetDiscountRefund() int32 {
	if x != nil && x.DiscountRefund != nil {
		return *x.DiscountRefund
	}
	return 0
}

func (x *ServicePayDetailResponse) GetRefundFee() int32 {
	if x != nil && x.RefundFee != nil {
		return *x.RefundFee
	}
	return 0
}

func (x *ServicePayDetailResponse) GetRefundId() string {
	if x != nil && x.RefundId != nil {
		return *x.RefundId
	}
	return ""
}

func (x *ServicePayDetailResponse) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ServicePayDetailResponse) GetUserReceivedAccount() string {
	if x != nil && x.UserReceivedAccount != nil {
		return *x.UserReceivedAccount
	}
	return ""
}

func (x *ServicePayDetailResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ServicePayDetailResponse) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *ServicePayDetailResponse) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type ServiceReasonChildrenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	TradeType  int32   `protobuf:"varint,4,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ReasonType *int32  `protobuf:"varint,5,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	ReasonCode int32   `protobuf:"varint,6,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName string  `protobuf:"bytes,7,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ReasonDesc *string `protobuf:"bytes,8,opt,name=reason_desc,json=reasonDesc,proto3,oneof" json:"reason_desc,omitempty"`
	WithRemark *bool   `protobuf:"varint,9,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsValid    bool    `protobuf:"varint,10,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsReserved *bool   `protobuf:"varint,11,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	Parent     *int64  `protobuf:"varint,12,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ServiceReasonChildrenResponse) Reset() {
	*x = ServiceReasonChildrenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceReasonChildrenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceReasonChildrenResponse) ProtoMessage() {}

func (x *ServiceReasonChildrenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceReasonChildrenResponse.ProtoReflect.Descriptor instead.
func (*ServiceReasonChildrenResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{98}
}

func (x *ServiceReasonChildrenResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceReasonChildrenResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceReasonChildrenResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceReasonChildrenResponse) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *ServiceReasonChildrenResponse) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *ServiceReasonChildrenResponse) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *ServiceReasonChildrenResponse) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *ServiceReasonChildrenResponse) GetReasonDesc() string {
	if x != nil && x.ReasonDesc != nil {
		return *x.ReasonDesc
	}
	return ""
}

func (x *ServiceReasonChildrenResponse) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *ServiceReasonChildrenResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ServiceReasonChildrenResponse) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *ServiceReasonChildrenResponse) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ServiceReasonListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceReasonResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ServiceReasonListResponse) Reset() {
	*x = ServiceReasonListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceReasonListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceReasonListResponse) ProtoMessage() {}

func (x *ServiceReasonListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceReasonListResponse.ProtoReflect.Descriptor instead.
func (*ServiceReasonListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{99}
}

func (x *ServiceReasonListResponse) GetResults() []*ServiceReasonResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ServiceReasonListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ServiceReasonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Children   []*ServiceReasonChildrenResponse `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	CreateTime string                           `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string                           `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	TradeType  int32                            `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ReasonType *int32                           `protobuf:"varint,6,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	ReasonCode int32                            `protobuf:"varint,7,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName string                           `protobuf:"bytes,8,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ReasonDesc *string                          `protobuf:"bytes,9,opt,name=reason_desc,json=reasonDesc,proto3,oneof" json:"reason_desc,omitempty"`
	WithRemark *bool                            `protobuf:"varint,10,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsValid    bool                             `protobuf:"varint,11,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsReserved *bool                            `protobuf:"varint,12,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	Parent     *int64                           `protobuf:"varint,13,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *ServiceReasonResponse) Reset() {
	*x = ServiceReasonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceReasonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceReasonResponse) ProtoMessage() {}

func (x *ServiceReasonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceReasonResponse.ProtoReflect.Descriptor instead.
func (*ServiceReasonResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{100}
}

func (x *ServiceReasonResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceReasonResponse) GetChildren() []*ServiceReasonChildrenResponse {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ServiceReasonResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceReasonResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceReasonResponse) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *ServiceReasonResponse) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *ServiceReasonResponse) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *ServiceReasonResponse) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *ServiceReasonResponse) GetReasonDesc() string {
	if x != nil && x.ReasonDesc != nil {
		return *x.ReasonDesc
	}
	return ""
}

func (x *ServiceReasonResponse) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *ServiceReasonResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ServiceReasonResponse) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *ServiceReasonResponse) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type ServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters          string                       `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ComplainContent  *ObjectComplainRequest       `protobuf:"bytes,3,opt,name=complain_content,json=complainContent,proto3" json:"complain_content,omitempty"`
	SwapGoodsDetails []*ServiceGoodsDetailRequest `protobuf:"bytes,4,rep,name=swap_goods_details,json=swapGoodsDetails,proto3" json:"swap_goods_details,omitempty"`
	PayDetails       []*ServicePayDetailRequest   `protobuf:"bytes,5,rep,name=pay_details,json=payDetails,proto3" json:"pay_details,omitempty"`
	StockOutDetails  []*ServiceStockOutRequest    `protobuf:"bytes,6,rep,name=stock_out_details,json=stockOutDetails,proto3" json:"stock_out_details,omitempty"`
	CreateName       *string                      `protobuf:"bytes,7,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType       *int32                       `protobuf:"varint,8,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	ApproveTime      *string                      `protobuf:"bytes,9,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName      *string                      `protobuf:"bytes,10,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons   *string                      `protobuf:"bytes,11,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons    *string                      `protobuf:"bytes,12,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons    *string                      `protobuf:"bytes,13,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	Sid              string                       `protobuf:"bytes,14,opt,name=sid,proto3" json:"sid,omitempty"`
	TradeType        *int32                       `protobuf:"varint,15,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type             *int32                       `protobuf:"varint,16,opt,name=type,proto3,oneof" json:"type,omitempty"`
	RecordType       *int32                       `protobuf:"varint,17,opt,name=record_type,json=recordType,proto3,oneof" json:"record_type,omitempty"`
	Judgement        *int32                       `protobuf:"varint,18,opt,name=judgement,proto3,oneof" json:"judgement,omitempty"`
	ServiceStatus    *int32                       `protobuf:"varint,19,opt,name=service_status,json=serviceStatus,proto3,oneof" json:"service_status,omitempty"`
	TradeStatus      *int32                       `protobuf:"varint,20,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus        *int32                       `protobuf:"varint,21,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string                      `protobuf:"bytes,22,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm     *int32                       `protobuf:"varint,23,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick        *string                      `protobuf:"bytes,24,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile      *string                      `protobuf:"bytes,25,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage     *string                      `protobuf:"bytes,26,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	BuyerLabel       *string                      `protobuf:"bytes,27,opt,name=buyer_label,json=buyerLabel,proto3,oneof" json:"buyer_label,omitempty"`
	BuyerSource      *int32                       `protobuf:"varint,28,opt,name=buyer_source,json=buyerSource,proto3,oneof" json:"buyer_source,omitempty"`
	SellerName       *string                      `protobuf:"bytes,29,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo       *string                      `protobuf:"bytes,30,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo           *string                      `protobuf:"bytes,31,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName         *string                      `protobuf:"bytes,32,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo      *string                      `protobuf:"bytes,33,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName    *string                      `protobuf:"bytes,34,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName     *string                      `protobuf:"bytes,35,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string                      `protobuf:"bytes,36,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string                      `protobuf:"bytes,37,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string                      `protobuf:"bytes,38,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string                      `protobuf:"bytes,39,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string                      `protobuf:"bytes,40,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount       *float64                     `protobuf:"fixed64,41,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount      *float64                     `protobuf:"fixed64,42,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64                     `protobuf:"fixed64,43,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid             *float64                     `protobuf:"fixed64,44,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount        *float64                     `protobuf:"fixed64,45,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable       *float64                     `protobuf:"fixed64,46,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount         *float64                     `protobuf:"fixed64,47,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus    *int32                       `protobuf:"varint,48,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	LogisticsInName  *string                      `protobuf:"bytes,49,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode  *string                      `protobuf:"bytes,50,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsInNo    *string                      `protobuf:"bytes,51,opt,name=logistics_in_no,json=logisticsInNo,proto3,oneof" json:"logistics_in_no,omitempty"`
	WarehouseInNo    *string                      `protobuf:"bytes,52,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName  *string                      `protobuf:"bytes,53,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OuterNo          *string                      `protobuf:"bytes,54,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
}

func (x *ServiceRequest) Reset() {
	*x = ServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequest) ProtoMessage() {}

func (x *ServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequest.ProtoReflect.Descriptor instead.
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{101}
}

func (x *ServiceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ServiceRequest) GetComplainContent() *ObjectComplainRequest {
	if x != nil {
		return x.ComplainContent
	}
	return nil
}

func (x *ServiceRequest) GetSwapGoodsDetails() []*ServiceGoodsDetailRequest {
	if x != nil {
		return x.SwapGoodsDetails
	}
	return nil
}

func (x *ServiceRequest) GetPayDetails() []*ServicePayDetailRequest {
	if x != nil {
		return x.PayDetails
	}
	return nil
}

func (x *ServiceRequest) GetStockOutDetails() []*ServiceStockOutRequest {
	if x != nil {
		return x.StockOutDetails
	}
	return nil
}

func (x *ServiceRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *ServiceRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *ServiceRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *ServiceRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *ServiceRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *ServiceRequest) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *ServiceRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *ServiceRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *ServiceRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *ServiceRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ServiceRequest) GetRecordType() int32 {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return 0
}

func (x *ServiceRequest) GetJudgement() int32 {
	if x != nil && x.Judgement != nil {
		return *x.Judgement
	}
	return 0
}

func (x *ServiceRequest) GetServiceStatus() int32 {
	if x != nil && x.ServiceStatus != nil {
		return *x.ServiceStatus
	}
	return 0
}

func (x *ServiceRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *ServiceRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *ServiceRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *ServiceRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *ServiceRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *ServiceRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *ServiceRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *ServiceRequest) GetBuyerLabel() string {
	if x != nil && x.BuyerLabel != nil {
		return *x.BuyerLabel
	}
	return ""
}

func (x *ServiceRequest) GetBuyerSource() int32 {
	if x != nil && x.BuyerSource != nil {
		return *x.BuyerSource
	}
	return 0
}

func (x *ServiceRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *ServiceRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *ServiceRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ServiceRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ServiceRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *ServiceRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *ServiceRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *ServiceRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *ServiceRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *ServiceRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *ServiceRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *ServiceRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *ServiceRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *ServiceRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *ServiceRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *ServiceRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *ServiceRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *ServiceRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *ServiceRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *ServiceRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *ServiceRequest) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *ServiceRequest) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *ServiceRequest) GetLogisticsInNo() string {
	if x != nil && x.LogisticsInNo != nil {
		return *x.LogisticsInNo
	}
	return ""
}

func (x *ServiceRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *ServiceRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *ServiceRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

type ServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTypeName    string                        `protobuf:"bytes,2,opt,name=create_type_name,json=createTypeName,proto3" json:"create_type_name,omitempty"`
	TradeTypeName     string                        `protobuf:"bytes,3,opt,name=trade_type_name,json=tradeTypeName,proto3" json:"trade_type_name,omitempty"`
	TypeName          string                        `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	ServiceStatusName string                        `protobuf:"bytes,5,opt,name=service_status_name,json=serviceStatusName,proto3" json:"service_status_name,omitempty"`
	TradeStatusName   string                        `protobuf:"bytes,6,opt,name=trade_status_name,json=tradeStatusName,proto3" json:"trade_status_name,omitempty"`
	PayStatusName     string                        `protobuf:"bytes,7,opt,name=pay_status_name,json=payStatusName,proto3" json:"pay_status_name,omitempty"`
	DeliveryTermName  string                        `protobuf:"bytes,8,opt,name=delivery_term_name,json=deliveryTermName,proto3" json:"delivery_term_name,omitempty"`
	InvoiceStatusName string                        `protobuf:"bytes,9,opt,name=invoice_status_name,json=invoiceStatusName,proto3" json:"invoice_status_name,omitempty"`
	RecordTypeName    string                        `protobuf:"bytes,10,opt,name=record_type_name,json=recordTypeName,proto3" json:"record_type_name,omitempty"`
	BuyerSourceName   string                        `protobuf:"bytes,11,opt,name=buyer_source_name,json=buyerSourceName,proto3" json:"buyer_source_name,omitempty"`
	JudgementName     string                        `protobuf:"bytes,12,opt,name=judgement_name,json=judgementName,proto3" json:"judgement_name,omitempty"`
	ComplainContent   *ObjectComplainResponse       `protobuf:"bytes,13,opt,name=complain_content,json=complainContent,proto3" json:"complain_content,omitempty"`
	SwapGoodsDetails  []*ServiceGoodsDetailResponse `protobuf:"bytes,14,rep,name=swap_goods_details,json=swapGoodsDetails,proto3" json:"swap_goods_details,omitempty"`
	PayDetails        []*ServicePayDetailResponse   `protobuf:"bytes,15,rep,name=pay_details,json=payDetails,proto3" json:"pay_details,omitempty"`
	StockOutDetails   []*ServiceStockOutResponse    `protobuf:"bytes,16,rep,name=stock_out_details,json=stockOutDetails,proto3" json:"stock_out_details,omitempty"`
	CreateTime        string                        `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime        string                        `protobuf:"bytes,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CreateName        *string                       `protobuf:"bytes,19,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType        *int32                        `protobuf:"varint,20,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	ApproveTime       *string                       `protobuf:"bytes,21,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName       *string                       `protobuf:"bytes,22,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons    *string                       `protobuf:"bytes,23,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons     *string                       `protobuf:"bytes,24,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons     *string                       `protobuf:"bytes,25,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	Sid               string                        `protobuf:"bytes,26,opt,name=sid,proto3" json:"sid,omitempty"`
	TradeType         *int32                        `protobuf:"varint,27,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type              *int32                        `protobuf:"varint,28,opt,name=type,proto3,oneof" json:"type,omitempty"`
	RecordType        *int32                        `protobuf:"varint,29,opt,name=record_type,json=recordType,proto3,oneof" json:"record_type,omitempty"`
	Judgement         *int32                        `protobuf:"varint,30,opt,name=judgement,proto3,oneof" json:"judgement,omitempty"`
	ServiceStatus     *int32                        `protobuf:"varint,31,opt,name=service_status,json=serviceStatus,proto3,oneof" json:"service_status,omitempty"`
	TradeStatus       *int32                        `protobuf:"varint,32,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus         *int32                        `protobuf:"varint,33,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime           *string                       `protobuf:"bytes,34,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm      *int32                        `protobuf:"varint,35,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick         *string                       `protobuf:"bytes,36,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile       *string                       `protobuf:"bytes,37,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage      *string                       `protobuf:"bytes,38,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	BuyerLabel        *string                       `protobuf:"bytes,39,opt,name=buyer_label,json=buyerLabel,proto3,oneof" json:"buyer_label,omitempty"`
	BuyerSource       *int32                        `protobuf:"varint,40,opt,name=buyer_source,json=buyerSource,proto3,oneof" json:"buyer_source,omitempty"`
	SellerName        *string                       `protobuf:"bytes,41,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo        *string                       `protobuf:"bytes,42,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo            *string                       `protobuf:"bytes,43,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName          *string                       `protobuf:"bytes,44,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo       *string                       `protobuf:"bytes,45,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName     *string                       `protobuf:"bytes,46,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName      *string                       `protobuf:"bytes,47,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince  *string                       `protobuf:"bytes,48,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity      *string                       `protobuf:"bytes,49,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict  *string                       `protobuf:"bytes,50,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress   *string                       `protobuf:"bytes,51,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile    *string                       `protobuf:"bytes,52,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount        *float64                      `protobuf:"fixed64,53,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount       *float64                      `protobuf:"fixed64,54,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee         *float64                      `protobuf:"fixed64,55,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid              *float64                      `protobuf:"fixed64,56,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount         *float64                      `protobuf:"fixed64,57,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable        *float64                      `protobuf:"fixed64,58,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount          *float64                      `protobuf:"fixed64,59,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus     *int32                        `protobuf:"varint,60,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	LogisticsInName   *string                       `protobuf:"bytes,61,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode   *string                       `protobuf:"bytes,62,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsInNo     *string                       `protobuf:"bytes,63,opt,name=logistics_in_no,json=logisticsInNo,proto3,oneof" json:"logistics_in_no,omitempty"`
	WarehouseInNo     *string                       `protobuf:"bytes,64,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName   *string                       `protobuf:"bytes,65,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OuterNo           *string                       `protobuf:"bytes,66,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
}

func (x *ServiceResponse) Reset() {
	*x = ServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceResponse) ProtoMessage() {}

func (x *ServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceResponse.ProtoReflect.Descriptor instead.
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{102}
}

func (x *ServiceResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceResponse) GetCreateTypeName() string {
	if x != nil {
		return x.CreateTypeName
	}
	return ""
}

func (x *ServiceResponse) GetTradeTypeName() string {
	if x != nil {
		return x.TradeTypeName
	}
	return ""
}

func (x *ServiceResponse) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ServiceResponse) GetServiceStatusName() string {
	if x != nil {
		return x.ServiceStatusName
	}
	return ""
}

func (x *ServiceResponse) GetTradeStatusName() string {
	if x != nil {
		return x.TradeStatusName
	}
	return ""
}

func (x *ServiceResponse) GetPayStatusName() string {
	if x != nil {
		return x.PayStatusName
	}
	return ""
}

func (x *ServiceResponse) GetDeliveryTermName() string {
	if x != nil {
		return x.DeliveryTermName
	}
	return ""
}

func (x *ServiceResponse) GetInvoiceStatusName() string {
	if x != nil {
		return x.InvoiceStatusName
	}
	return ""
}

func (x *ServiceResponse) GetRecordTypeName() string {
	if x != nil {
		return x.RecordTypeName
	}
	return ""
}

func (x *ServiceResponse) GetBuyerSourceName() string {
	if x != nil {
		return x.BuyerSourceName
	}
	return ""
}

func (x *ServiceResponse) GetJudgementName() string {
	if x != nil {
		return x.JudgementName
	}
	return ""
}

func (x *ServiceResponse) GetComplainContent() *ObjectComplainResponse {
	if x != nil {
		return x.ComplainContent
	}
	return nil
}

func (x *ServiceResponse) GetSwapGoodsDetails() []*ServiceGoodsDetailResponse {
	if x != nil {
		return x.SwapGoodsDetails
	}
	return nil
}

func (x *ServiceResponse) GetPayDetails() []*ServicePayDetailResponse {
	if x != nil {
		return x.PayDetails
	}
	return nil
}

func (x *ServiceResponse) GetStockOutDetails() []*ServiceStockOutResponse {
	if x != nil {
		return x.StockOutDetails
	}
	return nil
}

func (x *ServiceResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceResponse) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *ServiceResponse) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *ServiceResponse) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *ServiceResponse) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *ServiceResponse) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *ServiceResponse) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *ServiceResponse) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *ServiceResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *ServiceResponse) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *ServiceResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ServiceResponse) GetRecordType() int32 {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return 0
}

func (x *ServiceResponse) GetJudgement() int32 {
	if x != nil && x.Judgement != nil {
		return *x.Judgement
	}
	return 0
}

func (x *ServiceResponse) GetServiceStatus() int32 {
	if x != nil && x.ServiceStatus != nil {
		return *x.ServiceStatus
	}
	return 0
}

func (x *ServiceResponse) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *ServiceResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *ServiceResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *ServiceResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *ServiceResponse) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *ServiceResponse) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *ServiceResponse) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *ServiceResponse) GetBuyerLabel() string {
	if x != nil && x.BuyerLabel != nil {
		return *x.BuyerLabel
	}
	return ""
}

func (x *ServiceResponse) GetBuyerSource() int32 {
	if x != nil && x.BuyerSource != nil {
		return *x.BuyerSource
	}
	return 0
}

func (x *ServiceResponse) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *ServiceResponse) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *ServiceResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ServiceResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ServiceResponse) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *ServiceResponse) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *ServiceResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *ServiceResponse) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *ServiceResponse) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *ServiceResponse) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *ServiceResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *ServiceResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *ServiceResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *ServiceResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *ServiceResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *ServiceResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *ServiceResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *ServiceResponse) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *ServiceResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *ServiceResponse) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *ServiceResponse) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *ServiceResponse) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *ServiceResponse) GetLogisticsInNo() string {
	if x != nil && x.LogisticsInNo != nil {
		return *x.LogisticsInNo
	}
	return ""
}

func (x *ServiceResponse) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *ServiceResponse) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *ServiceResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

type ServiceRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ServiceRetrieveRequest) Reset() {
	*x = ServiceRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRetrieveRequest) ProtoMessage() {}

func (x *ServiceRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ServiceRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{103}
}

func (x *ServiceRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ServiceStockOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters        string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	SrcOrderNo     *string `protobuf:"bytes,3,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo     *string `protobuf:"bytes,4,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo        *string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName  *string `protobuf:"bytes,6,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status         *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName  *string `protobuf:"bytes,8,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode  *string `protobuf:"bytes,9,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo    *string `protobuf:"bytes,10,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime    *string `protobuf:"bytes,11,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime *string `protobuf:"bytes,12,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified       *string `protobuf:"bytes,13,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo        *string `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName      *string `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName       *string `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo         *string `protobuf:"bytes,17,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount     float64 `protobuf:"fixed64,18,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	Service        *int64  `protobuf:"varint,19,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ServiceStockOutRequest) Reset() {
	*x = ServiceStockOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStockOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStockOutRequest) ProtoMessage() {}

func (x *ServiceStockOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStockOutRequest.ProtoReflect.Descriptor instead.
func (*ServiceStockOutRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{104}
}

func (x *ServiceStockOutRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceStockOutRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ServiceStockOutRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *ServiceStockOutRequest) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *ServiceStockOutRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *ServiceStockOutRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *ServiceStockOutRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ServiceStockOutRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *ServiceStockOutRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *ServiceStockOutRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *ServiceStockOutRequest) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *ServiceStockOutRequest) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *ServiceStockOutRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *ServiceStockOutRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ServiceStockOutRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ServiceStockOutRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ServiceStockOutRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *ServiceStockOutRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *ServiceStockOutRequest) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type ServiceStockOutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime     string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SrcOrderNo     *string `protobuf:"bytes,4,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo     *string `protobuf:"bytes,5,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo        *string `protobuf:"bytes,6,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName  *string `protobuf:"bytes,7,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status         *string `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName  *string `protobuf:"bytes,9,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode  *string `protobuf:"bytes,10,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo    *string `protobuf:"bytes,11,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime    *string `protobuf:"bytes,12,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime *string `protobuf:"bytes,13,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified       *string `protobuf:"bytes,14,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo        *string `protobuf:"bytes,15,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName      *string `protobuf:"bytes,16,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName       *string `protobuf:"bytes,17,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo         *string `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount     float64 `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	Service        *int64  `protobuf:"varint,20,opt,name=service,proto3,oneof" json:"service,omitempty"`
}

func (x *ServiceStockOutResponse) Reset() {
	*x = ServiceStockOutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStockOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStockOutResponse) ProtoMessage() {}

func (x *ServiceStockOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStockOutResponse.ProtoReflect.Descriptor instead.
func (*ServiceStockOutResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{105}
}

func (x *ServiceStockOutResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceStockOutResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceStockOutResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceStockOutResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *ServiceStockOutResponse) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *ServiceStockOutResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *ServiceStockOutResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *ServiceStockOutResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ServiceStockOutResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *ServiceStockOutResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *ServiceStockOutResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *ServiceStockOutResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *ServiceStockOutResponse) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *ServiceStockOutResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *ServiceStockOutResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *ServiceStockOutResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *ServiceStockOutResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ServiceStockOutResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *ServiceStockOutResponse) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *ServiceStockOutResponse) GetService() int64 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

type ShopInfoListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId       int32   `protobuf:"varint,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	Filters      string  `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ShopNo       *string `protobuf:"bytes,3,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName     *string `protobuf:"bytes,4,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ProvinceName *string `protobuf:"bytes,5,opt,name=province_name,json=provinceName,proto3,oneof" json:"province_name,omitempty"`
	CityName     *string `protobuf:"bytes,6,opt,name=city_name,json=cityName,proto3,oneof" json:"city_name,omitempty"`
	DistrictName *string `protobuf:"bytes,7,opt,name=district_name,json=districtName,proto3,oneof" json:"district_name,omitempty"`
	Address      *string `protobuf:"bytes,8,opt,name=address,proto3,oneof" json:"address,omitempty"`
	IsDisabled   *bool   `protobuf:"varint,9,opt,name=is_disabled,json=isDisabled,proto3,oneof" json:"is_disabled,omitempty"`
	SalesBuId    *int32  `protobuf:"varint,10,opt,name=sales_bu_id,json=salesBuId,proto3,oneof" json:"sales_bu_id,omitempty"`
	DisplayName  *string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Visible      *bool   `protobuf:"varint,12,opt,name=visible,proto3,oneof" json:"visible,omitempty"`
}

func (x *ShopInfoListRequest) Reset() {
	*x = ShopInfoListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopInfoListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopInfoListRequest) ProtoMessage() {}

func (x *ShopInfoListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopInfoListRequest.ProtoReflect.Descriptor instead.
func (*ShopInfoListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{106}
}

func (x *ShopInfoListRequest) GetShopId() int32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopInfoListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *ShopInfoListRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ShopInfoListRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ShopInfoListRequest) GetProvinceName() string {
	if x != nil && x.ProvinceName != nil {
		return *x.ProvinceName
	}
	return ""
}

func (x *ShopInfoListRequest) GetCityName() string {
	if x != nil && x.CityName != nil {
		return *x.CityName
	}
	return ""
}

func (x *ShopInfoListRequest) GetDistrictName() string {
	if x != nil && x.DistrictName != nil {
		return *x.DistrictName
	}
	return ""
}

func (x *ShopInfoListRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ShopInfoListRequest) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *ShopInfoListRequest) GetSalesBuId() int32 {
	if x != nil && x.SalesBuId != nil {
		return *x.SalesBuId
	}
	return 0
}

func (x *ShopInfoListRequest) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ShopInfoListRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

type ShopInfoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ShopInfoResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ShopInfoListResponse) Reset() {
	*x = ShopInfoListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopInfoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopInfoListResponse) ProtoMessage() {}

func (x *ShopInfoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopInfoListResponse.ProtoReflect.Descriptor instead.
func (*ShopInfoListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{107}
}

func (x *ShopInfoListResponse) GetResults() []*ShopInfoResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ShopInfoListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ShopInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId       int32   `protobuf:"varint,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	ShopNo       *string `protobuf:"bytes,2,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName     *string `protobuf:"bytes,3,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	ProvinceName *string `protobuf:"bytes,4,opt,name=province_name,json=provinceName,proto3,oneof" json:"province_name,omitempty"`
	CityName     *string `protobuf:"bytes,5,opt,name=city_name,json=cityName,proto3,oneof" json:"city_name,omitempty"`
	DistrictName *string `protobuf:"bytes,6,opt,name=district_name,json=districtName,proto3,oneof" json:"district_name,omitempty"`
	Address      *string `protobuf:"bytes,7,opt,name=address,proto3,oneof" json:"address,omitempty"`
	IsDisabled   *bool   `protobuf:"varint,8,opt,name=is_disabled,json=isDisabled,proto3,oneof" json:"is_disabled,omitempty"`
	SalesBuId    *int32  `protobuf:"varint,9,opt,name=sales_bu_id,json=salesBuId,proto3,oneof" json:"sales_bu_id,omitempty"`
	DisplayName  *string `protobuf:"bytes,10,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Visible      *bool   `protobuf:"varint,11,opt,name=visible,proto3,oneof" json:"visible,omitempty"`
}

func (x *ShopInfoResponse) Reset() {
	*x = ShopInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopInfoResponse) ProtoMessage() {}

func (x *ShopInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopInfoResponse.ProtoReflect.Descriptor instead.
func (*ShopInfoResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{108}
}

func (x *ShopInfoResponse) GetShopId() int32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopInfoResponse) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *ShopInfoResponse) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *ShopInfoResponse) GetProvinceName() string {
	if x != nil && x.ProvinceName != nil {
		return *x.ProvinceName
	}
	return ""
}

func (x *ShopInfoResponse) GetCityName() string {
	if x != nil && x.CityName != nil {
		return *x.CityName
	}
	return ""
}

func (x *ShopInfoResponse) GetDistrictName() string {
	if x != nil && x.DistrictName != nil {
		return *x.DistrictName
	}
	return ""
}

func (x *ShopInfoResponse) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ShopInfoResponse) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *ShopInfoResponse) GetSalesBuId() int32 {
	if x != nil && x.SalesBuId != nil {
		return *x.SalesBuId
	}
	return 0
}

func (x *ShopInfoResponse) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ShopInfoResponse) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

type SupplierTradeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodsList        []*SupplierTradeGoodsDetailsRequest `protobuf:"bytes,3,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	CreateName       *string                             `protobuf:"bytes,4,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType       *int32                              `protobuf:"varint,5,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	Tid              string                              `protobuf:"bytes,6,opt,name=tid,proto3" json:"tid,omitempty"`
	TradeStatus      *int32                              `protobuf:"varint,7,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus        *int32                              `protobuf:"varint,8,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime          *string                             `protobuf:"bytes,9,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm     *int32                              `protobuf:"varint,10,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick        string                              `protobuf:"bytes,11,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile      *string                             `protobuf:"bytes,12,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage     *string                             `protobuf:"bytes,13,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	SellerMemo       *string                             `protobuf:"bytes,14,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	SellerName       *string                             `protobuf:"bytes,15,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	ShopNo           string                              `protobuf:"bytes,16,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName         string                              `protobuf:"bytes,17,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo      string                              `protobuf:"bytes,18,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName    string                              `protobuf:"bytes,19,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ReceiverName     *string                             `protobuf:"bytes,20,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince *string                             `protobuf:"bytes,21,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity     *string                             `protobuf:"bytes,22,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict *string                             `protobuf:"bytes,23,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress  *string                             `protobuf:"bytes,24,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile   *string                             `protobuf:"bytes,25,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	Paid             *float64                            `protobuf:"fixed64,26,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	PostAmount       *float64                            `protobuf:"fixed64,27,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount      *float64                            `protobuf:"fixed64,28,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee        *float64                            `protobuf:"fixed64,29,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	CodAmount        *float64                            `protobuf:"fixed64,30,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable       *float64                            `protobuf:"fixed64,31,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount         *float64                            `protobuf:"fixed64,32,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus    *int32                              `protobuf:"varint,33,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	DeliverNotice    *int64                              `protobuf:"varint,34,opt,name=deliver_notice,json=deliverNotice,proto3,oneof" json:"deliver_notice,omitempty"`
	StockInData      []*TradeGoodsEpcRequest             `protobuf:"bytes,35,rep,name=stock_in_data,json=stockInData,proto3" json:"stock_in_data,omitempty"`
	StockOutData     *TradeGoodsEpcRequest               `protobuf:"bytes,36,opt,name=stock_out_data,json=stockOutData,proto3" json:"stock_out_data,omitempty"`
	Filters          string                              `protobuf:"bytes,37,opt,name=filters,proto3" json:"filters,omitempty"`
	SelfPickup       *int32                              `protobuf:"varint,38,opt,name=self_pickup,json=selfPickup,proto3,oneof" json:"self_pickup,omitempty"`
	ImageUrl         *string                             `protobuf:"bytes,39,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
}

func (x *SupplierTradeCreateRequest) Reset() {
	*x = SupplierTradeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeCreateRequest) ProtoMessage() {}

func (x *SupplierTradeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeCreateRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{109}
}

func (x *SupplierTradeCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetGoodsList() []*SupplierTradeGoodsDetailsRequest {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *SupplierTradeCreateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetDeliverNotice() int64 {
	if x != nil && x.DeliverNotice != nil {
		return *x.DeliverNotice
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetStockInData() []*TradeGoodsEpcRequest {
	if x != nil {
		return x.StockInData
	}
	return nil
}

func (x *SupplierTradeCreateRequest) GetStockOutData() *TradeGoodsEpcRequest {
	if x != nil {
		return x.StockOutData
	}
	return nil
}

func (x *SupplierTradeCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *SupplierTradeCreateRequest) GetSelfPickup() int32 {
	if x != nil && x.SelfPickup != nil {
		return *x.SelfPickup
	}
	return 0
}

func (x *SupplierTradeCreateRequest) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

type SupplierTradeDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SupplierTradeDestroyRequest) Reset() {
	*x = SupplierTradeDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeDestroyRequest) ProtoMessage() {}

func (x *SupplierTradeDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeDestroyRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{110}
}

func (x *SupplierTradeDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SupplierTradeGoodsDetailsBulkCreateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SupplierTradeGoodsDetailsBulkCreateRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SupplierTradeGoodsDetailsBulkCreateListRequest) Reset() {
	*x = SupplierTradeGoodsDetailsBulkCreateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsBulkCreateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsBulkCreateListRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsBulkCreateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsBulkCreateListRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsBulkCreateListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{111}
}

func (x *SupplierTradeGoodsDetailsBulkCreateListRequest) GetResults() []*SupplierTradeGoodsDetailsBulkCreateRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SupplierTradeGoodsDetailsBulkCreateListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SupplierTradeGoodsDetailsBulkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num           int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,5,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,6,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,7,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64 `protobuf:"fixed64,8,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status        *int32  `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32  `protobuf:"varint,10,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string `protobuf:"bytes,11,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string `protobuf:"bytes,12,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,13,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string  `protobuf:"bytes,14,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string `protobuf:"bytes,15,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Trade         *int64  `protobuf:"varint,16,opt,name=trade,proto3,oneof" json:"trade,omitempty"`
	Oid           string  `protobuf:"bytes,17,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) Reset() {
	*x = SupplierTradeGoodsDetailsBulkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsBulkCreateRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsBulkCreateRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsBulkCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{112}
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetTrade() int64 {
	if x != nil && x.Trade != nil {
		return *x.Trade
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsBulkCreateRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type SupplierTradeGoodsDetailsCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num           int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,5,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,6,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,7,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64 `protobuf:"fixed64,8,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status        *int32  `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32  `protobuf:"varint,10,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string `protobuf:"bytes,11,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string `protobuf:"bytes,12,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,13,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string  `protobuf:"bytes,14,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string `protobuf:"bytes,15,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Trade         *int64  `protobuf:"varint,16,opt,name=trade,proto3,oneof" json:"trade,omitempty"`
	Oid           string  `protobuf:"bytes,17,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *SupplierTradeGoodsDetailsCreateRequest) Reset() {
	*x = SupplierTradeGoodsDetailsCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsCreateRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsCreateRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{113}
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetTrade() int64 {
	if x != nil && x.Trade != nil {
		return *x.Trade
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsCreateRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type SupplierTradeGoodsDetailsDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SupplierTradeGoodsDetailsDestroyRequest) Reset() {
	*x = SupplierTradeGoodsDetailsDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsDestroyRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsDestroyRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{114}
}

func (x *SupplierTradeGoodsDetailsDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SupplierTradeGoodsDetailsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SupplierTradeGoodsDetailsListRequest) Reset() {
	*x = SupplierTradeGoodsDetailsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsListRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsListRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{115}
}

func (x *SupplierTradeGoodsDetailsListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type SupplierTradeGoodsDetailsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SupplierTradeGoodsDetailsResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SupplierTradeGoodsDetailsListResponse) Reset() {
	*x = SupplierTradeGoodsDetailsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsListResponse) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsListResponse.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{116}
}

func (x *SupplierTradeGoodsDetailsListResponse) GetResults() []*SupplierTradeGoodsDetailsResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SupplierTradeGoodsDetailsListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SupplierTradeGoodsDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num           int32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Price         float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount  float64 `protobuf:"fixed64,5,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount      float64 `protobuf:"fixed64,6,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount float64 `protobuf:"fixed64,7,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount   float64 `protobuf:"fixed64,8,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status        *int32  `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus  *int32  `protobuf:"varint,10,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId       *string `protobuf:"bytes,11,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName     *string `protobuf:"bytes,12,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo       *string `protobuf:"bytes,13,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo        string  `protobuf:"bytes,14,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName      *string `protobuf:"bytes,15,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Trade         *int64  `protobuf:"varint,16,opt,name=trade,proto3,oneof" json:"trade,omitempty"`
	Oid           string  `protobuf:"bytes,17,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *SupplierTradeGoodsDetailsRequest) Reset() {
	*x = SupplierTradeGoodsDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{117}
}

func (x *SupplierTradeGoodsDetailsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsRequest) GetTrade() int64 {
	if x != nil && x.Trade != nil {
		return *x.Trade
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type SupplierTradeGoodsDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusName       string  `protobuf:"bytes,2,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`
	RefundStatusName string  `protobuf:"bytes,3,opt,name=refund_status_name,json=refundStatusName,proto3" json:"refund_status_name,omitempty"`
	CreateTime       string  `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       string  `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Num              int32   `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	Price            float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount     float64 `protobuf:"fixed64,8,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount         float64 `protobuf:"fixed64,9,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount    float64 `protobuf:"fixed64,10,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount      float64 `protobuf:"fixed64,11,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status           *int32  `protobuf:"varint,12,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus     *int32  `protobuf:"varint,13,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId          *string `protobuf:"bytes,14,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName        *string `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo          *string `protobuf:"bytes,16,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo           string  `protobuf:"bytes,17,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName         *string `protobuf:"bytes,18,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Trade            *int64  `protobuf:"varint,19,opt,name=trade,proto3,oneof" json:"trade,omitempty"`
	Oid              string  `protobuf:"bytes,20,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *SupplierTradeGoodsDetailsResponse) Reset() {
	*x = SupplierTradeGoodsDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsResponse) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsResponse.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{118}
}

func (x *SupplierTradeGoodsDetailsResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetRefundStatusName() string {
	if x != nil {
		return x.RefundStatusName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsResponse) GetTrade() int64 {
	if x != nil && x.Trade != nil {
		return *x.Trade
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type SupplierTradeGoodsDetailsRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SupplierTradeGoodsDetailsRetrieveRequest) Reset() {
	*x = SupplierTradeGoodsDetailsRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsRetrieveRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsRetrieveRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{119}
}

func (x *SupplierTradeGoodsDetailsRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SupplierTradeGoodsDetailsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Num                  int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price                float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	AdjustAmount         float64  `protobuf:"fixed64,6,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`
	Discount             float64  `protobuf:"fixed64,7,opt,name=discount,proto3" json:"discount,omitempty"`
	ShareDiscount        float64  `protobuf:"fixed64,8,opt,name=share_discount,json=shareDiscount,proto3" json:"share_discount,omitempty"`
	ShareAmount          float64  `protobuf:"fixed64,9,opt,name=share_amount,json=shareAmount,proto3" json:"share_amount,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=status,proto3,oneof" json:"status,omitempty"`
	RefundStatus         *int32   `protobuf:"varint,11,opt,name=refund_status,json=refundStatus,proto3,oneof" json:"refund_status,omitempty"`
	GoodsId              *string  `protobuf:"bytes,12,opt,name=goods_id,json=goodsId,proto3,oneof" json:"goods_id,omitempty"`
	GoodsName            *string  `protobuf:"bytes,13,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo               string   `protobuf:"bytes,15,opt,name=spec_no,json=specNo,proto3" json:"spec_no,omitempty"`
	SpecName             *string  `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Trade                *int64   `protobuf:"varint,17,opt,name=trade,proto3,oneof" json:"trade,omitempty"`
	Oid                  string   `protobuf:"bytes,18,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) Reset() {
	*x = SupplierTradeGoodsDetailsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeGoodsDetailsUpdateRequest) ProtoMessage() {}

func (x *SupplierTradeGoodsDetailsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeGoodsDetailsUpdateRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeGoodsDetailsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{120}
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetAdjustAmount() float64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetShareDiscount() float64 {
	if x != nil {
		return x.ShareDiscount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetShareAmount() float64 {
	if x != nil {
		return x.ShareAmount
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetRefundStatus() int32 {
	if x != nil && x.RefundStatus != nil {
		return *x.RefundStatus
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetGoodsId() string {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetSpecNo() string {
	if x != nil {
		return x.SpecNo
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetTrade() int64 {
	if x != nil && x.Trade != nil {
		return *x.Trade
	}
	return 0
}

func (x *SupplierTradeGoodsDetailsUpdateRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type SupplierTradeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SupplierTradeListRequest) Reset() {
	*x = SupplierTradeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeListRequest) ProtoMessage() {}

func (x *SupplierTradeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeListRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{121}
}

func (x *SupplierTradeListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type SupplierTradeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SupplierTradeResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SupplierTradeListResponse) Reset() {
	*x = SupplierTradeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeListResponse) ProtoMessage() {}

func (x *SupplierTradeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeListResponse.ProtoReflect.Descriptor instead.
func (*SupplierTradeListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{122}
}

func (x *SupplierTradeListResponse) GetResults() []*SupplierTradeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SupplierTradeListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SupplierTradeNextTidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliverNotice int64 `protobuf:"varint,1,opt,name=deliver_notice,json=deliverNotice,proto3" json:"deliver_notice,omitempty"`
}

func (x *SupplierTradeNextTidRequest) Reset() {
	*x = SupplierTradeNextTidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeNextTidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeNextTidRequest) ProtoMessage() {}

func (x *SupplierTradeNextTidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeNextTidRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeNextTidRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{123}
}

func (x *SupplierTradeNextTidRequest) GetDeliverNotice() int64 {
	if x != nil {
		return x.DeliverNotice
	}
	return 0
}

type SupplierTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTypeName    string                                  `protobuf:"bytes,2,opt,name=create_type_name,json=createTypeName,proto3" json:"create_type_name,omitempty"`
	TradeStatusName   string                                  `protobuf:"bytes,3,opt,name=trade_status_name,json=tradeStatusName,proto3" json:"trade_status_name,omitempty"`
	PayStatusName     string                                  `protobuf:"bytes,4,opt,name=pay_status_name,json=payStatusName,proto3" json:"pay_status_name,omitempty"`
	DeliveryTermName  string                                  `protobuf:"bytes,5,opt,name=delivery_term_name,json=deliveryTermName,proto3" json:"delivery_term_name,omitempty"`
	InvoiceStatusName string                                  `protobuf:"bytes,6,opt,name=invoice_status_name,json=invoiceStatusName,proto3" json:"invoice_status_name,omitempty"`
	GoodsDetails      []*SupplierTradeGoodsDetailsResponse    `protobuf:"bytes,7,rep,name=goods_details,json=goodsDetails,proto3" json:"goods_details,omitempty"`
	StockOutDetails   []*SupplierTradeStockOutDetailsResponse `protobuf:"bytes,8,rep,name=stock_out_details,json=stockOutDetails,proto3" json:"stock_out_details,omitempty"`
	CreateTime        string                                  `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime        string                                  `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CreateName        *string                                 `protobuf:"bytes,11,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType        *int32                                  `protobuf:"varint,12,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	Tid               string                                  `protobuf:"bytes,13,opt,name=tid,proto3" json:"tid,omitempty"`
	TradeStatus       *int32                                  `protobuf:"varint,14,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus         *int32                                  `protobuf:"varint,15,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime           *string                                 `protobuf:"bytes,16,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm      *int32                                  `protobuf:"varint,17,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick         string                                  `protobuf:"bytes,18,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile       *string                                 `protobuf:"bytes,19,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage      *string                                 `protobuf:"bytes,20,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	SellerMemo        *string                                 `protobuf:"bytes,21,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	SellerName        *string                                 `protobuf:"bytes,22,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	ShopNo            string                                  `protobuf:"bytes,23,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName          string                                  `protobuf:"bytes,24,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo       string                                  `protobuf:"bytes,25,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName     string                                  `protobuf:"bytes,26,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ReceiverName      *string                                 `protobuf:"bytes,27,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince  *string                                 `protobuf:"bytes,28,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity      *string                                 `protobuf:"bytes,29,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict  *string                                 `protobuf:"bytes,30,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress   *string                                 `protobuf:"bytes,31,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile    *string                                 `protobuf:"bytes,32,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	Paid              *float64                                `protobuf:"fixed64,33,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	PostAmount        *float64                                `protobuf:"fixed64,34,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount       *float64                                `protobuf:"fixed64,35,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee         *float64                                `protobuf:"fixed64,36,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	CodAmount         *float64                                `protobuf:"fixed64,37,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable        *float64                                `protobuf:"fixed64,38,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount          *float64                                `protobuf:"fixed64,39,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus     *int32                                  `protobuf:"varint,40,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	DeliverNotice     *int64                                  `protobuf:"varint,41,opt,name=deliver_notice,json=deliverNotice,proto3,oneof" json:"deliver_notice,omitempty"`
	SelfPickup        *int32                                  `protobuf:"varint,42,opt,name=self_pickup,json=selfPickup,proto3,oneof" json:"self_pickup,omitempty"`
	ImageUrl          *string                                 `protobuf:"bytes,43,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
	Pickup            string                                  `protobuf:"bytes,44,opt,name=pickup,proto3" json:"pickup,omitempty"`
	LogisticsNo       string                                  `protobuf:"bytes,45,opt,name=logistics_no,json=logisticsNo,proto3" json:"logistics_no,omitempty"`
}

func (x *SupplierTradeResponse) Reset() {
	*x = SupplierTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeResponse) ProtoMessage() {}

func (x *SupplierTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeResponse.ProtoReflect.Descriptor instead.
func (*SupplierTradeResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{124}
}

func (x *SupplierTradeResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeResponse) GetCreateTypeName() string {
	if x != nil {
		return x.CreateTypeName
	}
	return ""
}

func (x *SupplierTradeResponse) GetTradeStatusName() string {
	if x != nil {
		return x.TradeStatusName
	}
	return ""
}

func (x *SupplierTradeResponse) GetPayStatusName() string {
	if x != nil {
		return x.PayStatusName
	}
	return ""
}

func (x *SupplierTradeResponse) GetDeliveryTermName() string {
	if x != nil {
		return x.DeliveryTermName
	}
	return ""
}

func (x *SupplierTradeResponse) GetInvoiceStatusName() string {
	if x != nil {
		return x.InvoiceStatusName
	}
	return ""
}

func (x *SupplierTradeResponse) GetGoodsDetails() []*SupplierTradeGoodsDetailsResponse {
	if x != nil {
		return x.GoodsDetails
	}
	return nil
}

func (x *SupplierTradeResponse) GetStockOutDetails() []*SupplierTradeStockOutDetailsResponse {
	if x != nil {
		return x.StockOutDetails
	}
	return nil
}

func (x *SupplierTradeResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SupplierTradeResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SupplierTradeResponse) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *SupplierTradeResponse) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *SupplierTradeResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SupplierTradeResponse) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *SupplierTradeResponse) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *SupplierTradeResponse) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *SupplierTradeResponse) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *SupplierTradeResponse) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *SupplierTradeResponse) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *SupplierTradeResponse) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *SupplierTradeResponse) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *SupplierTradeResponse) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *SupplierTradeResponse) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *SupplierTradeResponse) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *SupplierTradeResponse) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *SupplierTradeResponse) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *SupplierTradeResponse) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *SupplierTradeResponse) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *SupplierTradeResponse) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *SupplierTradeResponse) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *SupplierTradeResponse) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *SupplierTradeResponse) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *SupplierTradeResponse) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *SupplierTradeResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *SupplierTradeResponse) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *SupplierTradeResponse) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *SupplierTradeResponse) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *SupplierTradeResponse) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *SupplierTradeResponse) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *SupplierTradeResponse) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *SupplierTradeResponse) GetDeliverNotice() int64 {
	if x != nil && x.DeliverNotice != nil {
		return *x.DeliverNotice
	}
	return 0
}

func (x *SupplierTradeResponse) GetSelfPickup() int32 {
	if x != nil && x.SelfPickup != nil {
		return *x.SelfPickup
	}
	return 0
}

func (x *SupplierTradeResponse) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *SupplierTradeResponse) GetPickup() string {
	if x != nil {
		return x.Pickup
	}
	return ""
}

func (x *SupplierTradeResponse) GetLogisticsNo() string {
	if x != nil {
		return x.LogisticsNo
	}
	return ""
}

type SupplierTradeRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SupplierTradeRetrieveRequest) Reset() {
	*x = SupplierTradeRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeRetrieveRequest) ProtoMessage() {}

func (x *SupplierTradeRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeRetrieveRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{125}
}

func (x *SupplierTradeRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SupplierTradeStockOutDetailsCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SrcOrderNo     *string `protobuf:"bytes,3,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo     *string `protobuf:"bytes,4,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo        *string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName  *string `protobuf:"bytes,6,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status         *string `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName  *string `protobuf:"bytes,8,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode  *string `protobuf:"bytes,9,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo    *string `protobuf:"bytes,10,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime    *string `protobuf:"bytes,11,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime *string `protobuf:"bytes,12,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified       *string `protobuf:"bytes,13,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo        *string `protobuf:"bytes,14,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName      *string `protobuf:"bytes,15,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName       *string `protobuf:"bytes,16,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo         *string `protobuf:"bytes,17,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount     float64 `protobuf:"fixed64,18,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmOrder       *int64  `protobuf:"varint,19,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	Filters        string  `protobuf:"bytes,20,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SupplierTradeStockOutDetailsCreateRequest) Reset() {
	*x = SupplierTradeStockOutDetailsCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeStockOutDetailsCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeStockOutDetailsCreateRequest) ProtoMessage() {}

func (x *SupplierTradeStockOutDetailsCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeStockOutDetailsCreateRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeStockOutDetailsCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{126}
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type SupplierTradeStockOutDetailsDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SupplierTradeStockOutDetailsDestroyRequest) Reset() {
	*x = SupplierTradeStockOutDetailsDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeStockOutDetailsDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeStockOutDetailsDestroyRequest) ProtoMessage() {}

func (x *SupplierTradeStockOutDetailsDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeStockOutDetailsDestroyRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeStockOutDetailsDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{127}
}

func (x *SupplierTradeStockOutDetailsDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SupplierTradeStockOutDetailsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SupplierTradeStockOutDetailsListRequest) Reset() {
	*x = SupplierTradeStockOutDetailsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeStockOutDetailsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeStockOutDetailsListRequest) ProtoMessage() {}

func (x *SupplierTradeStockOutDetailsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeStockOutDetailsListRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeStockOutDetailsListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{128}
}

func (x *SupplierTradeStockOutDetailsListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type SupplierTradeStockOutDetailsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SupplierTradeStockOutDetailsResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SupplierTradeStockOutDetailsListResponse) Reset() {
	*x = SupplierTradeStockOutDetailsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeStockOutDetailsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeStockOutDetailsListResponse) ProtoMessage() {}

func (x *SupplierTradeStockOutDetailsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeStockOutDetailsListResponse.ProtoReflect.Descriptor instead.
func (*SupplierTradeStockOutDetailsListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{129}
}

func (x *SupplierTradeStockOutDetailsListResponse) GetResults() []*SupplierTradeStockOutDetailsResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SupplierTradeStockOutDetailsListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SupplierTradeStockOutDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime     string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SrcOrderNo     *string `protobuf:"bytes,4,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo     *string `protobuf:"bytes,5,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo        *string `protobuf:"bytes,6,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName  *string `protobuf:"bytes,7,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status         *string `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName  *string `protobuf:"bytes,9,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode  *string `protobuf:"bytes,10,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo    *string `protobuf:"bytes,11,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime    *string `protobuf:"bytes,12,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime *string `protobuf:"bytes,13,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified       *string `protobuf:"bytes,14,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo        *string `protobuf:"bytes,15,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName      *string `protobuf:"bytes,16,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName       *string `protobuf:"bytes,17,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo         *string `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount     float64 `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmOrder       *int64  `protobuf:"varint,20,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
}

func (x *SupplierTradeStockOutDetailsResponse) Reset() {
	*x = SupplierTradeStockOutDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeStockOutDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeStockOutDetailsResponse) ProtoMessage() {}

func (x *SupplierTradeStockOutDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeStockOutDetailsResponse.ProtoReflect.Descriptor instead.
func (*SupplierTradeStockOutDetailsResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{130}
}

func (x *SupplierTradeStockOutDetailsResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsResponse) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsResponse) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

type SupplierTradeStockOutDetailsRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SupplierTradeStockOutDetailsRetrieveRequest) Reset() {
	*x = SupplierTradeStockOutDetailsRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeStockOutDetailsRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeStockOutDetailsRetrieveRequest) ProtoMessage() {}

func (x *SupplierTradeStockOutDetailsRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeStockOutDetailsRetrieveRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeStockOutDetailsRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{131}
}

func (x *SupplierTradeStockOutDetailsRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SupplierTradeStockOutDetailsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	SrcOrderNo           *string  `protobuf:"bytes,4,opt,name=src_order_no,json=srcOrderNo,proto3,oneof" json:"src_order_no,omitempty"`
	StockOutNo           *string  `protobuf:"bytes,5,opt,name=stock_out_no,json=stockOutNo,proto3,oneof" json:"stock_out_no,omitempty"`
	OrderNo              *string  `protobuf:"bytes,6,opt,name=order_no,json=orderNo,proto3,oneof" json:"order_no,omitempty"`
	OrderTypeName        *string  `protobuf:"bytes,7,opt,name=order_type_name,json=orderTypeName,proto3,oneof" json:"order_type_name,omitempty"`
	Status               *string  `protobuf:"bytes,8,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LogisticsName        *string  `protobuf:"bytes,9,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode        *string  `protobuf:"bytes,10,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	LogisticsNo          *string  `protobuf:"bytes,11,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	ConsignTime          *string  `protobuf:"bytes,12,opt,name=consign_time,json=consignTime,proto3,oneof" json:"consign_time,omitempty"`
	StockCheckTime       *string  `protobuf:"bytes,13,opt,name=stock_check_time,json=stockCheckTime,proto3,oneof" json:"stock_check_time,omitempty"`
	Modified             *string  `protobuf:"bytes,14,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	GoodsNo              *string  `protobuf:"bytes,15,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	GoodsName            *string  `protobuf:"bytes,16,opt,name=goods_name,json=goodsName,proto3,oneof" json:"goods_name,omitempty"`
	SpecName             *string  `protobuf:"bytes,17,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	SpecNo               *string  `protobuf:"bytes,18,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	GoodsCount           float64  `protobuf:"fixed64,19,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count,omitempty"`
	CtmOrder             *int64   `protobuf:"varint,20,opt,name=ctm_order,json=ctmOrder,proto3,oneof" json:"ctm_order,omitempty"`
	Filters              string   `protobuf:"bytes,21,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) Reset() {
	*x = SupplierTradeStockOutDetailsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeStockOutDetailsUpdateRequest) ProtoMessage() {}

func (x *SupplierTradeStockOutDetailsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeStockOutDetailsUpdateRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeStockOutDetailsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{132}
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetSrcOrderNo() string {
	if x != nil && x.SrcOrderNo != nil {
		return *x.SrcOrderNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetStockOutNo() string {
	if x != nil && x.StockOutNo != nil {
		return *x.StockOutNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetOrderNo() string {
	if x != nil && x.OrderNo != nil {
		return *x.OrderNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetOrderTypeName() string {
	if x != nil && x.OrderTypeName != nil {
		return *x.OrderTypeName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetConsignTime() string {
	if x != nil && x.ConsignTime != nil {
		return *x.ConsignTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetStockCheckTime() string {
	if x != nil && x.StockCheckTime != nil {
		return *x.StockCheckTime
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetGoodsName() string {
	if x != nil && x.GoodsName != nil {
		return *x.GoodsName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetGoodsCount() float64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetCtmOrder() int64 {
	if x != nil && x.CtmOrder != nil {
		return *x.CtmOrder
	}
	return 0
}

func (x *SupplierTradeStockOutDetailsUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type SupplierTradeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string                              `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	GoodsList            []*SupplierTradeGoodsDetailsRequest `protobuf:"bytes,3,rep,name=goods_list,json=goodsList,proto3" json:"goods_list,omitempty"`
	XPartialUpdateFields []string                            `protobuf:"bytes,4,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateName           *string                             `protobuf:"bytes,5,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType           *int32                              `protobuf:"varint,6,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	Tid                  string                              `protobuf:"bytes,7,opt,name=tid,proto3" json:"tid,omitempty"`
	TradeStatus          *int32                              `protobuf:"varint,8,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus            *int32                              `protobuf:"varint,9,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime              *string                             `protobuf:"bytes,10,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm         *int32                              `protobuf:"varint,11,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick            string                              `protobuf:"bytes,12,opt,name=buyer_nick,json=buyerNick,proto3" json:"buyer_nick,omitempty"`
	BuyerMobile          *string                             `protobuf:"bytes,13,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage         *string                             `protobuf:"bytes,14,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	SellerMemo           *string                             `protobuf:"bytes,15,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	SellerName           *string                             `protobuf:"bytes,16,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	ShopNo               string                              `protobuf:"bytes,17,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName             string                              `protobuf:"bytes,18,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo          string                              `protobuf:"bytes,19,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName        string                              `protobuf:"bytes,20,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ReceiverName         *string                             `protobuf:"bytes,21,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince     *string                             `protobuf:"bytes,22,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *string                             `protobuf:"bytes,23,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *string                             `protobuf:"bytes,24,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string                             `protobuf:"bytes,25,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string                             `protobuf:"bytes,26,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	Paid                 *float64                            `protobuf:"fixed64,27,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	PostAmount           *float64                            `protobuf:"fixed64,28,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64                            `protobuf:"fixed64,29,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee            *float64                            `protobuf:"fixed64,30,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	CodAmount            *float64                            `protobuf:"fixed64,31,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable           *float64                            `protobuf:"fixed64,32,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount             *float64                            `protobuf:"fixed64,33,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus        *int32                              `protobuf:"varint,34,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	DeliverNotice        *int64                              `protobuf:"varint,35,opt,name=deliver_notice,json=deliverNotice,proto3,oneof" json:"deliver_notice,omitempty"`
	StockInData          []*TradeGoodsEpcRequest             `protobuf:"bytes,36,rep,name=stock_in_data,json=stockInData,proto3" json:"stock_in_data,omitempty"`
	StockOutData         *TradeGoodsEpcRequest               `protobuf:"bytes,37,opt,name=stock_out_data,json=stockOutData,proto3" json:"stock_out_data,omitempty"`
	SelfPickup           *int32                              `protobuf:"varint,38,opt,name=self_pickup,json=selfPickup,proto3,oneof" json:"self_pickup,omitempty"`
	ImageUrl             *string                             `protobuf:"bytes,39,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
}

func (x *SupplierTradeUpdateRequest) Reset() {
	*x = SupplierTradeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierTradeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierTradeUpdateRequest) ProtoMessage() {}

func (x *SupplierTradeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierTradeUpdateRequest.ProtoReflect.Descriptor instead.
func (*SupplierTradeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{133}
}

func (x *SupplierTradeUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetGoodsList() []*SupplierTradeGoodsDetailsRequest {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *SupplierTradeUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *SupplierTradeUpdateRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetBuyerNick() string {
	if x != nil {
		return x.BuyerNick
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *SupplierTradeUpdateRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetDeliverNotice() int64 {
	if x != nil && x.DeliverNotice != nil {
		return *x.DeliverNotice
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetStockInData() []*TradeGoodsEpcRequest {
	if x != nil {
		return x.StockInData
	}
	return nil
}

func (x *SupplierTradeUpdateRequest) GetStockOutData() *TradeGoodsEpcRequest {
	if x != nil {
		return x.StockOutData
	}
	return nil
}

func (x *SupplierTradeUpdateRequest) GetSelfPickup() int32 {
	if x != nil && x.SelfPickup != nil {
		return *x.SelfPickup
	}
	return 0
}

func (x *SupplierTradeUpdateRequest) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

type TradeGoodsEpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockInText  *string `protobuf:"bytes,1,opt,name=stock_in_text,json=stockInText,proto3,oneof" json:"stock_in_text,omitempty"`
	StockOutText *string `protobuf:"bytes,2,opt,name=stock_out_text,json=stockOutText,proto3,oneof" json:"stock_out_text,omitempty"`
	EpcText      *string `protobuf:"bytes,3,opt,name=epc_text,json=epcText,proto3,oneof" json:"epc_text,omitempty"`
	WarehouseNo  string  `protobuf:"bytes,4,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
}

func (x *TradeGoodsEpcRequest) Reset() {
	*x = TradeGoodsEpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeGoodsEpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeGoodsEpcRequest) ProtoMessage() {}

func (x *TradeGoodsEpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeGoodsEpcRequest.ProtoReflect.Descriptor instead.
func (*TradeGoodsEpcRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{134}
}

func (x *TradeGoodsEpcRequest) GetStockInText() string {
	if x != nil && x.StockInText != nil {
		return *x.StockInText
	}
	return ""
}

func (x *TradeGoodsEpcRequest) GetStockOutText() string {
	if x != nil && x.StockOutText != nil {
		return *x.StockOutText
	}
	return ""
}

func (x *TradeGoodsEpcRequest) GetEpcText() string {
	if x != nil && x.EpcText != nil {
		return *x.EpcText
	}
	return ""
}

func (x *TradeGoodsEpcRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

type TransferDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId        int32    `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	GoodsNo      *string  `protobuf:"bytes,2,opt,name=goods_no,json=goodsNo,proto3,oneof" json:"goods_no,omitempty"`
	SpecNo       *string  `protobuf:"bytes,3,opt,name=spec_no,json=specNo,proto3,oneof" json:"spec_no,omitempty"`
	SpecCode     *string  `protobuf:"bytes,4,opt,name=spec_code,json=specCode,proto3,oneof" json:"spec_code,omitempty"`
	SpecName     *string  `protobuf:"bytes,5,opt,name=spec_name,json=specName,proto3,oneof" json:"spec_name,omitempty"`
	Unit         *int32   `protobuf:"varint,6,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	Num2         *float64 `protobuf:"fixed64,7,opt,name=num2,proto3,oneof" json:"num2,omitempty"`
	SpecId       *float64 `protobuf:"fixed64,8,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	CostDiff     *float64 `protobuf:"fixed64,9,opt,name=cost_diff,json=costDiff,proto3,oneof" json:"cost_diff,omitempty"`
	FlagId       *int32   `protobuf:"varint,10,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Modified     *string  `protobuf:"bytes,11,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created      *string  `protobuf:"bytes,12,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Barcode      *string  `protobuf:"bytes,13,opt,name=barcode,proto3,oneof" json:"barcode,omitempty"`
	OutCostTotal *float64 `protobuf:"fixed64,14,opt,name=out_cost_total,json=outCostTotal,proto3,oneof" json:"out_cost_total,omitempty"`
	BatchId      *int32   `protobuf:"varint,15,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	BatchNo      *string  `protobuf:"bytes,16,opt,name=batch_no,json=batchNo,proto3,oneof" json:"batch_no,omitempty"`
	BatchRemark  *string  `protobuf:"bytes,17,opt,name=batch_remark,json=batchRemark,proto3,oneof" json:"batch_remark,omitempty"`
	FromPosition *string  `protobuf:"bytes,18,opt,name=from_position,json=fromPosition,proto3,oneof" json:"from_position,omitempty"`
	ToPosition   *string  `protobuf:"bytes,19,opt,name=to_position,json=toPosition,proto3,oneof" json:"to_position,omitempty"`
	ExpireDate   *string  `protobuf:"bytes,20,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`
	StockNum     *float64 `protobuf:"fixed64,21,opt,name=stock_num,json=stockNum,proto3,oneof" json:"stock_num,omitempty"`
	Num          *float64 `protobuf:"fixed64,22,opt,name=num,proto3,oneof" json:"num,omitempty"`
	OutNum       *float64 `protobuf:"fixed64,23,opt,name=out_num,json=outNum,proto3,oneof" json:"out_num,omitempty"`
	InNum        *float64 `protobuf:"fixed64,24,opt,name=in_num,json=inNum,proto3,oneof" json:"in_num,omitempty"`
	UnitName     *string  `protobuf:"bytes,25,opt,name=unit_name,json=unitName,proto3,oneof" json:"unit_name,omitempty"`
	AuxUnitName  *string  `protobuf:"bytes,26,opt,name=aux_unit_name,json=auxUnitName,proto3,oneof" json:"aux_unit_name,omitempty"`
	AuxNum       *float64 `protobuf:"fixed64,27,opt,name=aux_num,json=auxNum,proto3,oneof" json:"aux_num,omitempty"`
	Remark       *string  `protobuf:"bytes,28,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	BrandName    *string  `protobuf:"bytes,29,opt,name=brand_name,json=brandName,proto3,oneof" json:"brand_name,omitempty"`
	Transfer     *int32   `protobuf:"varint,30,opt,name=transfer,proto3,oneof" json:"transfer,omitempty"`
}

func (x *TransferDetailResponse) Reset() {
	*x = TransferDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferDetailResponse) ProtoMessage() {}

func (x *TransferDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferDetailResponse.ProtoReflect.Descriptor instead.
func (*TransferDetailResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{135}
}

func (x *TransferDetailResponse) GetRecId() int32 {
	if x != nil {
		return x.RecId
	}
	return 0
}

func (x *TransferDetailResponse) GetGoodsNo() string {
	if x != nil && x.GoodsNo != nil {
		return *x.GoodsNo
	}
	return ""
}

func (x *TransferDetailResponse) GetSpecNo() string {
	if x != nil && x.SpecNo != nil {
		return *x.SpecNo
	}
	return ""
}

func (x *TransferDetailResponse) GetSpecCode() string {
	if x != nil && x.SpecCode != nil {
		return *x.SpecCode
	}
	return ""
}

func (x *TransferDetailResponse) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *TransferDetailResponse) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *TransferDetailResponse) GetNum2() float64 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *TransferDetailResponse) GetSpecId() float64 {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return 0
}

func (x *TransferDetailResponse) GetCostDiff() float64 {
	if x != nil && x.CostDiff != nil {
		return *x.CostDiff
	}
	return 0
}

func (x *TransferDetailResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *TransferDetailResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TransferDetailResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TransferDetailResponse) GetBarcode() string {
	if x != nil && x.Barcode != nil {
		return *x.Barcode
	}
	return ""
}

func (x *TransferDetailResponse) GetOutCostTotal() float64 {
	if x != nil && x.OutCostTotal != nil {
		return *x.OutCostTotal
	}
	return 0
}

func (x *TransferDetailResponse) GetBatchId() int32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *TransferDetailResponse) GetBatchNo() string {
	if x != nil && x.BatchNo != nil {
		return *x.BatchNo
	}
	return ""
}

func (x *TransferDetailResponse) GetBatchRemark() string {
	if x != nil && x.BatchRemark != nil {
		return *x.BatchRemark
	}
	return ""
}

func (x *TransferDetailResponse) GetFromPosition() string {
	if x != nil && x.FromPosition != nil {
		return *x.FromPosition
	}
	return ""
}

func (x *TransferDetailResponse) GetToPosition() string {
	if x != nil && x.ToPosition != nil {
		return *x.ToPosition
	}
	return ""
}

func (x *TransferDetailResponse) GetExpireDate() string {
	if x != nil && x.ExpireDate != nil {
		return *x.ExpireDate
	}
	return ""
}

func (x *TransferDetailResponse) GetStockNum() float64 {
	if x != nil && x.StockNum != nil {
		return *x.StockNum
	}
	return 0
}

func (x *TransferDetailResponse) GetNum() float64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *TransferDetailResponse) GetOutNum() float64 {
	if x != nil && x.OutNum != nil {
		return *x.OutNum
	}
	return 0
}

func (x *TransferDetailResponse) GetInNum() float64 {
	if x != nil && x.InNum != nil {
		return *x.InNum
	}
	return 0
}

func (x *TransferDetailResponse) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *TransferDetailResponse) GetAuxUnitName() string {
	if x != nil && x.AuxUnitName != nil {
		return *x.AuxUnitName
	}
	return ""
}

func (x *TransferDetailResponse) GetAuxNum() float64 {
	if x != nil && x.AuxNum != nil {
		return *x.AuxNum
	}
	return 0
}

func (x *TransferDetailResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *TransferDetailResponse) GetBrandName() string {
	if x != nil && x.BrandName != nil {
		return *x.BrandName
	}
	return ""
}

func (x *TransferDetailResponse) GetTransfer() int32 {
	if x != nil && x.Transfer != nil {
		return *x.Transfer
	}
	return 0
}

type TransferOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TransferOrderResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TransferOrderListResponse) Reset() {
	*x = TransferOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOrderListResponse) ProtoMessage() {}

func (x *TransferOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOrderListResponse.ProtoReflect.Descriptor instead.
func (*TransferOrderListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{136}
}

func (x *TransferOrderListResponse) GetResults() []*TransferOrderResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TransferOrderListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TransferOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId         int32    `protobuf:"varint,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Filters            string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	TransferNo         *string  `protobuf:"bytes,3,opt,name=transfer_no,json=transferNo,proto3,oneof" json:"transfer_no,omitempty"`
	Type               *int32   `protobuf:"varint,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Mode               *int32   `protobuf:"varint,5,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	FromWarehouseNo    *string  `protobuf:"bytes,6,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	ToWarehouseNo      *string  `protobuf:"bytes,7,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	RecId              *int32   `protobuf:"varint,8,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	LockId             *int32   `protobuf:"varint,9,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	ApiOuterNo         *string  `protobuf:"bytes,10,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	FromWmsOrderNo     *string  `protobuf:"bytes,11,opt,name=from_wms_order_no,json=fromWmsOrderNo,proto3,oneof" json:"from_wms_order_no,omitempty"`
	OuterNo2           *string  `protobuf:"bytes,12,opt,name=outer_no2,json=outerNo2,proto3,oneof" json:"outer_no2,omitempty"`
	ToWmsOrderNo       *string  `protobuf:"bytes,13,opt,name=to_wms_order_no,json=toWmsOrderNo,proto3,oneof" json:"to_wms_order_no,omitempty"`
	ErrorInfo          *string  `protobuf:"bytes,14,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WmsStatus          *int32   `protobuf:"varint,15,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	FromWarehouseId    *int32   `protobuf:"varint,16,opt,name=from_warehouse_id,json=fromWarehouseId,proto3,oneof" json:"from_warehouse_id,omitempty"`
	ToWarehouseId      *int32   `protobuf:"varint,17,opt,name=to_warehouse_id,json=toWarehouseId,proto3,oneof" json:"to_warehouse_id,omitempty"`
	Address            *string  `protobuf:"bytes,18,opt,name=address,proto3,oneof" json:"address,omitempty"`
	LogisticsId        *int32   `protobuf:"varint,19,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	OutGoodsAmount     *float64 `protobuf:"fixed64,20,opt,name=out_goods_amount,json=outGoodsAmount,proto3,oneof" json:"out_goods_amount,omitempty"`
	InGoodsAmount      *float64 `protobuf:"fixed64,21,opt,name=in_goods_amount,json=inGoodsAmount,proto3,oneof" json:"in_goods_amount,omitempty"`
	NoteCount          *int32   `protobuf:"varint,22,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId             *int32   `protobuf:"varint,23,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Status             *string  `protobuf:"bytes,24,opt,name=status,proto3,oneof" json:"status,omitempty"`
	OuterNo            *string  `protobuf:"bytes,25,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	CreatorId          *int32   `protobuf:"varint,26,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName        *string  `protobuf:"bytes,27,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Contact            *string  `protobuf:"bytes,28,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno              *string  `protobuf:"bytes,29,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	LogisticsType      *int32   `protobuf:"varint,30,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo        *string  `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName      *string  `protobuf:"bytes,32,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode      *string  `protobuf:"bytes,33,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	GoodsCount         *float64 `protobuf:"fixed64,34,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount     *float64 `protobuf:"fixed64,35,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsInCount       *float64 `protobuf:"fixed64,36,opt,name=goods_in_count,json=goodsInCount,proto3,oneof" json:"goods_in_count,omitempty"`
	GoodsOutCount      *float64 `protobuf:"fixed64,37,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Modified           *string  `protobuf:"bytes,38,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created            *string  `protobuf:"bytes,39,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Remark             *string  `protobuf:"bytes,40,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	ToWarehouseAddress *string  `protobuf:"bytes,41,opt,name=to_warehouse_address,json=toWarehouseAddress,proto3,oneof" json:"to_warehouse_address,omitempty"`
	OuterNo1           *string  `protobuf:"bytes,42,opt,name=outer_no1,json=outerNo1,proto3,oneof" json:"outer_no1,omitempty"`
}

func (x *TransferOrderRequest) Reset() {
	*x = TransferOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOrderRequest) ProtoMessage() {}

func (x *TransferOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOrderRequest.ProtoReflect.Descriptor instead.
func (*TransferOrderRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{137}
}

func (x *TransferOrderRequest) GetTransferId() int32 {
	if x != nil {
		return x.TransferId
	}
	return 0
}

func (x *TransferOrderRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *TransferOrderRequest) GetTransferNo() string {
	if x != nil && x.TransferNo != nil {
		return *x.TransferNo
	}
	return ""
}

func (x *TransferOrderRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TransferOrderRequest) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *TransferOrderRequest) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *TransferOrderRequest) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *TransferOrderRequest) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *TransferOrderRequest) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *TransferOrderRequest) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *TransferOrderRequest) GetFromWmsOrderNo() string {
	if x != nil && x.FromWmsOrderNo != nil {
		return *x.FromWmsOrderNo
	}
	return ""
}

func (x *TransferOrderRequest) GetOuterNo2() string {
	if x != nil && x.OuterNo2 != nil {
		return *x.OuterNo2
	}
	return ""
}

func (x *TransferOrderRequest) GetToWmsOrderNo() string {
	if x != nil && x.ToWmsOrderNo != nil {
		return *x.ToWmsOrderNo
	}
	return ""
}

func (x *TransferOrderRequest) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *TransferOrderRequest) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *TransferOrderRequest) GetFromWarehouseId() int32 {
	if x != nil && x.FromWarehouseId != nil {
		return *x.FromWarehouseId
	}
	return 0
}

func (x *TransferOrderRequest) GetToWarehouseId() int32 {
	if x != nil && x.ToWarehouseId != nil {
		return *x.ToWarehouseId
	}
	return 0
}

func (x *TransferOrderRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *TransferOrderRequest) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *TransferOrderRequest) GetOutGoodsAmount() float64 {
	if x != nil && x.OutGoodsAmount != nil {
		return *x.OutGoodsAmount
	}
	return 0
}

func (x *TransferOrderRequest) GetInGoodsAmount() float64 {
	if x != nil && x.InGoodsAmount != nil {
		return *x.InGoodsAmount
	}
	return 0
}

func (x *TransferOrderRequest) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *TransferOrderRequest) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *TransferOrderRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TransferOrderRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *TransferOrderRequest) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *TransferOrderRequest) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *TransferOrderRequest) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *TransferOrderRequest) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *TransferOrderRequest) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *TransferOrderRequest) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *TransferOrderRequest) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *TransferOrderRequest) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *TransferOrderRequest) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *TransferOrderRequest) GetGoodsTypeCount() float64 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *TransferOrderRequest) GetGoodsInCount() float64 {
	if x != nil && x.GoodsInCount != nil {
		return *x.GoodsInCount
	}
	return 0
}

func (x *TransferOrderRequest) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *TransferOrderRequest) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TransferOrderRequest) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TransferOrderRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *TransferOrderRequest) GetToWarehouseAddress() string {
	if x != nil && x.ToWarehouseAddress != nil {
		return *x.ToWarehouseAddress
	}
	return ""
}

func (x *TransferOrderRequest) GetOuterNo1() string {
	if x != nil && x.OuterNo1 != nil {
		return *x.OuterNo1
	}
	return ""
}

type TransferOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId         int32                     `protobuf:"varint,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	TransferDetails    []*TransferDetailResponse `protobuf:"bytes,2,rep,name=transfer_details,json=transferDetails,proto3" json:"transfer_details,omitempty"`
	TransferNo         *string                   `protobuf:"bytes,3,opt,name=transfer_no,json=transferNo,proto3,oneof" json:"transfer_no,omitempty"`
	Type               *int32                    `protobuf:"varint,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Mode               *int32                    `protobuf:"varint,5,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	FromWarehouseNo    *string                   `protobuf:"bytes,6,opt,name=from_warehouse_no,json=fromWarehouseNo,proto3,oneof" json:"from_warehouse_no,omitempty"`
	ToWarehouseNo      *string                   `protobuf:"bytes,7,opt,name=to_warehouse_no,json=toWarehouseNo,proto3,oneof" json:"to_warehouse_no,omitempty"`
	RecId              *int32                    `protobuf:"varint,8,opt,name=rec_id,json=recId,proto3,oneof" json:"rec_id,omitempty"`
	LockId             *int32                    `protobuf:"varint,9,opt,name=lock_id,json=lockId,proto3,oneof" json:"lock_id,omitempty"`
	ApiOuterNo         *string                   `protobuf:"bytes,10,opt,name=api_outer_no,json=apiOuterNo,proto3,oneof" json:"api_outer_no,omitempty"`
	FromWmsOrderNo     *string                   `protobuf:"bytes,11,opt,name=from_wms_order_no,json=fromWmsOrderNo,proto3,oneof" json:"from_wms_order_no,omitempty"`
	OuterNo2           *string                   `protobuf:"bytes,12,opt,name=outer_no2,json=outerNo2,proto3,oneof" json:"outer_no2,omitempty"`
	ToWmsOrderNo       *string                   `protobuf:"bytes,13,opt,name=to_wms_order_no,json=toWmsOrderNo,proto3,oneof" json:"to_wms_order_no,omitempty"`
	ErrorInfo          *string                   `protobuf:"bytes,14,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	WmsStatus          *int32                    `protobuf:"varint,15,opt,name=wms_status,json=wmsStatus,proto3,oneof" json:"wms_status,omitempty"`
	FromWarehouseId    *int32                    `protobuf:"varint,16,opt,name=from_warehouse_id,json=fromWarehouseId,proto3,oneof" json:"from_warehouse_id,omitempty"`
	ToWarehouseId      *int32                    `protobuf:"varint,17,opt,name=to_warehouse_id,json=toWarehouseId,proto3,oneof" json:"to_warehouse_id,omitempty"`
	Address            *string                   `protobuf:"bytes,18,opt,name=address,proto3,oneof" json:"address,omitempty"`
	LogisticsId        *int32                    `protobuf:"varint,19,opt,name=logistics_id,json=logisticsId,proto3,oneof" json:"logistics_id,omitempty"`
	OutGoodsAmount     *float64                  `protobuf:"fixed64,20,opt,name=out_goods_amount,json=outGoodsAmount,proto3,oneof" json:"out_goods_amount,omitempty"`
	InGoodsAmount      *float64                  `protobuf:"fixed64,21,opt,name=in_goods_amount,json=inGoodsAmount,proto3,oneof" json:"in_goods_amount,omitempty"`
	NoteCount          *int32                    `protobuf:"varint,22,opt,name=note_count,json=noteCount,proto3,oneof" json:"note_count,omitempty"`
	FlagId             *int32                    `protobuf:"varint,23,opt,name=flag_id,json=flagId,proto3,oneof" json:"flag_id,omitempty"`
	Status             *string                   `protobuf:"bytes,24,opt,name=status,proto3,oneof" json:"status,omitempty"`
	OuterNo            *string                   `protobuf:"bytes,25,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
	CreatorId          *int32                    `protobuf:"varint,26,opt,name=creator_id,json=creatorId,proto3,oneof" json:"creator_id,omitempty"`
	CreatorName        *string                   `protobuf:"bytes,27,opt,name=creator_name,json=creatorName,proto3,oneof" json:"creator_name,omitempty"`
	Contact            *string                   `protobuf:"bytes,28,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Telno              *string                   `protobuf:"bytes,29,opt,name=telno,proto3,oneof" json:"telno,omitempty"`
	LogisticsType      *int32                    `protobuf:"varint,30,opt,name=logistics_type,json=logisticsType,proto3,oneof" json:"logistics_type,omitempty"`
	LogisticsNo        *string                   `protobuf:"bytes,31,opt,name=logistics_no,json=logisticsNo,proto3,oneof" json:"logistics_no,omitempty"`
	LogisticsName      *string                   `protobuf:"bytes,32,opt,name=logistics_name,json=logisticsName,proto3,oneof" json:"logistics_name,omitempty"`
	LogisticsCode      *string                   `protobuf:"bytes,33,opt,name=logistics_code,json=logisticsCode,proto3,oneof" json:"logistics_code,omitempty"`
	GoodsCount         *float64                  `protobuf:"fixed64,34,opt,name=goods_count,json=goodsCount,proto3,oneof" json:"goods_count,omitempty"`
	GoodsTypeCount     *float64                  `protobuf:"fixed64,35,opt,name=goods_type_count,json=goodsTypeCount,proto3,oneof" json:"goods_type_count,omitempty"`
	GoodsInCount       *float64                  `protobuf:"fixed64,36,opt,name=goods_in_count,json=goodsInCount,proto3,oneof" json:"goods_in_count,omitempty"`
	GoodsOutCount      *float64                  `protobuf:"fixed64,37,opt,name=goods_out_count,json=goodsOutCount,proto3,oneof" json:"goods_out_count,omitempty"`
	Modified           *string                   `protobuf:"bytes,38,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	Created            *string                   `protobuf:"bytes,39,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Remark             *string                   `protobuf:"bytes,40,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	ToWarehouseAddress *string                   `protobuf:"bytes,41,opt,name=to_warehouse_address,json=toWarehouseAddress,proto3,oneof" json:"to_warehouse_address,omitempty"`
	OuterNo1           *string                   `protobuf:"bytes,42,opt,name=outer_no1,json=outerNo1,proto3,oneof" json:"outer_no1,omitempty"`
}

func (x *TransferOrderResponse) Reset() {
	*x = TransferOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOrderResponse) ProtoMessage() {}

func (x *TransferOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOrderResponse.ProtoReflect.Descriptor instead.
func (*TransferOrderResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{138}
}

func (x *TransferOrderResponse) GetTransferId() int32 {
	if x != nil {
		return x.TransferId
	}
	return 0
}

func (x *TransferOrderResponse) GetTransferDetails() []*TransferDetailResponse {
	if x != nil {
		return x.TransferDetails
	}
	return nil
}

func (x *TransferOrderResponse) GetTransferNo() string {
	if x != nil && x.TransferNo != nil {
		return *x.TransferNo
	}
	return ""
}

func (x *TransferOrderResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TransferOrderResponse) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *TransferOrderResponse) GetFromWarehouseNo() string {
	if x != nil && x.FromWarehouseNo != nil {
		return *x.FromWarehouseNo
	}
	return ""
}

func (x *TransferOrderResponse) GetToWarehouseNo() string {
	if x != nil && x.ToWarehouseNo != nil {
		return *x.ToWarehouseNo
	}
	return ""
}

func (x *TransferOrderResponse) GetRecId() int32 {
	if x != nil && x.RecId != nil {
		return *x.RecId
	}
	return 0
}

func (x *TransferOrderResponse) GetLockId() int32 {
	if x != nil && x.LockId != nil {
		return *x.LockId
	}
	return 0
}

func (x *TransferOrderResponse) GetApiOuterNo() string {
	if x != nil && x.ApiOuterNo != nil {
		return *x.ApiOuterNo
	}
	return ""
}

func (x *TransferOrderResponse) GetFromWmsOrderNo() string {
	if x != nil && x.FromWmsOrderNo != nil {
		return *x.FromWmsOrderNo
	}
	return ""
}

func (x *TransferOrderResponse) GetOuterNo2() string {
	if x != nil && x.OuterNo2 != nil {
		return *x.OuterNo2
	}
	return ""
}

func (x *TransferOrderResponse) GetToWmsOrderNo() string {
	if x != nil && x.ToWmsOrderNo != nil {
		return *x.ToWmsOrderNo
	}
	return ""
}

func (x *TransferOrderResponse) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

func (x *TransferOrderResponse) GetWmsStatus() int32 {
	if x != nil && x.WmsStatus != nil {
		return *x.WmsStatus
	}
	return 0
}

func (x *TransferOrderResponse) GetFromWarehouseId() int32 {
	if x != nil && x.FromWarehouseId != nil {
		return *x.FromWarehouseId
	}
	return 0
}

func (x *TransferOrderResponse) GetToWarehouseId() int32 {
	if x != nil && x.ToWarehouseId != nil {
		return *x.ToWarehouseId
	}
	return 0
}

func (x *TransferOrderResponse) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *TransferOrderResponse) GetLogisticsId() int32 {
	if x != nil && x.LogisticsId != nil {
		return *x.LogisticsId
	}
	return 0
}

func (x *TransferOrderResponse) GetOutGoodsAmount() float64 {
	if x != nil && x.OutGoodsAmount != nil {
		return *x.OutGoodsAmount
	}
	return 0
}

func (x *TransferOrderResponse) GetInGoodsAmount() float64 {
	if x != nil && x.InGoodsAmount != nil {
		return *x.InGoodsAmount
	}
	return 0
}

func (x *TransferOrderResponse) GetNoteCount() int32 {
	if x != nil && x.NoteCount != nil {
		return *x.NoteCount
	}
	return 0
}

func (x *TransferOrderResponse) GetFlagId() int32 {
	if x != nil && x.FlagId != nil {
		return *x.FlagId
	}
	return 0
}

func (x *TransferOrderResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TransferOrderResponse) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

func (x *TransferOrderResponse) GetCreatorId() int32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *TransferOrderResponse) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *TransferOrderResponse) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

func (x *TransferOrderResponse) GetTelno() string {
	if x != nil && x.Telno != nil {
		return *x.Telno
	}
	return ""
}

func (x *TransferOrderResponse) GetLogisticsType() int32 {
	if x != nil && x.LogisticsType != nil {
		return *x.LogisticsType
	}
	return 0
}

func (x *TransferOrderResponse) GetLogisticsNo() string {
	if x != nil && x.LogisticsNo != nil {
		return *x.LogisticsNo
	}
	return ""
}

func (x *TransferOrderResponse) GetLogisticsName() string {
	if x != nil && x.LogisticsName != nil {
		return *x.LogisticsName
	}
	return ""
}

func (x *TransferOrderResponse) GetLogisticsCode() string {
	if x != nil && x.LogisticsCode != nil {
		return *x.LogisticsCode
	}
	return ""
}

func (x *TransferOrderResponse) GetGoodsCount() float64 {
	if x != nil && x.GoodsCount != nil {
		return *x.GoodsCount
	}
	return 0
}

func (x *TransferOrderResponse) GetGoodsTypeCount() float64 {
	if x != nil && x.GoodsTypeCount != nil {
		return *x.GoodsTypeCount
	}
	return 0
}

func (x *TransferOrderResponse) GetGoodsInCount() float64 {
	if x != nil && x.GoodsInCount != nil {
		return *x.GoodsInCount
	}
	return 0
}

func (x *TransferOrderResponse) GetGoodsOutCount() float64 {
	if x != nil && x.GoodsOutCount != nil {
		return *x.GoodsOutCount
	}
	return 0
}

func (x *TransferOrderResponse) GetModified() string {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return ""
}

func (x *TransferOrderResponse) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *TransferOrderResponse) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *TransferOrderResponse) GetToWarehouseAddress() string {
	if x != nil && x.ToWarehouseAddress != nil {
		return *x.ToWarehouseAddress
	}
	return ""
}

func (x *TransferOrderResponse) GetOuterNo1() string {
	if x != nil && x.OuterNo1 != nil {
		return *x.OuterNo1
	}
	return ""
}

type UpdateGoodsDeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string                       `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	ComplainContent      *ObjectComplainRequest       `protobuf:"bytes,3,opt,name=complain_content,json=complainContent,proto3" json:"complain_content,omitempty"`
	SwapGoodsDetails     []*ServiceGoodsDetailRequest `protobuf:"bytes,4,rep,name=swap_goods_details,json=swapGoodsDetails,proto3" json:"swap_goods_details,omitempty"`
	PayDetails           []*ServicePayDetailRequest   `protobuf:"bytes,5,rep,name=pay_details,json=payDetails,proto3" json:"pay_details,omitempty"`
	StockOutDetails      []*ServiceStockOutRequest    `protobuf:"bytes,6,rep,name=stock_out_details,json=stockOutDetails,proto3" json:"stock_out_details,omitempty"`
	XPartialUpdateFields []string                     `protobuf:"bytes,7,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	CreateName           *string                      `protobuf:"bytes,8,opt,name=create_name,json=createName,proto3,oneof" json:"create_name,omitempty"`
	CreateType           *int32                       `protobuf:"varint,9,opt,name=create_type,json=createType,proto3,oneof" json:"create_type,omitempty"`
	ApproveTime          *string                      `protobuf:"bytes,10,opt,name=approve_time,json=approveTime,proto3,oneof" json:"approve_time,omitempty"`
	ApproveName          *string                      `protobuf:"bytes,11,opt,name=approve_name,json=approveName,proto3,oneof" json:"approve_name,omitempty"`
	ApproveReasons       *string                      `protobuf:"bytes,12,opt,name=approve_reasons,json=approveReasons,proto3,oneof" json:"approve_reasons,omitempty"`
	RejectReasons        *string                      `protobuf:"bytes,13,opt,name=reject_reasons,json=rejectReasons,proto3,oneof" json:"reject_reasons,omitempty"`
	CancelReasons        *string                      `protobuf:"bytes,14,opt,name=cancel_reasons,json=cancelReasons,proto3,oneof" json:"cancel_reasons,omitempty"`
	Sid                  string                       `protobuf:"bytes,15,opt,name=sid,proto3" json:"sid,omitempty"`
	TradeType            *int32                       `protobuf:"varint,16,opt,name=trade_type,json=tradeType,proto3,oneof" json:"trade_type,omitempty"`
	Type                 *int32                       `protobuf:"varint,17,opt,name=type,proto3,oneof" json:"type,omitempty"`
	RecordType           *int32                       `protobuf:"varint,18,opt,name=record_type,json=recordType,proto3,oneof" json:"record_type,omitempty"`
	Judgement            *int32                       `protobuf:"varint,19,opt,name=judgement,proto3,oneof" json:"judgement,omitempty"`
	ServiceStatus        *int32                       `protobuf:"varint,20,opt,name=service_status,json=serviceStatus,proto3,oneof" json:"service_status,omitempty"`
	TradeStatus          *int32                       `protobuf:"varint,21,opt,name=trade_status,json=tradeStatus,proto3,oneof" json:"trade_status,omitempty"`
	PayStatus            *int32                       `protobuf:"varint,22,opt,name=pay_status,json=payStatus,proto3,oneof" json:"pay_status,omitempty"`
	PayTime              *string                      `protobuf:"bytes,23,opt,name=pay_time,json=payTime,proto3,oneof" json:"pay_time,omitempty"`
	DeliveryTerm         *int32                       `protobuf:"varint,24,opt,name=delivery_term,json=deliveryTerm,proto3,oneof" json:"delivery_term,omitempty"`
	BuyerNick            *string                      `protobuf:"bytes,25,opt,name=buyer_nick,json=buyerNick,proto3,oneof" json:"buyer_nick,omitempty"`
	BuyerMobile          *string                      `protobuf:"bytes,26,opt,name=buyer_mobile,json=buyerMobile,proto3,oneof" json:"buyer_mobile,omitempty"`
	BuyerMessage         *string                      `protobuf:"bytes,27,opt,name=buyer_message,json=buyerMessage,proto3,oneof" json:"buyer_message,omitempty"`
	BuyerLabel           *string                      `protobuf:"bytes,28,opt,name=buyer_label,json=buyerLabel,proto3,oneof" json:"buyer_label,omitempty"`
	BuyerSource          *int32                       `protobuf:"varint,29,opt,name=buyer_source,json=buyerSource,proto3,oneof" json:"buyer_source,omitempty"`
	SellerName           *string                      `protobuf:"bytes,30,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	SellerMemo           *string                      `protobuf:"bytes,31,opt,name=seller_memo,json=sellerMemo,proto3,oneof" json:"seller_memo,omitempty"`
	ShopNo               *string                      `protobuf:"bytes,32,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *string                      `protobuf:"bytes,33,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo          *string                      `protobuf:"bytes,34,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *string                      `protobuf:"bytes,35,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	ReceiverName         *string                      `protobuf:"bytes,36,opt,name=receiver_name,json=receiverName,proto3,oneof" json:"receiver_name,omitempty"`
	ReceiverProvince     *string                      `protobuf:"bytes,37,opt,name=receiver_province,json=receiverProvince,proto3,oneof" json:"receiver_province,omitempty"`
	ReceiverCity         *string                      `protobuf:"bytes,38,opt,name=receiver_city,json=receiverCity,proto3,oneof" json:"receiver_city,omitempty"`
	ReceiverDistrict     *string                      `protobuf:"bytes,39,opt,name=receiver_district,json=receiverDistrict,proto3,oneof" json:"receiver_district,omitempty"`
	ReceiverAddress      *string                      `protobuf:"bytes,40,opt,name=receiver_address,json=receiverAddress,proto3,oneof" json:"receiver_address,omitempty"`
	ReceiverMobile       *string                      `protobuf:"bytes,41,opt,name=receiver_mobile,json=receiverMobile,proto3,oneof" json:"receiver_mobile,omitempty"`
	PostAmount           *float64                     `protobuf:"fixed64,42,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	OtherAmount          *float64                     `protobuf:"fixed64,43,opt,name=other_amount,json=otherAmount,proto3,oneof" json:"other_amount,omitempty"`
	ExtCodFee            *float64                     `protobuf:"fixed64,44,opt,name=ext_cod_fee,json=extCodFee,proto3,oneof" json:"ext_cod_fee,omitempty"`
	Paid                 *float64                     `protobuf:"fixed64,45,opt,name=paid,proto3,oneof" json:"paid,omitempty"`
	CodAmount            *float64                     `protobuf:"fixed64,46,opt,name=cod_amount,json=codAmount,proto3,oneof" json:"cod_amount,omitempty"`
	Receivable           *float64                     `protobuf:"fixed64,47,opt,name=receivable,proto3,oneof" json:"receivable,omitempty"`
	Discount             *float64                     `protobuf:"fixed64,48,opt,name=discount,proto3,oneof" json:"discount,omitempty"`
	InvoiceStatus        *int32                       `protobuf:"varint,49,opt,name=invoice_status,json=invoiceStatus,proto3,oneof" json:"invoice_status,omitempty"`
	LogisticsInName      *string                      `protobuf:"bytes,50,opt,name=logistics_in_name,json=logisticsInName,proto3,oneof" json:"logistics_in_name,omitempty"`
	LogisticsInCode      *string                      `protobuf:"bytes,51,opt,name=logistics_in_code,json=logisticsInCode,proto3,oneof" json:"logistics_in_code,omitempty"`
	LogisticsInNo        *string                      `protobuf:"bytes,52,opt,name=logistics_in_no,json=logisticsInNo,proto3,oneof" json:"logistics_in_no,omitempty"`
	WarehouseInNo        *string                      `protobuf:"bytes,53,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName      *string                      `protobuf:"bytes,54,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OuterNo              *string                      `protobuf:"bytes,55,opt,name=outer_no,json=outerNo,proto3,oneof" json:"outer_no,omitempty"`
}

func (x *UpdateGoodsDeliverRequest) Reset() {
	*x = UpdateGoodsDeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodsDeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodsDeliverRequest) ProtoMessage() {}

func (x *UpdateGoodsDeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodsDeliverRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodsDeliverRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{139}
}

func (x *UpdateGoodsDeliverRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetComplainContent() *ObjectComplainRequest {
	if x != nil {
		return x.ComplainContent
	}
	return nil
}

func (x *UpdateGoodsDeliverRequest) GetSwapGoodsDetails() []*ServiceGoodsDetailRequest {
	if x != nil {
		return x.SwapGoodsDetails
	}
	return nil
}

func (x *UpdateGoodsDeliverRequest) GetPayDetails() []*ServicePayDetailRequest {
	if x != nil {
		return x.PayDetails
	}
	return nil
}

func (x *UpdateGoodsDeliverRequest) GetStockOutDetails() []*ServiceStockOutRequest {
	if x != nil {
		return x.StockOutDetails
	}
	return nil
}

func (x *UpdateGoodsDeliverRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateGoodsDeliverRequest) GetCreateName() string {
	if x != nil && x.CreateName != nil {
		return *x.CreateName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetCreateType() int32 {
	if x != nil && x.CreateType != nil {
		return *x.CreateType
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetApproveTime() string {
	if x != nil && x.ApproveTime != nil {
		return *x.ApproveTime
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetApproveName() string {
	if x != nil && x.ApproveName != nil {
		return *x.ApproveName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetApproveReasons() string {
	if x != nil && x.ApproveReasons != nil {
		return *x.ApproveReasons
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetRejectReasons() string {
	if x != nil && x.RejectReasons != nil {
		return *x.RejectReasons
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetCancelReasons() string {
	if x != nil && x.CancelReasons != nil {
		return *x.CancelReasons
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetTradeType() int32 {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetRecordType() int32 {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetJudgement() int32 {
	if x != nil && x.Judgement != nil {
		return *x.Judgement
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetServiceStatus() int32 {
	if x != nil && x.ServiceStatus != nil {
		return *x.ServiceStatus
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetTradeStatus() int32 {
	if x != nil && x.TradeStatus != nil {
		return *x.TradeStatus
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetPayStatus() int32 {
	if x != nil && x.PayStatus != nil {
		return *x.PayStatus
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetPayTime() string {
	if x != nil && x.PayTime != nil {
		return *x.PayTime
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetDeliveryTerm() int32 {
	if x != nil && x.DeliveryTerm != nil {
		return *x.DeliveryTerm
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetBuyerNick() string {
	if x != nil && x.BuyerNick != nil {
		return *x.BuyerNick
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetBuyerMobile() string {
	if x != nil && x.BuyerMobile != nil {
		return *x.BuyerMobile
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetBuyerMessage() string {
	if x != nil && x.BuyerMessage != nil {
		return *x.BuyerMessage
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetBuyerLabel() string {
	if x != nil && x.BuyerLabel != nil {
		return *x.BuyerLabel
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetBuyerSource() int32 {
	if x != nil && x.BuyerSource != nil {
		return *x.BuyerSource
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetSellerMemo() string {
	if x != nil && x.SellerMemo != nil {
		return *x.SellerMemo
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetShopNo() string {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetShopName() string {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetWarehouseNo() string {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetWarehouseName() string {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetReceiverName() string {
	if x != nil && x.ReceiverName != nil {
		return *x.ReceiverName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetReceiverProvince() string {
	if x != nil && x.ReceiverProvince != nil {
		return *x.ReceiverProvince
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetReceiverCity() string {
	if x != nil && x.ReceiverCity != nil {
		return *x.ReceiverCity
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetReceiverDistrict() string {
	if x != nil && x.ReceiverDistrict != nil {
		return *x.ReceiverDistrict
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetReceiverMobile() string {
	if x != nil && x.ReceiverMobile != nil {
		return *x.ReceiverMobile
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetOtherAmount() float64 {
	if x != nil && x.OtherAmount != nil {
		return *x.OtherAmount
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetExtCodFee() float64 {
	if x != nil && x.ExtCodFee != nil {
		return *x.ExtCodFee
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetPaid() float64 {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetCodAmount() float64 {
	if x != nil && x.CodAmount != nil {
		return *x.CodAmount
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetReceivable() float64 {
	if x != nil && x.Receivable != nil {
		return *x.Receivable
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetInvoiceStatus() int32 {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return 0
}

func (x *UpdateGoodsDeliverRequest) GetLogisticsInName() string {
	if x != nil && x.LogisticsInName != nil {
		return *x.LogisticsInName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetLogisticsInCode() string {
	if x != nil && x.LogisticsInCode != nil {
		return *x.LogisticsInCode
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetLogisticsInNo() string {
	if x != nil && x.LogisticsInNo != nil {
		return *x.LogisticsInNo
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *UpdateGoodsDeliverRequest) GetOuterNo() string {
	if x != nil && x.OuterNo != nil {
		return *x.OuterNo
	}
	return ""
}

type UpdateServiceConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	PlatName             string   `protobuf:"bytes,4,opt,name=plat_name,json=platName,proto3" json:"plat_name,omitempty"`
	ConfName             *string  `protobuf:"bytes,5,opt,name=conf_name,json=confName,proto3,oneof" json:"conf_name,omitempty"`
	TradeType            int32    `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Type                 int32    `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *UpdateServiceConfRequest) Reset() {
	*x = UpdateServiceConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceConfRequest) ProtoMessage() {}

func (x *UpdateServiceConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceConfRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceConfRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{140}
}

func (x *UpdateServiceConfRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateServiceConfRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateServiceConfRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateServiceConfRequest) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *UpdateServiceConfRequest) GetConfName() string {
	if x != nil && x.ConfName != nil {
		return *x.ConfName
	}
	return ""
}

func (x *UpdateServiceConfRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *UpdateServiceConfRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type UpdateServiceConfSolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Employee             *int32   `protobuf:"varint,5,opt,name=employee,proto3,oneof" json:"employee,omitempty"`
	ShopNo               *int32   `protobuf:"varint,6,opt,name=shop_no,json=shopNo,proto3,oneof" json:"shop_no,omitempty"`
	ShopName             *int32   `protobuf:"varint,7,opt,name=shop_name,json=shopName,proto3,oneof" json:"shop_name,omitempty"`
	WarehouseNo          *int32   `protobuf:"varint,8,opt,name=warehouse_no,json=warehouseNo,proto3,oneof" json:"warehouse_no,omitempty"`
	WarehouseName        *int32   `protobuf:"varint,9,opt,name=warehouse_name,json=warehouseName,proto3,oneof" json:"warehouse_name,omitempty"`
	WarehouseInNo        *int32   `protobuf:"varint,10,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName      *int32   `protobuf:"varint,11,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	ComplainPayDetail    bool     `protobuf:"varint,12,opt,name=complain_pay_detail,json=complainPayDetail,proto3" json:"complain_pay_detail,omitempty"`
	ComplainInvoice      bool     `protobuf:"varint,13,opt,name=complain_invoice,json=complainInvoice,proto3" json:"complain_invoice,omitempty"`
	ComplainStockIn      bool     `protobuf:"varint,14,opt,name=complain_stock_in,json=complainStockIn,proto3" json:"complain_stock_in,omitempty"`
	ComplainStockOut     bool     `protobuf:"varint,15,opt,name=complain_stock_out,json=complainStockOut,proto3" json:"complain_stock_out,omitempty"`
	ComplainRefund       bool     `protobuf:"varint,16,opt,name=complain_refund,json=complainRefund,proto3" json:"complain_refund,omitempty"`
}

func (x *UpdateServiceConfSolutionRequest) Reset() {
	*x = UpdateServiceConfSolutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceConfSolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceConfSolutionRequest) ProtoMessage() {}

func (x *UpdateServiceConfSolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceConfSolutionRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceConfSolutionRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{141}
}

func (x *UpdateServiceConfSolutionRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateServiceConfSolutionRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateServiceConfSolutionRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetEmployee() int32 {
	if x != nil && x.Employee != nil {
		return *x.Employee
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetShopNo() int32 {
	if x != nil && x.ShopNo != nil {
		return *x.ShopNo
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetShopName() int32 {
	if x != nil && x.ShopName != nil {
		return *x.ShopName
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetWarehouseNo() int32 {
	if x != nil && x.WarehouseNo != nil {
		return *x.WarehouseNo
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetWarehouseName() int32 {
	if x != nil && x.WarehouseName != nil {
		return *x.WarehouseName
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetWarehouseInNo() int32 {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetWarehouseInName() int32 {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return 0
}

func (x *UpdateServiceConfSolutionRequest) GetComplainPayDetail() bool {
	if x != nil {
		return x.ComplainPayDetail
	}
	return false
}

func (x *UpdateServiceConfSolutionRequest) GetComplainInvoice() bool {
	if x != nil {
		return x.ComplainInvoice
	}
	return false
}

func (x *UpdateServiceConfSolutionRequest) GetComplainStockIn() bool {
	if x != nil {
		return x.ComplainStockIn
	}
	return false
}

func (x *UpdateServiceConfSolutionRequest) GetComplainStockOut() bool {
	if x != nil {
		return x.ComplainStockOut
	}
	return false
}

func (x *UpdateServiceConfSolutionRequest) GetComplainRefund() bool {
	if x != nil {
		return x.ComplainRefund
	}
	return false
}

type UpdateServiceConfWarehouseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ShopNo               string   `protobuf:"bytes,4,opt,name=shop_no,json=shopNo,proto3" json:"shop_no,omitempty"`
	ShopName             string   `protobuf:"bytes,5,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	WarehouseNo          string   `protobuf:"bytes,6,opt,name=warehouse_no,json=warehouseNo,proto3" json:"warehouse_no,omitempty"`
	WarehouseName        string   `protobuf:"bytes,7,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	ConfirmOvertime      int32    `protobuf:"varint,8,opt,name=confirm_overtime,json=confirmOvertime,proto3" json:"confirm_overtime,omitempty"`
	FinishOvertime       int32    `protobuf:"varint,9,opt,name=finish_overtime,json=finishOvertime,proto3" json:"finish_overtime,omitempty"`
	ExpireTime           int32    `protobuf:"varint,10,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	AutoApprove          bool     `protobuf:"varint,11,opt,name=auto_approve,json=autoApprove,proto3" json:"auto_approve,omitempty"`
	CanReturn            bool     `protobuf:"varint,12,opt,name=can_return,json=canReturn,proto3" json:"can_return,omitempty"`
	WarehouseInNo        *string  `protobuf:"bytes,13,opt,name=warehouse_in_no,json=warehouseInNo,proto3,oneof" json:"warehouse_in_no,omitempty"`
	WarehouseInName      *string  `protobuf:"bytes,14,opt,name=warehouse_in_name,json=warehouseInName,proto3,oneof" json:"warehouse_in_name,omitempty"`
	OperatorId           *int32   `protobuf:"varint,15,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName         *string  `protobuf:"bytes,16,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Parent               int64    `protobuf:"varint,17,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *UpdateServiceConfWarehouseRequest) Reset() {
	*x = UpdateServiceConfWarehouseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceConfWarehouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceConfWarehouseRequest) ProtoMessage() {}

func (x *UpdateServiceConfWarehouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceConfWarehouseRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceConfWarehouseRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{142}
}

func (x *UpdateServiceConfWarehouseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateServiceConfWarehouseRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateServiceConfWarehouseRequest) GetShopNo() string {
	if x != nil {
		return x.ShopNo
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetWarehouseNo() string {
	if x != nil {
		return x.WarehouseNo
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetConfirmOvertime() int32 {
	if x != nil {
		return x.ConfirmOvertime
	}
	return 0
}

func (x *UpdateServiceConfWarehouseRequest) GetFinishOvertime() int32 {
	if x != nil {
		return x.FinishOvertime
	}
	return 0
}

func (x *UpdateServiceConfWarehouseRequest) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UpdateServiceConfWarehouseRequest) GetAutoApprove() bool {
	if x != nil {
		return x.AutoApprove
	}
	return false
}

func (x *UpdateServiceConfWarehouseRequest) GetCanReturn() bool {
	if x != nil {
		return x.CanReturn
	}
	return false
}

func (x *UpdateServiceConfWarehouseRequest) GetWarehouseInNo() string {
	if x != nil && x.WarehouseInNo != nil {
		return *x.WarehouseInNo
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetWarehouseInName() string {
	if x != nil && x.WarehouseInName != nil {
		return *x.WarehouseInName
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *UpdateServiceConfWarehouseRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *UpdateServiceConfWarehouseRequest) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

type UpdateServiceReasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filters              string   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	TradeType            int32    `protobuf:"varint,4,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ReasonType           *int32   `protobuf:"varint,5,opt,name=reason_type,json=reasonType,proto3,oneof" json:"reason_type,omitempty"`
	ReasonCode           int32    `protobuf:"varint,6,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	ReasonName           string   `protobuf:"bytes,7,opt,name=reason_name,json=reasonName,proto3" json:"reason_name,omitempty"`
	ReasonDesc           *string  `protobuf:"bytes,8,opt,name=reason_desc,json=reasonDesc,proto3,oneof" json:"reason_desc,omitempty"`
	WithRemark           *bool    `protobuf:"varint,9,opt,name=with_remark,json=withRemark,proto3,oneof" json:"with_remark,omitempty"`
	IsValid              bool     `protobuf:"varint,10,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsReserved           *bool    `protobuf:"varint,11,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	Parent               *int64   `protobuf:"varint,12,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *UpdateServiceReasonRequest) Reset() {
	*x = UpdateServiceReasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceReasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceReasonRequest) ProtoMessage() {}

func (x *UpdateServiceReasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceReasonRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceReasonRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateServiceReasonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateServiceReasonRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *UpdateServiceReasonRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *UpdateServiceReasonRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *UpdateServiceReasonRequest) GetReasonType() int32 {
	if x != nil && x.ReasonType != nil {
		return *x.ReasonType
	}
	return 0
}

func (x *UpdateServiceReasonRequest) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *UpdateServiceReasonRequest) GetReasonName() string {
	if x != nil {
		return x.ReasonName
	}
	return ""
}

func (x *UpdateServiceReasonRequest) GetReasonDesc() string {
	if x != nil && x.ReasonDesc != nil {
		return *x.ReasonDesc
	}
	return ""
}

func (x *UpdateServiceReasonRequest) GetWithRemark() bool {
	if x != nil && x.WithRemark != nil {
		return *x.WithRemark
	}
	return false
}

func (x *UpdateServiceReasonRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *UpdateServiceReasonRequest) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *UpdateServiceReasonRequest) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

type VendorOperatorCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizeId   *int32  `protobuf:"varint,3,opt,name=organize_id,json=organizeId,proto3,oneof" json:"organize_id,omitempty"`
	OrganizeName *string `protobuf:"bytes,4,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	OperatorId   *int32  `protobuf:"varint,5,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName *string `protobuf:"bytes,6,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Vendor       *int64  `protobuf:"varint,7,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters      string  `protobuf:"bytes,8,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *VendorOperatorCreateRequest) Reset() {
	*x = VendorOperatorCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorCreateRequest) ProtoMessage() {}

func (x *VendorOperatorCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorCreateRequest.ProtoReflect.Descriptor instead.
func (*VendorOperatorCreateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{144}
}

func (x *VendorOperatorCreateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorOperatorCreateRequest) GetOrganizeId() int32 {
	if x != nil && x.OrganizeId != nil {
		return *x.OrganizeId
	}
	return 0
}

func (x *VendorOperatorCreateRequest) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *VendorOperatorCreateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *VendorOperatorCreateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *VendorOperatorCreateRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *VendorOperatorCreateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type VendorOperatorDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VendorOperatorDestroyRequest) Reset() {
	*x = VendorOperatorDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorDestroyRequest) ProtoMessage() {}

func (x *VendorOperatorDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorDestroyRequest.ProtoReflect.Descriptor instead.
func (*VendorOperatorDestroyRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{145}
}

func (x *VendorOperatorDestroyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type VendorOperatorListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters string `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *VendorOperatorListRequest) Reset() {
	*x = VendorOperatorListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorListRequest) ProtoMessage() {}

func (x *VendorOperatorListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorListRequest.ProtoReflect.Descriptor instead.
func (*VendorOperatorListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{146}
}

func (x *VendorOperatorListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type VendorOperatorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*VendorOperatorResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *VendorOperatorListResponse) Reset() {
	*x = VendorOperatorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorListResponse) ProtoMessage() {}

func (x *VendorOperatorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorListResponse.ProtoReflect.Descriptor instead.
func (*VendorOperatorListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{147}
}

func (x *VendorOperatorListResponse) GetResults() []*VendorOperatorResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *VendorOperatorListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type VendorOperatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizeId   *int32  `protobuf:"varint,3,opt,name=organize_id,json=organizeId,proto3,oneof" json:"organize_id,omitempty"`
	OrganizeName *string `protobuf:"bytes,4,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	OperatorId   *int32  `protobuf:"varint,5,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName *string `protobuf:"bytes,6,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Vendor       *int64  `protobuf:"varint,7,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters      string  `protobuf:"bytes,8,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *VendorOperatorRequest) Reset() {
	*x = VendorOperatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorRequest) ProtoMessage() {}

func (x *VendorOperatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorRequest.ProtoReflect.Descriptor instead.
func (*VendorOperatorRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{148}
}

func (x *VendorOperatorRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorOperatorRequest) GetOrganizeId() int32 {
	if x != nil && x.OrganizeId != nil {
		return *x.OrganizeId
	}
	return 0
}

func (x *VendorOperatorRequest) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *VendorOperatorRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *VendorOperatorRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *VendorOperatorRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *VendorOperatorRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type VendorOperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime   string  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   string  `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	OrganizeId   *int32  `protobuf:"varint,4,opt,name=organize_id,json=organizeId,proto3,oneof" json:"organize_id,omitempty"`
	OrganizeName *string `protobuf:"bytes,5,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	OperatorId   *int32  `protobuf:"varint,6,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName *string `protobuf:"bytes,7,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Vendor       *int64  `protobuf:"varint,8,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
}

func (x *VendorOperatorResponse) Reset() {
	*x = VendorOperatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorResponse) ProtoMessage() {}

func (x *VendorOperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorResponse.ProtoReflect.Descriptor instead.
func (*VendorOperatorResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{149}
}

func (x *VendorOperatorResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorOperatorResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VendorOperatorResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *VendorOperatorResponse) GetOrganizeId() int32 {
	if x != nil && x.OrganizeId != nil {
		return *x.OrganizeId
	}
	return 0
}

func (x *VendorOperatorResponse) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *VendorOperatorResponse) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *VendorOperatorResponse) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *VendorOperatorResponse) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

type VendorOperatorRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VendorOperatorRetrieveRequest) Reset() {
	*x = VendorOperatorRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorRetrieveRequest) ProtoMessage() {}

func (x *VendorOperatorRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorRetrieveRequest.ProtoReflect.Descriptor instead.
func (*VendorOperatorRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{150}
}

func (x *VendorOperatorRetrieveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type VendorOperatorUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XPartialUpdateFields []string `protobuf:"bytes,3,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	OrganizeId           *int32   `protobuf:"varint,4,opt,name=organize_id,json=organizeId,proto3,oneof" json:"organize_id,omitempty"`
	OrganizeName         *string  `protobuf:"bytes,5,opt,name=organize_name,json=organizeName,proto3,oneof" json:"organize_name,omitempty"`
	OperatorId           *int32   `protobuf:"varint,6,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	OperatorName         *string  `protobuf:"bytes,7,opt,name=operator_name,json=operatorName,proto3,oneof" json:"operator_name,omitempty"`
	Vendor               *int64   `protobuf:"varint,8,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Filters              string   `protobuf:"bytes,9,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *VendorOperatorUpdateRequest) Reset() {
	*x = VendorOperatorUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOperatorUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOperatorUpdateRequest) ProtoMessage() {}

func (x *VendorOperatorUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOperatorUpdateRequest.ProtoReflect.Descriptor instead.
func (*VendorOperatorUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{151}
}

func (x *VendorOperatorUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorOperatorUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *VendorOperatorUpdateRequest) GetOrganizeId() int32 {
	if x != nil && x.OrganizeId != nil {
		return *x.OrganizeId
	}
	return 0
}

func (x *VendorOperatorUpdateRequest) GetOrganizeName() string {
	if x != nil && x.OrganizeName != nil {
		return *x.OrganizeName
	}
	return ""
}

func (x *VendorOperatorUpdateRequest) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *VendorOperatorUpdateRequest) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *VendorOperatorUpdateRequest) GetVendor() int64 {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return 0
}

func (x *VendorOperatorUpdateRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type WdtShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopCode   string `protobuf:"bytes,1,opt,name=shop_code,json=shopCode,proto3" json:"shop_code,omitempty"`
	ShopName   string `protobuf:"bytes,2,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	PlatformId int32  `protobuf:"varint,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
}

func (x *WdtShop) Reset() {
	*x = WdtShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtShop) ProtoMessage() {}

func (x *WdtShop) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtShop.ProtoReflect.Descriptor instead.
func (*WdtShop) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{152}
}

func (x *WdtShop) GetShopCode() string {
	if x != nil {
		return x.ShopCode
	}
	return ""
}

func (x *WdtShop) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *WdtShop) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

type WdtShopListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WdtShopListRequest) Reset() {
	*x = WdtShopListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtShopListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtShopListRequest) ProtoMessage() {}

func (x *WdtShopListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtShopListRequest.ProtoReflect.Descriptor instead.
func (*WdtShopListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{153}
}

type WdtShopListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtShop `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtShopListResponse) Reset() {
	*x = WdtShopListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtShopListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtShopListResponse) ProtoMessage() {}

func (x *WdtShopListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtShopListResponse.ProtoReflect.Descriptor instead.
func (*WdtShopListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{154}
}

func (x *WdtShopListResponse) GetResults() []*WdtShop {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtShopListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type WdtStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockCode      string `protobuf:"bytes,1,opt,name=stock_code,json=stockCode,proto3" json:"stock_code,omitempty"`
	StockName      string `protobuf:"bytes,2,opt,name=stock_name,json=stockName,proto3" json:"stock_name,omitempty"`
	StockType      int32  `protobuf:"varint,3,opt,name=stock_type,json=stockType,proto3" json:"stock_type,omitempty"`
	ExtWarehouseNo string `protobuf:"bytes,4,opt,name=ext_warehouse_no,json=extWarehouseNo,proto3" json:"ext_warehouse_no,omitempty"`
}

func (x *WdtStock) Reset() {
	*x = WdtStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStock) ProtoMessage() {}

func (x *WdtStock) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStock.ProtoReflect.Descriptor instead.
func (*WdtStock) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{155}
}

func (x *WdtStock) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *WdtStock) GetStockName() string {
	if x != nil {
		return x.StockName
	}
	return ""
}

func (x *WdtStock) GetStockType() int32 {
	if x != nil {
		return x.StockType
	}
	return 0
}

func (x *WdtStock) GetExtWarehouseNo() string {
	if x != nil {
		return x.ExtWarehouseNo
	}
	return ""
}

type WdtStockListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WdtStockListRequest) Reset() {
	*x = WdtStockListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockListRequest) ProtoMessage() {}

func (x *WdtStockListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockListRequest.ProtoReflect.Descriptor instead.
func (*WdtStockListRequest) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{156}
}

type WdtStockListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WdtStock `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WdtStockListResponse) Reset() {
	*x = WdtStockListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfid_ito_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WdtStockListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WdtStockListResponse) ProtoMessage() {}

func (x *WdtStockListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rfid_ito_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WdtStockListResponse.ProtoReflect.Descriptor instead.
func (*WdtStockListResponse) Descriptor() ([]byte, []int) {
	return file_rfid_ito_proto_rawDescGZIP(), []int{157}
}

func (x *WdtStockListResponse) GetResults() []*WdtStock {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *WdtStockListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_rfid_ito_proto protoreflect.FileDescriptor

var file_rfid_ito_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb7, 0x08, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x72,
	0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb3, 0x08, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x0f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0xc4, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x05, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x96, 0x05, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xe8,
	0x03, 0x0a, 0x1a, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x74, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x7a, 0x69,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x1b, 0x43, 0x74, 0x6d,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x43, 0x74, 0x6d, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x79,
	0x0a, 0x19, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe2, 0x03, 0x0a, 0x14, 0x43, 0x74,
	0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x63, 0x74, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x8b,
	0x04, 0x0a, 0x15, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x7a, 0x69,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74,
	0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x1c,
	0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x04, 0x0a,
	0x1a, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x63,
	0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74,
	0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x26, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x95, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x77, 0x65, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x23, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53, 0x63,
	0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd0, 0x04, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0xcc, 0x04, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x40, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x04, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x22, 0xcc, 0x05, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22,
	0x3a, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x81, 0x05, 0x0a, 0x26,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22,
	0x99, 0x11, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x1a, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x09, 0x63,
	0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x1d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1e, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x63, 0x74, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x48, 0x20, 0x52, 0x03, 0x63, 0x74,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x21, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x22, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63,
	0x74, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x79, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x93, 0x05, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd7, 0x11, 0x0a, 0x21,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x56, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x14, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x16, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x17, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0b, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x1b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x20, 0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x48, 0x21,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x95, 0x11, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56,
	0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x04, 0x70,
	0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1a, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52,
	0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x1d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x48, 0x20, 0x52, 0x03,
	0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x48, 0x21, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x22, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x63, 0x74, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xfe, 0x15,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c,
	0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x1c, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x74, 0x6d, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x48, 0x20,
	0x52, 0x03, 0x63, 0x74, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x48, 0x21, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x74, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x74, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0b, 0x65, 0x70, 0x63,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x65, 0x70, 0x63, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x63, 0x74, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x2e,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7c,
	0x0a, 0x28, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x1a,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x22,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x43, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xaf, 0x05, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x43, 0x74,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x64, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x64, 0x77, 0x4d, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x77, 0x5f, 0x6d, 0x65, 0x6d,
	0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x43,
	0x74, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2d, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x6b, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b,
	0x65, 0x79, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcb, 0x05, 0x0a,
	0x0e, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x08, 0x63, 0x74, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x63, 0x74, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x64, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x07, 0x64, 0x77, 0x4d, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x77, 0x5f, 0x6d,
	0x65, 0x6d, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x4b, 0x65,
	0x79, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xe4, 0x05, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x64, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x64, 0x77, 0x4d, 0x65, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x77, 0x5f, 0x6d,
	0x65, 0x6d, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x07, 0x0a, 0x16, 0x4b,
	0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x29, 0x0a,
	0x17, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x71, 0x0a, 0x15, 0x4b, 0x65,
	0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x87, 0x08,
	0x0a, 0x11, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a, 0x18, 0x4b, 0x65, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x95, 0x08, 0x0a, 0x16, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x1c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x18,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc2, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x94,
	0x05, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x32, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x44, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xf9, 0x08, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x73, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08,
	0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x6f, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x6d, 0x73, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x6f,
	0x6d, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa2, 0x09, 0x0a, 0x16,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x6f, 0x6d, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x6f, 0x6d,
	0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x6d,
	0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0b, 0x6f, 0x6d, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x13, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6d, 0x73, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0xa1, 0x10, 0x0a, 0x16, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x03, 0x74,
	0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x08, 0x74, 0x61, 0x78, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x09, 0x74,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0a, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x09, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x70, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x19, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x77, 0x61, 0x69, 0x74, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0d, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1d, 0x52, 0x0b, 0x6c, 0x6f,
	0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x1f, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x07, 0x6c, 0x61, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x24, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x25, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x26, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x27, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d, 0x32, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xac, 0x14, 0x0a, 0x14, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0f, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x10, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0e, 0x74, 0x61, 0x78,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x09, 0x77, 0x6d,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x06, 0x66,
	0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52, 0x11,
	0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0b, 0x66, 0x61,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x26, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x06, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2a, 0x52,
	0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x2c, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x31, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x22, 0x87,
	0x15, 0x0a, 0x15, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0f, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x10, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0e, 0x74, 0x61, 0x78,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0c, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0a, 0x77, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x09, 0x77, 0x6d,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x21, 0x52, 0x06, 0x66,
	0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x22, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x48, 0x23, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x24, 0x52, 0x11,
	0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0b, 0x66, 0x61,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x26, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x28, 0x52, 0x06, 0x74, 0x61, 0x78, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2a, 0x52,
	0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2b, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x2c, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x31, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x10, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x31,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6d,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66,
	0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x22, 0x2d, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xc8, 0x05, 0x0a, 0x22, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x05, 0x0a, 0x23,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x03, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x75, 0x0a,
	0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9,
	0x05, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9, 0x05, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2b,
	0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x27, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb3, 0x08, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64,
	0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x73, 0x70, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xab, 0x09, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70,
	0x75, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x53, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x72, 0x66, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xa5, 0x18, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a,
	0x12, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x73, 0x77, 0x61,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4f, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59,
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x11, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1b, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0b, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x24, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x25, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0d, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2e, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x22, 0x6d, 0x0a, 0x13, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x06, 0x0a, 0x16, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0c,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4d, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xe3, 0x18, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x12, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x10, 0x73, 0x77, 0x61, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x14, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x17, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x18, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1a, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x70, 0x61, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x09, 0x63, 0x6f, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x27, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2d, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x22, 0xdd, 0x0c, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x6d, 0x63,
	0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x17, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x18, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x1c, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xae, 0x0d, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6d,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x6d,
	0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x16, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x19, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b,
	0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x1c, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xed, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb7, 0x04, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xa1, 0x18, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x5e, 0x0a, 0x12, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x10, 0x73, 0x77, 0x61, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0b, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0b, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x15, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x19, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0d, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1f, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x22, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64,
	0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x28, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x29, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2a, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52,
	0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x22,
	0x9c, 0x1c, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x12, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x73, 0x77, 0x61, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5a,
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0c, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0b, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x15, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22,
	0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x25, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x28, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x29, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2a, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x2b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x22, 0x28,
	0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x07, 0x0a, 0x16, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a,
	0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd9, 0x07, 0x0a, 0x17,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc4, 0x04, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0a,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x42, 0x75, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x6f,
	0x0a, 0x14, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xa7, 0x04, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x63, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52,
	0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x42, 0x75, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0xe3, 0x0f, 0x0a, 0x1a, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0b,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x18, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45,
	0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x75, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22,
	0x2d, 0x0a, 0x1b, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3,
	0x01, 0x0a, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe0, 0x04, 0x0a, 0x2a, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0xdc, 0x04, 0x0a, 0x26, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x27, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x40, 0x0a, 0x24, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x25, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x04, 0x0a, 0x20, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x22, 0xe8, 0x05, 0x0a, 0x21, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x28, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x91, 0x05, 0x0a, 0x26, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x18, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x79, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x1b,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x54, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x22, 0xe9, 0x11, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x67, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12,
	0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x09, 0x63, 0x6f, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x16, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x18, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x66, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x2e,
	0x0a, 0x1c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc8,
	0x07, 0x0a, 0x29, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x2a, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x27, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x97, 0x01, 0x0a,
	0x28, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xeb, 0x07, 0x0a, 0x24, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x08, 0x63, 0x74, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x2b, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xfd, 0x07, 0x0a, 0x29, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x74, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f,
	0x52, 0x08, 0x63, 0x74, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x6d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x98, 0x10, 0x0a, 0x1a, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x14, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x18, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x51, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x50,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xdf,
	0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x65, 0x70, 0x63, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xe9, 0x0a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x04, 0x6e,
	0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x13, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x05, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0b, 0x61, 0x75, 0x78, 0x55,
	0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x75,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x06, 0x61,
	0x75, 0x78, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6d,
	0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e,
	0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x78, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x75,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x19,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc7, 0x11, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61,
	0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x32, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0c, 0x74, 0x6f, 0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0e, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0d, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x18, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1a, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1c, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x1f, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x0e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x26, 0x52, 0x12, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x31, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x63, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x6d, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74,
	0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x31, 0x22, 0x88, 0x12, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x6f,
	0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x05,
	0x72, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d,
	0x57, 0x6d, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x74, 0x6f, 0x57, 0x6d,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x09, 0x77, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d,
	0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52,
	0x0d, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x11, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x12, 0x52, 0x0d, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x06, 0x66, 0x6c, 0x61,
	0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52,
	0x05, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x1b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1f, 0x52, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x20, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x21, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x22,
	0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x25, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52,
	0x12, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x31, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x32,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6c, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x31, 0x22, 0xe1, 0x18, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a,
	0x12, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x73, 0x77, 0x61,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4f, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59,
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0b, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0b,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0d, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1e, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1f, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x20, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x22, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x23, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x64, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x25, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x26, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x48, 0x27, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x28, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x29, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2a, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2b, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c,
	0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52,
	0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x5f, 0x66,
	0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x22, 0xf9, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfb, 0x05, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x6e, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x05, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x03, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x1b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x1c, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x7b, 0x0a, 0x1a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcd, 0x02, 0x0a,
	0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xf6, 0x02, 0x0a,
	0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x1d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x03, 0x0a, 0x1b, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x22, 0x64, 0x0a, 0x07, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x57, 0x64, 0x74, 0x53, 0x68,
	0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a,
	0x13, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x64, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x67, 0x0a, 0x14, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x57, 0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xed, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x96, 0x3a, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0xac, 0x01, 0x0a, 0x23, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x75,
	0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x23, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x75, 0x6c,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x43,
	0x74, 0x6d, 0x12, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x74,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2d, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9c, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5,
	0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x12, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x74, 0x6d, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b,
	0x65, 0x79, 0x43, 0x74, 0x6d, 0x12, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x43, 0x74, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x2e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x41, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2f, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53, 0x63,
	0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x43, 0x74, 0x6d, 0x12, 0x28, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x43, 0x74, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2b, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2f,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x69, 0x64, 0x12, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x33, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x74, 0x6d,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x33, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa0, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x65,
	0x79, 0x43, 0x74, 0x6d, 0x12, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x43, 0x74, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x74,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x21,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9,
	0x01, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x1f,
	0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x45, 0x70, 0x63, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x64, 0x74, 0x12, 0x29, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64,
	0x74, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x57, 0x64, 0x74, 0x12, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57,
	0x64, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x57, 0x64, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7a, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x64, 0x12, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x54, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x44, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x14, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x31,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x74, 0x6d, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d,
	0x12, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x74, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a,
	0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x40, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0xf4, 0x1f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x38, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x12, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x12, 0x39, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x2e, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2d,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8a, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x36, 0x2e, 0x72, 0x66, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x12, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2d, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x72, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x2f, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x38, 0x2e,
	0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70,
	0x62, 0x72, 0x66, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rfid_ito_proto_rawDescOnce sync.Once
	file_rfid_ito_proto_rawDescData = file_rfid_ito_proto_rawDesc
)

func file_rfid_ito_proto_rawDescGZIP() []byte {
	file_rfid_ito_proto_rawDescOnce.Do(func() {
		file_rfid_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_rfid_ito_proto_rawDescData)
	})
	return file_rfid_ito_proto_rawDescData
}

var file_rfid_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 158)
var file_rfid_ito_proto_goTypes = []interface{}{
	(*BulkCreateGoodsDeliverListRequest)(nil),              // 0: rfid_service.rfid_ito.BulkCreateGoodsDeliverListRequest
	(*BulkCreateGoodsDeliverRequest)(nil),                  // 1: rfid_service.rfid_ito.BulkCreateGoodsDeliverRequest
	(*CreateGoodsDeliverRequest)(nil),                      // 2: rfid_service.rfid_ito.CreateGoodsDeliverRequest
	(*CreateServiceConfRequest)(nil),                       // 3: rfid_service.rfid_ito.CreateServiceConfRequest
	(*CreateServiceConfSolutionRequest)(nil),               // 4: rfid_service.rfid_ito.CreateServiceConfSolutionRequest
	(*CreateServiceConfWarehouseRequest)(nil),              // 5: rfid_service.rfid_ito.CreateServiceConfWarehouseRequest
	(*CreateServiceReasonRequest)(nil),                     // 6: rfid_service.rfid_ito.CreateServiceReasonRequest
	(*CtmVendorAddrCreateRequest)(nil),                     // 7: rfid_service.rfid_ito.CtmVendorAddrCreateRequest
	(*CtmVendorAddrDestroyRequest)(nil),                    // 8: rfid_service.rfid_ito.CtmVendorAddrDestroyRequest
	(*CtmVendorAddrListRequest)(nil),                       // 9: rfid_service.rfid_ito.CtmVendorAddrListRequest
	(*CtmVendorAddrListResponse)(nil),                      // 10: rfid_service.rfid_ito.CtmVendorAddrListResponse
	(*CtmVendorAddrRequest)(nil),                           // 11: rfid_service.rfid_ito.CtmVendorAddrRequest
	(*CtmVendorAddrResponse)(nil),                          // 12: rfid_service.rfid_ito.CtmVendorAddrResponse
	(*CtmVendorAddrRetrieveRequest)(nil),                   // 13: rfid_service.rfid_ito.CtmVendorAddrRetrieveRequest
	(*CtmVendorAddrUpdateRequest)(nil),                     // 14: rfid_service.rfid_ito.CtmVendorAddrUpdateRequest
	(*DeliverNoticeDestroyRequest)(nil),                    // 15: rfid_service.rfid_ito.DeliverNoticeDestroyRequest
	(*DeliverNoticeEpcScanStorageListRequest)(nil),         // 16: rfid_service.rfid_ito.DeliverNoticeEpcScanStorageListRequest
	(*DeliverNoticeEpcScanStorageListResponse)(nil),        // 17: rfid_service.rfid_ito.DeliverNoticeEpcScanStorageListResponse
	(*DeliverNoticeEpcScanStorageRequest)(nil),             // 18: rfid_service.rfid_ito.DeliverNoticeEpcScanStorageRequest
	(*DeliverNoticeEpcScanStorageResponse)(nil),            // 19: rfid_service.rfid_ito.DeliverNoticeEpcScanStorageResponse
	(*DeliverNoticeGoodsDetailsBulkCreateListRequest)(nil), // 20: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsBulkCreateListRequest
	(*DeliverNoticeGoodsDetailsBulkCreateRequest)(nil),     // 21: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsBulkCreateRequest
	(*DeliverNoticeGoodsDetailsCreateRequest)(nil),         // 22: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsCreateRequest
	(*DeliverNoticeGoodsDetailsDestroyRequest)(nil),        // 23: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsDestroyRequest
	(*DeliverNoticeGoodsDetailsListRequest)(nil),           // 24: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsListRequest
	(*DeliverNoticeGoodsDetailsListResponse)(nil),          // 25: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsListResponse
	(*DeliverNoticeGoodsDetailsRequest)(nil),               // 26: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsRequest
	(*DeliverNoticeGoodsDetailsResponse)(nil),              // 27: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsResponse
	(*DeliverNoticeGoodsDetailsRetrieveRequest)(nil),       // 28: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsRetrieveRequest
	(*DeliverNoticeGoodsDetailsUpdateRequest)(nil),         // 29: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsUpdateRequest
	(*DeliverNoticeListRequest)(nil),                       // 30: rfid_service.rfid_ito.DeliverNoticeListRequest
	(*DeliverNoticeListResponse)(nil),                      // 31: rfid_service.rfid_ito.DeliverNoticeListResponse
	(*DeliverNoticeOptionsRequest)(nil),                    // 32: rfid_service.rfid_ito.DeliverNoticeOptionsRequest
	(*DeliverNoticeOptionsResponse)(nil),                   // 33: rfid_service.rfid_ito.DeliverNoticeOptionsResponse
	(*DeliverNoticePartialUpdateRequest)(nil),              // 34: rfid_service.rfid_ito.DeliverNoticePartialUpdateRequest
	(*DeliverNoticeRequest)(nil),                           // 35: rfid_service.rfid_ito.DeliverNoticeRequest
	(*DeliverNoticeResponse)(nil),                          // 36: rfid_service.rfid_ito.DeliverNoticeResponse
	(*DeliverNoticeRetrieveRequest)(nil),                   // 37: rfid_service.rfid_ito.DeliverNoticeRetrieveRequest
	(*DeliverNoticeSupplierTradeProcessRequest)(nil),       // 38: rfid_service.rfid_ito.DeliverNoticeSupplierTradeProcessRequest
	(*DestroyGoodsDeliverRequest)(nil),                     // 39: rfid_service.rfid_ito.DestroyGoodsDeliverRequest
	(*DestroyServiceConfRequest)(nil),                      // 40: rfid_service.rfid_ito.DestroyServiceConfRequest
	(*DestroyServiceConfSolutionRequest)(nil),              // 41: rfid_service.rfid_ito.DestroyServiceConfSolutionRequest
	(*DestroyServiceConfWarehouseRequest)(nil),             // 42: rfid_service.rfid_ito.DestroyServiceConfWarehouseRequest
	(*DestroyServiceReasonRequest)(nil),                    // 43: rfid_service.rfid_ito.DestroyServiceReasonRequest
	(*IntegerChoiceResponse)(nil),                          // 44: rfid_service.rfid_ito.IntegerChoiceResponse
	(*KeyCtmCreateRequest)(nil),                            // 45: rfid_service.rfid_ito.KeyCtmCreateRequest
	(*KeyCtmDestroyRequest)(nil),                           // 46: rfid_service.rfid_ito.KeyCtmDestroyRequest
	(*KeyCtmListRequest)(nil),                              // 47: rfid_service.rfid_ito.KeyCtmListRequest
	(*KeyCtmListResponse)(nil),                             // 48: rfid_service.rfid_ito.KeyCtmListResponse
	(*KeyCtmResponse)(nil),                                 // 49: rfid_service.rfid_ito.KeyCtmResponse
	(*KeyCtmRetrieveRequest)(nil),                          // 50: rfid_service.rfid_ito.KeyCtmRetrieveRequest
	(*KeyCtmUpdateRequest)(nil),                            // 51: rfid_service.rfid_ito.KeyCtmUpdateRequest
	(*KeyVendorCreateRequest)(nil),                         // 52: rfid_service.rfid_ito.KeyVendorCreateRequest
	(*KeyVendorDestroyRequest)(nil),                        // 53: rfid_service.rfid_ito.KeyVendorDestroyRequest
	(*KeyVendorListRequest)(nil),                           // 54: rfid_service.rfid_ito.KeyVendorListRequest
	(*KeyVendorListResponse)(nil),                          // 55: rfid_service.rfid_ito.KeyVendorListResponse
	(*KeyVendorResponse)(nil),                              // 56: rfid_service.rfid_ito.KeyVendorResponse
	(*KeyVendorRetrieveRequest)(nil),                       // 57: rfid_service.rfid_ito.KeyVendorRetrieveRequest
	(*KeyVendorUpdateRequest)(nil),                         // 58: rfid_service.rfid_ito.KeyVendorUpdateRequest
	(*LabelNumberValueListResponse)(nil),                   // 59: rfid_service.rfid_ito.LabelNumberValueListResponse
	(*LabelNumberValueResponse)(nil),                       // 60: rfid_service.rfid_ito.LabelNumberValueResponse
	(*ListGoodsDeliverRequest)(nil),                        // 61: rfid_service.rfid_ito.ListGoodsDeliverRequest
	(*ListServiceConfRequest)(nil),                         // 62: rfid_service.rfid_ito.ListServiceConfRequest
	(*ListServiceConfSolutionRequest)(nil),                 // 63: rfid_service.rfid_ito.ListServiceConfSolutionRequest
	(*ListServiceConfWarehouseRequest)(nil),                // 64: rfid_service.rfid_ito.ListServiceConfWarehouseRequest
	(*ListServiceReasonRequest)(nil),                       // 65: rfid_service.rfid_ito.ListServiceReasonRequest
	(*NoticeNextDidRequest)(nil),                           // 66: rfid_service.rfid_ito.NoticeNextDidRequest
	(*NoticeNextDidResponse)(nil),                          // 67: rfid_service.rfid_ito.NoticeNextDidResponse
	(*NoticeStatusCountListResponse)(nil),                  // 68: rfid_service.rfid_ito.NoticeStatusCountListResponse
	(*NoticeStatusCountRequest)(nil),                       // 69: rfid_service.rfid_ito.NoticeStatusCountRequest
	(*NoticeStatusCountResponse)(nil),                      // 70: rfid_service.rfid_ito.NoticeStatusCountResponse
	(*ObjectComplainRequest)(nil),                          // 71: rfid_service.rfid_ito.ObjectComplainRequest
	(*ObjectComplainResponse)(nil),                         // 72: rfid_service.rfid_ito.ObjectComplainResponse
	(*PurchaseDetailResponse)(nil),                         // 73: rfid_service.rfid_ito.PurchaseDetailResponse
	(*PurchaseOrderListResponse)(nil),                      // 74: rfid_service.rfid_ito.PurchaseOrderListResponse
	(*PurchaseOrderRequest)(nil),                           // 75: rfid_service.rfid_ito.PurchaseOrderRequest
	(*PurchaseOrderResponse)(nil),                          // 76: rfid_service.rfid_ito.PurchaseOrderResponse
	(*RetrieveGoodsDeliverRequest)(nil),                    // 77: rfid_service.rfid_ito.RetrieveGoodsDeliverRequest
	(*RetrieveServiceConfRequest)(nil),                     // 78: rfid_service.rfid_ito.RetrieveServiceConfRequest
	(*RetrieveServiceConfSolutionRequest)(nil),             // 79: rfid_service.rfid_ito.RetrieveServiceConfSolutionRequest
	(*RetrieveServiceConfWarehouseRequest)(nil),            // 80: rfid_service.rfid_ito.RetrieveServiceConfWarehouseRequest
	(*RetrieveServiceReasonRequest)(nil),                   // 81: rfid_service.rfid_ito.RetrieveServiceReasonRequest
	(*ServiceConfListResponse)(nil),                        // 82: rfid_service.rfid_ito.ServiceConfListResponse
	(*ServiceConfResponse)(nil),                            // 83: rfid_service.rfid_ito.ServiceConfResponse
	(*ServiceConfSolutionListResponse)(nil),                // 84: rfid_service.rfid_ito.ServiceConfSolutionListResponse
	(*ServiceConfSolutionResponse)(nil),                    // 85: rfid_service.rfid_ito.ServiceConfSolutionResponse
	(*ServiceConfWarehouseListResponse)(nil),               // 86: rfid_service.rfid_ito.ServiceConfWarehouseListResponse
	(*ServiceConfWarehouseResponse)(nil),                   // 87: rfid_service.rfid_ito.ServiceConfWarehouseResponse
	(*ServiceDestroyRequest)(nil),                          // 88: rfid_service.rfid_ito.ServiceDestroyRequest
	(*ServiceGoodsDetailListResponse)(nil),                 // 89: rfid_service.rfid_ito.ServiceGoodsDetailListResponse
	(*ServiceGoodsDetailRequest)(nil),                      // 90: rfid_service.rfid_ito.ServiceGoodsDetailRequest
	(*ServiceGoodsDetailResponse)(nil),                     // 91: rfid_service.rfid_ito.ServiceGoodsDetailResponse
	(*ServiceListRequest)(nil),                             // 92: rfid_service.rfid_ito.ServiceListRequest
	(*ServiceListResponse)(nil),                            // 93: rfid_service.rfid_ito.ServiceListResponse
	(*ServiceOptionsResponse)(nil),                         // 94: rfid_service.rfid_ito.ServiceOptionsResponse
	(*ServicePartialUpdateRequest)(nil),                    // 95: rfid_service.rfid_ito.ServicePartialUpdateRequest
	(*ServicePayDetailRequest)(nil),                        // 96: rfid_service.rfid_ito.ServicePayDetailRequest
	(*ServicePayDetailResponse)(nil),                       // 97: rfid_service.rfid_ito.ServicePayDetailResponse
	(*ServiceReasonChildrenResponse)(nil),                  // 98: rfid_service.rfid_ito.ServiceReasonChildrenResponse
	(*ServiceReasonListResponse)(nil),                      // 99: rfid_service.rfid_ito.ServiceReasonListResponse
	(*ServiceReasonResponse)(nil),                          // 100: rfid_service.rfid_ito.ServiceReasonResponse
	(*ServiceRequest)(nil),                                 // 101: rfid_service.rfid_ito.ServiceRequest
	(*ServiceResponse)(nil),                                // 102: rfid_service.rfid_ito.ServiceResponse
	(*ServiceRetrieveRequest)(nil),                         // 103: rfid_service.rfid_ito.ServiceRetrieveRequest
	(*ServiceStockOutRequest)(nil),                         // 104: rfid_service.rfid_ito.ServiceStockOutRequest
	(*ServiceStockOutResponse)(nil),                        // 105: rfid_service.rfid_ito.ServiceStockOutResponse
	(*ShopInfoListRequest)(nil),                            // 106: rfid_service.rfid_ito.ShopInfoListRequest
	(*ShopInfoListResponse)(nil),                           // 107: rfid_service.rfid_ito.ShopInfoListResponse
	(*ShopInfoResponse)(nil),                               // 108: rfid_service.rfid_ito.ShopInfoResponse
	(*SupplierTradeCreateRequest)(nil),                     // 109: rfid_service.rfid_ito.SupplierTradeCreateRequest
	(*SupplierTradeDestroyRequest)(nil),                    // 110: rfid_service.rfid_ito.SupplierTradeDestroyRequest
	(*SupplierTradeGoodsDetailsBulkCreateListRequest)(nil), // 111: rfid_service.rfid_ito.SupplierTradeGoodsDetailsBulkCreateListRequest
	(*SupplierTradeGoodsDetailsBulkCreateRequest)(nil),     // 112: rfid_service.rfid_ito.SupplierTradeGoodsDetailsBulkCreateRequest
	(*SupplierTradeGoodsDetailsCreateRequest)(nil),         // 113: rfid_service.rfid_ito.SupplierTradeGoodsDetailsCreateRequest
	(*SupplierTradeGoodsDetailsDestroyRequest)(nil),        // 114: rfid_service.rfid_ito.SupplierTradeGoodsDetailsDestroyRequest
	(*SupplierTradeGoodsDetailsListRequest)(nil),           // 115: rfid_service.rfid_ito.SupplierTradeGoodsDetailsListRequest
	(*SupplierTradeGoodsDetailsListResponse)(nil),          // 116: rfid_service.rfid_ito.SupplierTradeGoodsDetailsListResponse
	(*SupplierTradeGoodsDetailsRequest)(nil),               // 117: rfid_service.rfid_ito.SupplierTradeGoodsDetailsRequest
	(*SupplierTradeGoodsDetailsResponse)(nil),              // 118: rfid_service.rfid_ito.SupplierTradeGoodsDetailsResponse
	(*SupplierTradeGoodsDetailsRetrieveRequest)(nil),       // 119: rfid_service.rfid_ito.SupplierTradeGoodsDetailsRetrieveRequest
	(*SupplierTradeGoodsDetailsUpdateRequest)(nil),         // 120: rfid_service.rfid_ito.SupplierTradeGoodsDetailsUpdateRequest
	(*SupplierTradeListRequest)(nil),                       // 121: rfid_service.rfid_ito.SupplierTradeListRequest
	(*SupplierTradeListResponse)(nil),                      // 122: rfid_service.rfid_ito.SupplierTradeListResponse
	(*SupplierTradeNextTidRequest)(nil),                    // 123: rfid_service.rfid_ito.SupplierTradeNextTidRequest
	(*SupplierTradeResponse)(nil),                          // 124: rfid_service.rfid_ito.SupplierTradeResponse
	(*SupplierTradeRetrieveRequest)(nil),                   // 125: rfid_service.rfid_ito.SupplierTradeRetrieveRequest
	(*SupplierTradeStockOutDetailsCreateRequest)(nil),      // 126: rfid_service.rfid_ito.SupplierTradeStockOutDetailsCreateRequest
	(*SupplierTradeStockOutDetailsDestroyRequest)(nil),     // 127: rfid_service.rfid_ito.SupplierTradeStockOutDetailsDestroyRequest
	(*SupplierTradeStockOutDetailsListRequest)(nil),        // 128: rfid_service.rfid_ito.SupplierTradeStockOutDetailsListRequest
	(*SupplierTradeStockOutDetailsListResponse)(nil),       // 129: rfid_service.rfid_ito.SupplierTradeStockOutDetailsListResponse
	(*SupplierTradeStockOutDetailsResponse)(nil),           // 130: rfid_service.rfid_ito.SupplierTradeStockOutDetailsResponse
	(*SupplierTradeStockOutDetailsRetrieveRequest)(nil),    // 131: rfid_service.rfid_ito.SupplierTradeStockOutDetailsRetrieveRequest
	(*SupplierTradeStockOutDetailsUpdateRequest)(nil),      // 132: rfid_service.rfid_ito.SupplierTradeStockOutDetailsUpdateRequest
	(*SupplierTradeUpdateRequest)(nil),                     // 133: rfid_service.rfid_ito.SupplierTradeUpdateRequest
	(*TradeGoodsEpcRequest)(nil),                           // 134: rfid_service.rfid_ito.TradeGoodsEpcRequest
	(*TransferDetailResponse)(nil),                         // 135: rfid_service.rfid_ito.TransferDetailResponse
	(*TransferOrderListResponse)(nil),                      // 136: rfid_service.rfid_ito.TransferOrderListResponse
	(*TransferOrderRequest)(nil),                           // 137: rfid_service.rfid_ito.TransferOrderRequest
	(*TransferOrderResponse)(nil),                          // 138: rfid_service.rfid_ito.TransferOrderResponse
	(*UpdateGoodsDeliverRequest)(nil),                      // 139: rfid_service.rfid_ito.UpdateGoodsDeliverRequest
	(*UpdateServiceConfRequest)(nil),                       // 140: rfid_service.rfid_ito.UpdateServiceConfRequest
	(*UpdateServiceConfSolutionRequest)(nil),               // 141: rfid_service.rfid_ito.UpdateServiceConfSolutionRequest
	(*UpdateServiceConfWarehouseRequest)(nil),              // 142: rfid_service.rfid_ito.UpdateServiceConfWarehouseRequest
	(*UpdateServiceReasonRequest)(nil),                     // 143: rfid_service.rfid_ito.UpdateServiceReasonRequest
	(*VendorOperatorCreateRequest)(nil),                    // 144: rfid_service.rfid_ito.VendorOperatorCreateRequest
	(*VendorOperatorDestroyRequest)(nil),                   // 145: rfid_service.rfid_ito.VendorOperatorDestroyRequest
	(*VendorOperatorListRequest)(nil),                      // 146: rfid_service.rfid_ito.VendorOperatorListRequest
	(*VendorOperatorListResponse)(nil),                     // 147: rfid_service.rfid_ito.VendorOperatorListResponse
	(*VendorOperatorRequest)(nil),                          // 148: rfid_service.rfid_ito.VendorOperatorRequest
	(*VendorOperatorResponse)(nil),                         // 149: rfid_service.rfid_ito.VendorOperatorResponse
	(*VendorOperatorRetrieveRequest)(nil),                  // 150: rfid_service.rfid_ito.VendorOperatorRetrieveRequest
	(*VendorOperatorUpdateRequest)(nil),                    // 151: rfid_service.rfid_ito.VendorOperatorUpdateRequest
	(*WdtShop)(nil),                                        // 152: rfid_service.rfid_ito.WdtShop
	(*WdtShopListRequest)(nil),                             // 153: rfid_service.rfid_ito.WdtShopListRequest
	(*WdtShopListResponse)(nil),                            // 154: rfid_service.rfid_ito.WdtShopListResponse
	(*WdtStock)(nil),                                       // 155: rfid_service.rfid_ito.WdtStock
	(*WdtStockListRequest)(nil),                            // 156: rfid_service.rfid_ito.WdtStockListRequest
	(*WdtStockListResponse)(nil),                           // 157: rfid_service.rfid_ito.WdtStockListResponse
	(*emptypb.Empty)(nil),                                  // 158: google.protobuf.Empty
}
var file_rfid_ito_proto_depIdxs = []int32{
	1,   // 0: rfid_service.rfid_ito.BulkCreateGoodsDeliverListRequest.results:type_name -> rfid_service.rfid_ito.BulkCreateGoodsDeliverRequest
	12,  // 1: rfid_service.rfid_ito.CtmVendorAddrListResponse.results:type_name -> rfid_service.rfid_ito.CtmVendorAddrResponse
	19,  // 2: rfid_service.rfid_ito.DeliverNoticeEpcScanStorageListResponse.results:type_name -> rfid_service.rfid_ito.DeliverNoticeEpcScanStorageResponse
	21,  // 3: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsBulkCreateListRequest.results:type_name -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsBulkCreateRequest
	27,  // 4: rfid_service.rfid_ito.DeliverNoticeGoodsDetailsListResponse.results:type_name -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsResponse
	26,  // 5: rfid_service.rfid_ito.DeliverNoticeListRequest.goods_list:type_name -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsRequest
	36,  // 6: rfid_service.rfid_ito.DeliverNoticeListResponse.results:type_name -> rfid_service.rfid_ito.DeliverNoticeResponse
	44,  // 7: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.trade_type:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	44,  // 8: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.create_type:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	44,  // 9: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.notice_type:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	44,  // 10: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.type:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	44,  // 11: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.notice_status:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	44,  // 12: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.pay_status:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	44,  // 13: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.delivery_term:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	44,  // 14: rfid_service.rfid_ito.DeliverNoticeOptionsResponse.invoice_status:type_name -> rfid_service.rfid_ito.IntegerChoiceResponse
	26,  // 15: rfid_service.rfid_ito.DeliverNoticePartialUpdateRequest.goods_list:type_name -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsRequest
	26,  // 16: rfid_service.rfid_ito.DeliverNoticeRequest.goods_list:type_name -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsRequest
	27,  // 17: rfid_service.rfid_ito.DeliverNoticeResponse.goods_details:type_name -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsResponse
	124, // 18: rfid_service.rfid_ito.DeliverNoticeResponse.trade_details:type_name -> rfid_service.rfid_ito.SupplierTradeResponse
	19,  // 19: rfid_service.rfid_ito.DeliverNoticeResponse.epc_storage:type_name -> rfid_service.rfid_ito.DeliverNoticeEpcScanStorageResponse
	11,  // 20: rfid_service.rfid_ito.KeyCtmCreateRequest.address_list:type_name -> rfid_service.rfid_ito.CtmVendorAddrRequest
	49,  // 21: rfid_service.rfid_ito.KeyCtmListResponse.results:type_name -> rfid_service.rfid_ito.KeyCtmResponse
	12,  // 22: rfid_service.rfid_ito.KeyCtmResponse.ctm_addr:type_name -> rfid_service.rfid_ito.CtmVendorAddrResponse
	11,  // 23: rfid_service.rfid_ito.KeyCtmUpdateRequest.address_list:type_name -> rfid_service.rfid_ito.CtmVendorAddrRequest
	11,  // 24: rfid_service.rfid_ito.KeyVendorCreateRequest.address_list:type_name -> rfid_service.rfid_ito.CtmVendorAddrRequest
	148, // 25: rfid_service.rfid_ito.KeyVendorCreateRequest.operator_list:type_name -> rfid_service.rfid_ito.VendorOperatorRequest
	56,  // 26: rfid_service.rfid_ito.KeyVendorListResponse.results:type_name -> rfid_service.rfid_ito.KeyVendorResponse
	12,  // 27: rfid_service.rfid_ito.KeyVendorResponse.vendor_addr:type_name -> rfid_service.rfid_ito.CtmVendorAddrResponse
	149, // 28: rfid_service.rfid_ito.KeyVendorResponse.vendor_operator:type_name -> rfid_service.rfid_ito.VendorOperatorResponse
	11,  // 29: rfid_service.rfid_ito.KeyVendorUpdateRequest.address_list:type_name -> rfid_service.rfid_ito.CtmVendorAddrRequest
	148, // 30: rfid_service.rfid_ito.KeyVendorUpdateRequest.operator_list:type_name -> rfid_service.rfid_ito.VendorOperatorRequest
	60,  // 31: rfid_service.rfid_ito.LabelNumberValueListResponse.results:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	70,  // 32: rfid_service.rfid_ito.NoticeStatusCountListResponse.results:type_name -> rfid_service.rfid_ito.NoticeStatusCountResponse
	76,  // 33: rfid_service.rfid_ito.PurchaseOrderListResponse.results:type_name -> rfid_service.rfid_ito.PurchaseOrderResponse
	73,  // 34: rfid_service.rfid_ito.PurchaseOrderResponse.purchase_details:type_name -> rfid_service.rfid_ito.PurchaseDetailResponse
	83,  // 35: rfid_service.rfid_ito.ServiceConfListResponse.results:type_name -> rfid_service.rfid_ito.ServiceConfResponse
	87,  // 36: rfid_service.rfid_ito.ServiceConfResponse.warehouse:type_name -> rfid_service.rfid_ito.ServiceConfWarehouseResponse
	85,  // 37: rfid_service.rfid_ito.ServiceConfSolutionListResponse.results:type_name -> rfid_service.rfid_ito.ServiceConfSolutionResponse
	87,  // 38: rfid_service.rfid_ito.ServiceConfWarehouseListResponse.results:type_name -> rfid_service.rfid_ito.ServiceConfWarehouseResponse
	91,  // 39: rfid_service.rfid_ito.ServiceGoodsDetailListResponse.results:type_name -> rfid_service.rfid_ito.ServiceGoodsDetailResponse
	71,  // 40: rfid_service.rfid_ito.ServiceListRequest.complain_content:type_name -> rfid_service.rfid_ito.ObjectComplainRequest
	90,  // 41: rfid_service.rfid_ito.ServiceListRequest.swap_goods_details:type_name -> rfid_service.rfid_ito.ServiceGoodsDetailRequest
	96,  // 42: rfid_service.rfid_ito.ServiceListRequest.pay_details:type_name -> rfid_service.rfid_ito.ServicePayDetailRequest
	104, // 43: rfid_service.rfid_ito.ServiceListRequest.stock_out_details:type_name -> rfid_service.rfid_ito.ServiceStockOutRequest
	102, // 44: rfid_service.rfid_ito.ServiceListResponse.results:type_name -> rfid_service.rfid_ito.ServiceResponse
	60,  // 45: rfid_service.rfid_ito.ServiceOptionsResponse.trade_type:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 46: rfid_service.rfid_ito.ServiceOptionsResponse.type:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 47: rfid_service.rfid_ito.ServiceOptionsResponse.create_type:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 48: rfid_service.rfid_ito.ServiceOptionsResponse.service_status:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 49: rfid_service.rfid_ito.ServiceOptionsResponse.trade_status:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 50: rfid_service.rfid_ito.ServiceOptionsResponse.pay_status:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 51: rfid_service.rfid_ito.ServiceOptionsResponse.reason_type:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 52: rfid_service.rfid_ito.ServiceOptionsResponse.record_type:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 53: rfid_service.rfid_ito.ServiceOptionsResponse.buyer_source:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	60,  // 54: rfid_service.rfid_ito.ServiceOptionsResponse.judgement:type_name -> rfid_service.rfid_ito.LabelNumberValueResponse
	71,  // 55: rfid_service.rfid_ito.ServicePartialUpdateRequest.complain_content:type_name -> rfid_service.rfid_ito.ObjectComplainRequest
	90,  // 56: rfid_service.rfid_ito.ServicePartialUpdateRequest.swap_goods_details:type_name -> rfid_service.rfid_ito.ServiceGoodsDetailRequest
	96,  // 57: rfid_service.rfid_ito.ServicePartialUpdateRequest.pay_details:type_name -> rfid_service.rfid_ito.ServicePayDetailRequest
	104, // 58: rfid_service.rfid_ito.ServicePartialUpdateRequest.stock_out_details:type_name -> rfid_service.rfid_ito.ServiceStockOutRequest
	100, // 59: rfid_service.rfid_ito.ServiceReasonListResponse.results:type_name -> rfid_service.rfid_ito.ServiceReasonResponse
	98,  // 60: rfid_service.rfid_ito.ServiceReasonResponse.children:type_name -> rfid_service.rfid_ito.ServiceReasonChildrenResponse
	71,  // 61: rfid_service.rfid_ito.ServiceRequest.complain_content:type_name -> rfid_service.rfid_ito.ObjectComplainRequest
	90,  // 62: rfid_service.rfid_ito.ServiceRequest.swap_goods_details:type_name -> rfid_service.rfid_ito.ServiceGoodsDetailRequest
	96,  // 63: rfid_service.rfid_ito.ServiceRequest.pay_details:type_name -> rfid_service.rfid_ito.ServicePayDetailRequest
	104, // 64: rfid_service.rfid_ito.ServiceRequest.stock_out_details:type_name -> rfid_service.rfid_ito.ServiceStockOutRequest
	72,  // 65: rfid_service.rfid_ito.ServiceResponse.complain_content:type_name -> rfid_service.rfid_ito.ObjectComplainResponse
	91,  // 66: rfid_service.rfid_ito.ServiceResponse.swap_goods_details:type_name -> rfid_service.rfid_ito.ServiceGoodsDetailResponse
	97,  // 67: rfid_service.rfid_ito.ServiceResponse.pay_details:type_name -> rfid_service.rfid_ito.ServicePayDetailResponse
	105, // 68: rfid_service.rfid_ito.ServiceResponse.stock_out_details:type_name -> rfid_service.rfid_ito.ServiceStockOutResponse
	108, // 69: rfid_service.rfid_ito.ShopInfoListResponse.results:type_name -> rfid_service.rfid_ito.ShopInfoResponse
	117, // 70: rfid_service.rfid_ito.SupplierTradeCreateRequest.goods_list:type_name -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsRequest
	134, // 71: rfid_service.rfid_ito.SupplierTradeCreateRequest.stock_in_data:type_name -> rfid_service.rfid_ito.TradeGoodsEpcRequest
	134, // 72: rfid_service.rfid_ito.SupplierTradeCreateRequest.stock_out_data:type_name -> rfid_service.rfid_ito.TradeGoodsEpcRequest
	112, // 73: rfid_service.rfid_ito.SupplierTradeGoodsDetailsBulkCreateListRequest.results:type_name -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsBulkCreateRequest
	118, // 74: rfid_service.rfid_ito.SupplierTradeGoodsDetailsListResponse.results:type_name -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsResponse
	124, // 75: rfid_service.rfid_ito.SupplierTradeListResponse.results:type_name -> rfid_service.rfid_ito.SupplierTradeResponse
	118, // 76: rfid_service.rfid_ito.SupplierTradeResponse.goods_details:type_name -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsResponse
	130, // 77: rfid_service.rfid_ito.SupplierTradeResponse.stock_out_details:type_name -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsResponse
	130, // 78: rfid_service.rfid_ito.SupplierTradeStockOutDetailsListResponse.results:type_name -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsResponse
	117, // 79: rfid_service.rfid_ito.SupplierTradeUpdateRequest.goods_list:type_name -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsRequest
	134, // 80: rfid_service.rfid_ito.SupplierTradeUpdateRequest.stock_in_data:type_name -> rfid_service.rfid_ito.TradeGoodsEpcRequest
	134, // 81: rfid_service.rfid_ito.SupplierTradeUpdateRequest.stock_out_data:type_name -> rfid_service.rfid_ito.TradeGoodsEpcRequest
	138, // 82: rfid_service.rfid_ito.TransferOrderListResponse.results:type_name -> rfid_service.rfid_ito.TransferOrderResponse
	135, // 83: rfid_service.rfid_ito.TransferOrderResponse.transfer_details:type_name -> rfid_service.rfid_ito.TransferDetailResponse
	71,  // 84: rfid_service.rfid_ito.UpdateGoodsDeliverRequest.complain_content:type_name -> rfid_service.rfid_ito.ObjectComplainRequest
	90,  // 85: rfid_service.rfid_ito.UpdateGoodsDeliverRequest.swap_goods_details:type_name -> rfid_service.rfid_ito.ServiceGoodsDetailRequest
	96,  // 86: rfid_service.rfid_ito.UpdateGoodsDeliverRequest.pay_details:type_name -> rfid_service.rfid_ito.ServicePayDetailRequest
	104, // 87: rfid_service.rfid_ito.UpdateGoodsDeliverRequest.stock_out_details:type_name -> rfid_service.rfid_ito.ServiceStockOutRequest
	149, // 88: rfid_service.rfid_ito.VendorOperatorListResponse.results:type_name -> rfid_service.rfid_ito.VendorOperatorResponse
	152, // 89: rfid_service.rfid_ito.WdtShopListResponse.results:type_name -> rfid_service.rfid_ito.WdtShop
	155, // 90: rfid_service.rfid_ito.WdtStockListResponse.results:type_name -> rfid_service.rfid_ito.WdtStock
	106, // 91: rfid_service.rfid_ito.DatastoreItoController.List:input_type -> rfid_service.rfid_ito.ShopInfoListRequest
	137, // 92: rfid_service.rfid_ito.DatastoreItoController.TransferOrder:input_type -> rfid_service.rfid_ito.TransferOrderRequest
	20,  // 93: rfid_service.rfid_ito.DeliverNoticeController.BulkCreateDeliverNoticeGoodsDetails:input_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsBulkCreateListRequest
	111, // 94: rfid_service.rfid_ito.DeliverNoticeController.BulkCreateSupplierTradeGoodsDetails:input_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsBulkCreateListRequest
	35,  // 95: rfid_service.rfid_ito.DeliverNoticeController.Create:input_type -> rfid_service.rfid_ito.DeliverNoticeRequest
	7,   // 96: rfid_service.rfid_ito.DeliverNoticeController.CreateCtmVendorAddr:input_type -> rfid_service.rfid_ito.CtmVendorAddrCreateRequest
	22,  // 97: rfid_service.rfid_ito.DeliverNoticeController.CreateDeliverNoticeGoodsDetails:input_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsCreateRequest
	45,  // 98: rfid_service.rfid_ito.DeliverNoticeController.CreateKeyCtm:input_type -> rfid_service.rfid_ito.KeyCtmCreateRequest
	52,  // 99: rfid_service.rfid_ito.DeliverNoticeController.CreateKeyVendor:input_type -> rfid_service.rfid_ito.KeyVendorCreateRequest
	109, // 100: rfid_service.rfid_ito.DeliverNoticeController.CreateSupplierTrade:input_type -> rfid_service.rfid_ito.SupplierTradeCreateRequest
	113, // 101: rfid_service.rfid_ito.DeliverNoticeController.CreateSupplierTradeGoodsDetails:input_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsCreateRequest
	126, // 102: rfid_service.rfid_ito.DeliverNoticeController.CreateSupplierTradeStockOutDetails:input_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsCreateRequest
	144, // 103: rfid_service.rfid_ito.DeliverNoticeController.CreateVendorOperator:input_type -> rfid_service.rfid_ito.VendorOperatorCreateRequest
	32,  // 104: rfid_service.rfid_ito.DeliverNoticeController.DeliverNoticeOptions:input_type -> rfid_service.rfid_ito.DeliverNoticeOptionsRequest
	15,  // 105: rfid_service.rfid_ito.DeliverNoticeController.Destroy:input_type -> rfid_service.rfid_ito.DeliverNoticeDestroyRequest
	8,   // 106: rfid_service.rfid_ito.DeliverNoticeController.DestroyCtmVendorAddr:input_type -> rfid_service.rfid_ito.CtmVendorAddrDestroyRequest
	23,  // 107: rfid_service.rfid_ito.DeliverNoticeController.DestroyDeliverNoticeGoodsDetails:input_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsDestroyRequest
	46,  // 108: rfid_service.rfid_ito.DeliverNoticeController.DestroyKeyCtm:input_type -> rfid_service.rfid_ito.KeyCtmDestroyRequest
	53,  // 109: rfid_service.rfid_ito.DeliverNoticeController.DestroyKeyVendor:input_type -> rfid_service.rfid_ito.KeyVendorDestroyRequest
	110, // 110: rfid_service.rfid_ito.DeliverNoticeController.DestroySupplierTrade:input_type -> rfid_service.rfid_ito.SupplierTradeDestroyRequest
	114, // 111: rfid_service.rfid_ito.DeliverNoticeController.DestroySupplierTradeGoodsDetails:input_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsDestroyRequest
	127, // 112: rfid_service.rfid_ito.DeliverNoticeController.DestroySupplierTradeStockOutDetails:input_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsDestroyRequest
	145, // 113: rfid_service.rfid_ito.DeliverNoticeController.DestroyVendorOperator:input_type -> rfid_service.rfid_ito.VendorOperatorDestroyRequest
	30,  // 114: rfid_service.rfid_ito.DeliverNoticeController.List:input_type -> rfid_service.rfid_ito.DeliverNoticeListRequest
	9,   // 115: rfid_service.rfid_ito.DeliverNoticeController.ListCtmVendorAddr:input_type -> rfid_service.rfid_ito.CtmVendorAddrListRequest
	16,  // 116: rfid_service.rfid_ito.DeliverNoticeController.ListDeliverNoticeEpcScanStorage:input_type -> rfid_service.rfid_ito.DeliverNoticeEpcScanStorageListRequest
	24,  // 117: rfid_service.rfid_ito.DeliverNoticeController.ListDeliverNoticeGoodsDetails:input_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsListRequest
	47,  // 118: rfid_service.rfid_ito.DeliverNoticeController.ListKeyCtm:input_type -> rfid_service.rfid_ito.KeyCtmListRequest
	54,  // 119: rfid_service.rfid_ito.DeliverNoticeController.ListKeyVendor:input_type -> rfid_service.rfid_ito.KeyVendorListRequest
	121, // 120: rfid_service.rfid_ito.DeliverNoticeController.ListSupplierTrade:input_type -> rfid_service.rfid_ito.SupplierTradeListRequest
	115, // 121: rfid_service.rfid_ito.DeliverNoticeController.ListSupplierTradeGoodsDetails:input_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsListRequest
	128, // 122: rfid_service.rfid_ito.DeliverNoticeController.ListSupplierTradeStockOutDetails:input_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsListRequest
	146, // 123: rfid_service.rfid_ito.DeliverNoticeController.ListVendorOperator:input_type -> rfid_service.rfid_ito.VendorOperatorListRequest
	66,  // 124: rfid_service.rfid_ito.DeliverNoticeController.NoticeNextDid:input_type -> rfid_service.rfid_ito.NoticeNextDidRequest
	69,  // 125: rfid_service.rfid_ito.DeliverNoticeController.NoticeStatusCount:input_type -> rfid_service.rfid_ito.NoticeStatusCountRequest
	34,  // 126: rfid_service.rfid_ito.DeliverNoticeController.PartialUpdate:input_type -> rfid_service.rfid_ito.DeliverNoticePartialUpdateRequest
	75,  // 127: rfid_service.rfid_ito.DeliverNoticeController.PurchaseOrder:input_type -> rfid_service.rfid_ito.PurchaseOrderRequest
	37,  // 128: rfid_service.rfid_ito.DeliverNoticeController.Retrieve:input_type -> rfid_service.rfid_ito.DeliverNoticeRetrieveRequest
	13,  // 129: rfid_service.rfid_ito.DeliverNoticeController.RetrieveCtmVendorAddr:input_type -> rfid_service.rfid_ito.CtmVendorAddrRetrieveRequest
	28,  // 130: rfid_service.rfid_ito.DeliverNoticeController.RetrieveDeliverNoticeGoodsDetails:input_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsRetrieveRequest
	50,  // 131: rfid_service.rfid_ito.DeliverNoticeController.RetrieveKeyCtm:input_type -> rfid_service.rfid_ito.KeyCtmRetrieveRequest
	57,  // 132: rfid_service.rfid_ito.DeliverNoticeController.RetrieveKeyVendor:input_type -> rfid_service.rfid_ito.KeyVendorRetrieveRequest
	125, // 133: rfid_service.rfid_ito.DeliverNoticeController.RetrieveSupplierTrade:input_type -> rfid_service.rfid_ito.SupplierTradeRetrieveRequest
	119, // 134: rfid_service.rfid_ito.DeliverNoticeController.RetrieveSupplierTradeGoodsDetails:input_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsRetrieveRequest
	131, // 135: rfid_service.rfid_ito.DeliverNoticeController.RetrieveSupplierTradeStockOutDetails:input_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsRetrieveRequest
	150, // 136: rfid_service.rfid_ito.DeliverNoticeController.RetrieveVendorOperator:input_type -> rfid_service.rfid_ito.VendorOperatorRetrieveRequest
	18,  // 137: rfid_service.rfid_ito.DeliverNoticeController.SaveDeliverNoticeEpcScanStorage:input_type -> rfid_service.rfid_ito.DeliverNoticeEpcScanStorageRequest
	153, // 138: rfid_service.rfid_ito.DeliverNoticeController.ShopOptionsWdt:input_type -> rfid_service.rfid_ito.WdtShopListRequest
	156, // 139: rfid_service.rfid_ito.DeliverNoticeController.StockOptionsWdt:input_type -> rfid_service.rfid_ito.WdtStockListRequest
	123, // 140: rfid_service.rfid_ito.DeliverNoticeController.SupplierTradeNextTid:input_type -> rfid_service.rfid_ito.SupplierTradeNextTidRequest
	38,  // 141: rfid_service.rfid_ito.DeliverNoticeController.SupplierTradeProcess:input_type -> rfid_service.rfid_ito.DeliverNoticeSupplierTradeProcessRequest
	35,  // 142: rfid_service.rfid_ito.DeliverNoticeController.Update:input_type -> rfid_service.rfid_ito.DeliverNoticeRequest
	14,  // 143: rfid_service.rfid_ito.DeliverNoticeController.UpdateCtmVendorAddr:input_type -> rfid_service.rfid_ito.CtmVendorAddrUpdateRequest
	29,  // 144: rfid_service.rfid_ito.DeliverNoticeController.UpdateDeliverNoticeGoodsDetails:input_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsUpdateRequest
	51,  // 145: rfid_service.rfid_ito.DeliverNoticeController.UpdateKeyCtm:input_type -> rfid_service.rfid_ito.KeyCtmUpdateRequest
	58,  // 146: rfid_service.rfid_ito.DeliverNoticeController.UpdateKeyVendor:input_type -> rfid_service.rfid_ito.KeyVendorUpdateRequest
	133, // 147: rfid_service.rfid_ito.DeliverNoticeController.UpdateSupplierTrade:input_type -> rfid_service.rfid_ito.SupplierTradeUpdateRequest
	120, // 148: rfid_service.rfid_ito.DeliverNoticeController.UpdateSupplierTradeGoodsDetails:input_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsUpdateRequest
	132, // 149: rfid_service.rfid_ito.DeliverNoticeController.UpdateSupplierTradeStockOutDetails:input_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsUpdateRequest
	151, // 150: rfid_service.rfid_ito.DeliverNoticeController.UpdateVendorOperator:input_type -> rfid_service.rfid_ito.VendorOperatorUpdateRequest
	0,   // 151: rfid_service.rfid_ito.ServiceController.BulkCreateGoodsDeliver:input_type -> rfid_service.rfid_ito.BulkCreateGoodsDeliverListRequest
	101, // 152: rfid_service.rfid_ito.ServiceController.Create:input_type -> rfid_service.rfid_ito.ServiceRequest
	2,   // 153: rfid_service.rfid_ito.ServiceController.CreateGoodsDeliver:input_type -> rfid_service.rfid_ito.CreateGoodsDeliverRequest
	3,   // 154: rfid_service.rfid_ito.ServiceController.CreateServiceConf:input_type -> rfid_service.rfid_ito.CreateServiceConfRequest
	4,   // 155: rfid_service.rfid_ito.ServiceController.CreateServiceConfSolution:input_type -> rfid_service.rfid_ito.CreateServiceConfSolutionRequest
	5,   // 156: rfid_service.rfid_ito.ServiceController.CreateServiceConfWarehouse:input_type -> rfid_service.rfid_ito.CreateServiceConfWarehouseRequest
	6,   // 157: rfid_service.rfid_ito.ServiceController.CreateServiceReason:input_type -> rfid_service.rfid_ito.CreateServiceReasonRequest
	88,  // 158: rfid_service.rfid_ito.ServiceController.Destroy:input_type -> rfid_service.rfid_ito.ServiceDestroyRequest
	39,  // 159: rfid_service.rfid_ito.ServiceController.DestroyGoodsDeliver:input_type -> rfid_service.rfid_ito.DestroyGoodsDeliverRequest
	40,  // 160: rfid_service.rfid_ito.ServiceController.DestroyServiceConf:input_type -> rfid_service.rfid_ito.DestroyServiceConfRequest
	41,  // 161: rfid_service.rfid_ito.ServiceController.DestroyServiceConfSolution:input_type -> rfid_service.rfid_ito.DestroyServiceConfSolutionRequest
	42,  // 162: rfid_service.rfid_ito.ServiceController.DestroyServiceConfWarehouse:input_type -> rfid_service.rfid_ito.DestroyServiceConfWarehouseRequest
	43,  // 163: rfid_service.rfid_ito.ServiceController.DestroyServiceReason:input_type -> rfid_service.rfid_ito.DestroyServiceReasonRequest
	92,  // 164: rfid_service.rfid_ito.ServiceController.List:input_type -> rfid_service.rfid_ito.ServiceListRequest
	61,  // 165: rfid_service.rfid_ito.ServiceController.ListGoodsDeliver:input_type -> rfid_service.rfid_ito.ListGoodsDeliverRequest
	62,  // 166: rfid_service.rfid_ito.ServiceController.ListServiceConf:input_type -> rfid_service.rfid_ito.ListServiceConfRequest
	63,  // 167: rfid_service.rfid_ito.ServiceController.ListServiceConfSolution:input_type -> rfid_service.rfid_ito.ListServiceConfSolutionRequest
	64,  // 168: rfid_service.rfid_ito.ServiceController.ListServiceConfWarehouse:input_type -> rfid_service.rfid_ito.ListServiceConfWarehouseRequest
	65,  // 169: rfid_service.rfid_ito.ServiceController.ListServiceReason:input_type -> rfid_service.rfid_ito.ListServiceReasonRequest
	95,  // 170: rfid_service.rfid_ito.ServiceController.PartialUpdate:input_type -> rfid_service.rfid_ito.ServicePartialUpdateRequest
	103, // 171: rfid_service.rfid_ito.ServiceController.Retrieve:input_type -> rfid_service.rfid_ito.ServiceRetrieveRequest
	77,  // 172: rfid_service.rfid_ito.ServiceController.RetrieveGoodsDeliver:input_type -> rfid_service.rfid_ito.RetrieveGoodsDeliverRequest
	78,  // 173: rfid_service.rfid_ito.ServiceController.RetrieveServiceConf:input_type -> rfid_service.rfid_ito.RetrieveServiceConfRequest
	79,  // 174: rfid_service.rfid_ito.ServiceController.RetrieveServiceConfSolution:input_type -> rfid_service.rfid_ito.RetrieveServiceConfSolutionRequest
	80,  // 175: rfid_service.rfid_ito.ServiceController.RetrieveServiceConfWarehouse:input_type -> rfid_service.rfid_ito.RetrieveServiceConfWarehouseRequest
	81,  // 176: rfid_service.rfid_ito.ServiceController.RetrieveServiceReason:input_type -> rfid_service.rfid_ito.RetrieveServiceReasonRequest
	158, // 177: rfid_service.rfid_ito.ServiceController.ServiceOptions:input_type -> google.protobuf.Empty
	101, // 178: rfid_service.rfid_ito.ServiceController.ServiceStatusCount:input_type -> rfid_service.rfid_ito.ServiceRequest
	101, // 179: rfid_service.rfid_ito.ServiceController.Update:input_type -> rfid_service.rfid_ito.ServiceRequest
	139, // 180: rfid_service.rfid_ito.ServiceController.UpdateGoodsDeliver:input_type -> rfid_service.rfid_ito.UpdateGoodsDeliverRequest
	140, // 181: rfid_service.rfid_ito.ServiceController.UpdateServiceConf:input_type -> rfid_service.rfid_ito.UpdateServiceConfRequest
	141, // 182: rfid_service.rfid_ito.ServiceController.UpdateServiceConfSolution:input_type -> rfid_service.rfid_ito.UpdateServiceConfSolutionRequest
	142, // 183: rfid_service.rfid_ito.ServiceController.UpdateServiceConfWarehouse:input_type -> rfid_service.rfid_ito.UpdateServiceConfWarehouseRequest
	143, // 184: rfid_service.rfid_ito.ServiceController.UpdateServiceReason:input_type -> rfid_service.rfid_ito.UpdateServiceReasonRequest
	107, // 185: rfid_service.rfid_ito.DatastoreItoController.List:output_type -> rfid_service.rfid_ito.ShopInfoListResponse
	136, // 186: rfid_service.rfid_ito.DatastoreItoController.TransferOrder:output_type -> rfid_service.rfid_ito.TransferOrderListResponse
	25,  // 187: rfid_service.rfid_ito.DeliverNoticeController.BulkCreateDeliverNoticeGoodsDetails:output_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsListResponse
	116, // 188: rfid_service.rfid_ito.DeliverNoticeController.BulkCreateSupplierTradeGoodsDetails:output_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsListResponse
	36,  // 189: rfid_service.rfid_ito.DeliverNoticeController.Create:output_type -> rfid_service.rfid_ito.DeliverNoticeResponse
	12,  // 190: rfid_service.rfid_ito.DeliverNoticeController.CreateCtmVendorAddr:output_type -> rfid_service.rfid_ito.CtmVendorAddrResponse
	27,  // 191: rfid_service.rfid_ito.DeliverNoticeController.CreateDeliverNoticeGoodsDetails:output_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsResponse
	49,  // 192: rfid_service.rfid_ito.DeliverNoticeController.CreateKeyCtm:output_type -> rfid_service.rfid_ito.KeyCtmResponse
	56,  // 193: rfid_service.rfid_ito.DeliverNoticeController.CreateKeyVendor:output_type -> rfid_service.rfid_ito.KeyVendorResponse
	124, // 194: rfid_service.rfid_ito.DeliverNoticeController.CreateSupplierTrade:output_type -> rfid_service.rfid_ito.SupplierTradeResponse
	118, // 195: rfid_service.rfid_ito.DeliverNoticeController.CreateSupplierTradeGoodsDetails:output_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsResponse
	130, // 196: rfid_service.rfid_ito.DeliverNoticeController.CreateSupplierTradeStockOutDetails:output_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsResponse
	149, // 197: rfid_service.rfid_ito.DeliverNoticeController.CreateVendorOperator:output_type -> rfid_service.rfid_ito.VendorOperatorResponse
	33,  // 198: rfid_service.rfid_ito.DeliverNoticeController.DeliverNoticeOptions:output_type -> rfid_service.rfid_ito.DeliverNoticeOptionsResponse
	158, // 199: rfid_service.rfid_ito.DeliverNoticeController.Destroy:output_type -> google.protobuf.Empty
	158, // 200: rfid_service.rfid_ito.DeliverNoticeController.DestroyCtmVendorAddr:output_type -> google.protobuf.Empty
	158, // 201: rfid_service.rfid_ito.DeliverNoticeController.DestroyDeliverNoticeGoodsDetails:output_type -> google.protobuf.Empty
	158, // 202: rfid_service.rfid_ito.DeliverNoticeController.DestroyKeyCtm:output_type -> google.protobuf.Empty
	158, // 203: rfid_service.rfid_ito.DeliverNoticeController.DestroyKeyVendor:output_type -> google.protobuf.Empty
	158, // 204: rfid_service.rfid_ito.DeliverNoticeController.DestroySupplierTrade:output_type -> google.protobuf.Empty
	158, // 205: rfid_service.rfid_ito.DeliverNoticeController.DestroySupplierTradeGoodsDetails:output_type -> google.protobuf.Empty
	158, // 206: rfid_service.rfid_ito.DeliverNoticeController.DestroySupplierTradeStockOutDetails:output_type -> google.protobuf.Empty
	158, // 207: rfid_service.rfid_ito.DeliverNoticeController.DestroyVendorOperator:output_type -> google.protobuf.Empty
	31,  // 208: rfid_service.rfid_ito.DeliverNoticeController.List:output_type -> rfid_service.rfid_ito.DeliverNoticeListResponse
	10,  // 209: rfid_service.rfid_ito.DeliverNoticeController.ListCtmVendorAddr:output_type -> rfid_service.rfid_ito.CtmVendorAddrListResponse
	17,  // 210: rfid_service.rfid_ito.DeliverNoticeController.ListDeliverNoticeEpcScanStorage:output_type -> rfid_service.rfid_ito.DeliverNoticeEpcScanStorageListResponse
	25,  // 211: rfid_service.rfid_ito.DeliverNoticeController.ListDeliverNoticeGoodsDetails:output_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsListResponse
	48,  // 212: rfid_service.rfid_ito.DeliverNoticeController.ListKeyCtm:output_type -> rfid_service.rfid_ito.KeyCtmListResponse
	55,  // 213: rfid_service.rfid_ito.DeliverNoticeController.ListKeyVendor:output_type -> rfid_service.rfid_ito.KeyVendorListResponse
	122, // 214: rfid_service.rfid_ito.DeliverNoticeController.ListSupplierTrade:output_type -> rfid_service.rfid_ito.SupplierTradeListResponse
	116, // 215: rfid_service.rfid_ito.DeliverNoticeController.ListSupplierTradeGoodsDetails:output_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsListResponse
	129, // 216: rfid_service.rfid_ito.DeliverNoticeController.ListSupplierTradeStockOutDetails:output_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsListResponse
	147, // 217: rfid_service.rfid_ito.DeliverNoticeController.ListVendorOperator:output_type -> rfid_service.rfid_ito.VendorOperatorListResponse
	67,  // 218: rfid_service.rfid_ito.DeliverNoticeController.NoticeNextDid:output_type -> rfid_service.rfid_ito.NoticeNextDidResponse
	68,  // 219: rfid_service.rfid_ito.DeliverNoticeController.NoticeStatusCount:output_type -> rfid_service.rfid_ito.NoticeStatusCountListResponse
	36,  // 220: rfid_service.rfid_ito.DeliverNoticeController.PartialUpdate:output_type -> rfid_service.rfid_ito.DeliverNoticeResponse
	74,  // 221: rfid_service.rfid_ito.DeliverNoticeController.PurchaseOrder:output_type -> rfid_service.rfid_ito.PurchaseOrderListResponse
	36,  // 222: rfid_service.rfid_ito.DeliverNoticeController.Retrieve:output_type -> rfid_service.rfid_ito.DeliverNoticeResponse
	12,  // 223: rfid_service.rfid_ito.DeliverNoticeController.RetrieveCtmVendorAddr:output_type -> rfid_service.rfid_ito.CtmVendorAddrResponse
	27,  // 224: rfid_service.rfid_ito.DeliverNoticeController.RetrieveDeliverNoticeGoodsDetails:output_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsResponse
	49,  // 225: rfid_service.rfid_ito.DeliverNoticeController.RetrieveKeyCtm:output_type -> rfid_service.rfid_ito.KeyCtmResponse
	56,  // 226: rfid_service.rfid_ito.DeliverNoticeController.RetrieveKeyVendor:output_type -> rfid_service.rfid_ito.KeyVendorResponse
	124, // 227: rfid_service.rfid_ito.DeliverNoticeController.RetrieveSupplierTrade:output_type -> rfid_service.rfid_ito.SupplierTradeResponse
	118, // 228: rfid_service.rfid_ito.DeliverNoticeController.RetrieveSupplierTradeGoodsDetails:output_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsResponse
	130, // 229: rfid_service.rfid_ito.DeliverNoticeController.RetrieveSupplierTradeStockOutDetails:output_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsResponse
	149, // 230: rfid_service.rfid_ito.DeliverNoticeController.RetrieveVendorOperator:output_type -> rfid_service.rfid_ito.VendorOperatorResponse
	19,  // 231: rfid_service.rfid_ito.DeliverNoticeController.SaveDeliverNoticeEpcScanStorage:output_type -> rfid_service.rfid_ito.DeliverNoticeEpcScanStorageResponse
	154, // 232: rfid_service.rfid_ito.DeliverNoticeController.ShopOptionsWdt:output_type -> rfid_service.rfid_ito.WdtShopListResponse
	157, // 233: rfid_service.rfid_ito.DeliverNoticeController.StockOptionsWdt:output_type -> rfid_service.rfid_ito.WdtStockListResponse
	67,  // 234: rfid_service.rfid_ito.DeliverNoticeController.SupplierTradeNextTid:output_type -> rfid_service.rfid_ito.NoticeNextDidResponse
	158, // 235: rfid_service.rfid_ito.DeliverNoticeController.SupplierTradeProcess:output_type -> google.protobuf.Empty
	36,  // 236: rfid_service.rfid_ito.DeliverNoticeController.Update:output_type -> rfid_service.rfid_ito.DeliverNoticeResponse
	12,  // 237: rfid_service.rfid_ito.DeliverNoticeController.UpdateCtmVendorAddr:output_type -> rfid_service.rfid_ito.CtmVendorAddrResponse
	27,  // 238: rfid_service.rfid_ito.DeliverNoticeController.UpdateDeliverNoticeGoodsDetails:output_type -> rfid_service.rfid_ito.DeliverNoticeGoodsDetailsResponse
	49,  // 239: rfid_service.rfid_ito.DeliverNoticeController.UpdateKeyCtm:output_type -> rfid_service.rfid_ito.KeyCtmResponse
	56,  // 240: rfid_service.rfid_ito.DeliverNoticeController.UpdateKeyVendor:output_type -> rfid_service.rfid_ito.KeyVendorResponse
	124, // 241: rfid_service.rfid_ito.DeliverNoticeController.UpdateSupplierTrade:output_type -> rfid_service.rfid_ito.SupplierTradeResponse
	118, // 242: rfid_service.rfid_ito.DeliverNoticeController.UpdateSupplierTradeGoodsDetails:output_type -> rfid_service.rfid_ito.SupplierTradeGoodsDetailsResponse
	130, // 243: rfid_service.rfid_ito.DeliverNoticeController.UpdateSupplierTradeStockOutDetails:output_type -> rfid_service.rfid_ito.SupplierTradeStockOutDetailsResponse
	149, // 244: rfid_service.rfid_ito.DeliverNoticeController.UpdateVendorOperator:output_type -> rfid_service.rfid_ito.VendorOperatorResponse
	89,  // 245: rfid_service.rfid_ito.ServiceController.BulkCreateGoodsDeliver:output_type -> rfid_service.rfid_ito.ServiceGoodsDetailListResponse
	102, // 246: rfid_service.rfid_ito.ServiceController.Create:output_type -> rfid_service.rfid_ito.ServiceResponse
	91,  // 247: rfid_service.rfid_ito.ServiceController.CreateGoodsDeliver:output_type -> rfid_service.rfid_ito.ServiceGoodsDetailResponse
	83,  // 248: rfid_service.rfid_ito.ServiceController.CreateServiceConf:output_type -> rfid_service.rfid_ito.ServiceConfResponse
	85,  // 249: rfid_service.rfid_ito.ServiceController.CreateServiceConfSolution:output_type -> rfid_service.rfid_ito.ServiceConfSolutionResponse
	87,  // 250: rfid_service.rfid_ito.ServiceController.CreateServiceConfWarehouse:output_type -> rfid_service.rfid_ito.ServiceConfWarehouseResponse
	100, // 251: rfid_service.rfid_ito.ServiceController.CreateServiceReason:output_type -> rfid_service.rfid_ito.ServiceReasonResponse
	158, // 252: rfid_service.rfid_ito.ServiceController.Destroy:output_type -> google.protobuf.Empty
	158, // 253: rfid_service.rfid_ito.ServiceController.DestroyGoodsDeliver:output_type -> google.protobuf.Empty
	158, // 254: rfid_service.rfid_ito.ServiceController.DestroyServiceConf:output_type -> google.protobuf.Empty
	158, // 255: rfid_service.rfid_ito.ServiceController.DestroyServiceConfSolution:output_type -> google.protobuf.Empty
	158, // 256: rfid_service.rfid_ito.ServiceController.DestroyServiceConfWarehouse:output_type -> google.protobuf.Empty
	158, // 257: rfid_service.rfid_ito.ServiceController.DestroyServiceReason:output_type -> google.protobuf.Empty
	93,  // 258: rfid_service.rfid_ito.ServiceController.List:output_type -> rfid_service.rfid_ito.ServiceListResponse
	89,  // 259: rfid_service.rfid_ito.ServiceController.ListGoodsDeliver:output_type -> rfid_service.rfid_ito.ServiceGoodsDetailListResponse
	82,  // 260: rfid_service.rfid_ito.ServiceController.ListServiceConf:output_type -> rfid_service.rfid_ito.ServiceConfListResponse
	84,  // 261: rfid_service.rfid_ito.ServiceController.ListServiceConfSolution:output_type -> rfid_service.rfid_ito.ServiceConfSolutionListResponse
	86,  // 262: rfid_service.rfid_ito.ServiceController.ListServiceConfWarehouse:output_type -> rfid_service.rfid_ito.ServiceConfWarehouseListResponse
	99,  // 263: rfid_service.rfid_ito.ServiceController.ListServiceReason:output_type -> rfid_service.rfid_ito.ServiceReasonListResponse
	102, // 264: rfid_service.rfid_ito.ServiceController.PartialUpdate:output_type -> rfid_service.rfid_ito.ServiceResponse
	102, // 265: rfid_service.rfid_ito.ServiceController.Retrieve:output_type -> rfid_service.rfid_ito.ServiceResponse
	91,  // 266: rfid_service.rfid_ito.ServiceController.RetrieveGoodsDeliver:output_type -> rfid_service.rfid_ito.ServiceGoodsDetailResponse
	83,  // 267: rfid_service.rfid_ito.ServiceController.RetrieveServiceConf:output_type -> rfid_service.rfid_ito.ServiceConfResponse
	85,  // 268: rfid_service.rfid_ito.ServiceController.RetrieveServiceConfSolution:output_type -> rfid_service.rfid_ito.ServiceConfSolutionResponse
	87,  // 269: rfid_service.rfid_ito.ServiceController.RetrieveServiceConfWarehouse:output_type -> rfid_service.rfid_ito.ServiceConfWarehouseResponse
	100, // 270: rfid_service.rfid_ito.ServiceController.RetrieveServiceReason:output_type -> rfid_service.rfid_ito.ServiceReasonResponse
	94,  // 271: rfid_service.rfid_ito.ServiceController.ServiceOptions:output_type -> rfid_service.rfid_ito.ServiceOptionsResponse
	59,  // 272: rfid_service.rfid_ito.ServiceController.ServiceStatusCount:output_type -> rfid_service.rfid_ito.LabelNumberValueListResponse
	102, // 273: rfid_service.rfid_ito.ServiceController.Update:output_type -> rfid_service.rfid_ito.ServiceResponse
	91,  // 274: rfid_service.rfid_ito.ServiceController.UpdateGoodsDeliver:output_type -> rfid_service.rfid_ito.ServiceGoodsDetailResponse
	83,  // 275: rfid_service.rfid_ito.ServiceController.UpdateServiceConf:output_type -> rfid_service.rfid_ito.ServiceConfResponse
	85,  // 276: rfid_service.rfid_ito.ServiceController.UpdateServiceConfSolution:output_type -> rfid_service.rfid_ito.ServiceConfSolutionResponse
	87,  // 277: rfid_service.rfid_ito.ServiceController.UpdateServiceConfWarehouse:output_type -> rfid_service.rfid_ito.ServiceConfWarehouseResponse
	100, // 278: rfid_service.rfid_ito.ServiceController.UpdateServiceReason:output_type -> rfid_service.rfid_ito.ServiceReasonResponse
	185, // [185:279] is the sub-list for method output_type
	91,  // [91:185] is the sub-list for method input_type
	91,  // [91:91] is the sub-list for extension type_name
	91,  // [91:91] is the sub-list for extension extendee
	0,   // [0:91] is the sub-list for field type_name
}

func init() { file_rfid_ito_proto_init() }
func file_rfid_ito_proto_init() {
	if File_rfid_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rfid_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateGoodsDeliverListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateGoodsDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodsDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceConfSolutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceConfWarehouseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceReasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtmVendorAddrUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeEpcScanStorageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeEpcScanStorageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeEpcScanStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeEpcScanStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsBulkCreateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsBulkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeGoodsDetailsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverNoticeSupplierTradeProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyGoodsDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyServiceConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyServiceConfSolutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyServiceConfWarehouseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyServiceReasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerChoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyCtmCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyCtmDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyCtmListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyCtmListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyCtmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyCtmRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyCtmUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVendorCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVendorDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVendorListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVendorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVendorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVendorRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyVendorUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGoodsDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceConfSolutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceConfWarehouseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceReasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeNextDidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeNextDidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeStatusCountListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeStatusCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeStatusCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectComplainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectComplainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveGoodsDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveServiceConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveServiceConfSolutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveServiceConfWarehouseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveServiceReasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfSolutionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfSolutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfWarehouseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfWarehouseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGoodsDetailListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGoodsDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGoodsDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePayDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePayDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceReasonChildrenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceReasonListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceReasonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStockOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStockOutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopInfoListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopInfoListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsBulkCreateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsBulkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeGoodsDetailsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeNextTidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeStockOutDetailsCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeStockOutDetailsDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeStockOutDetailsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeStockOutDetailsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeStockOutDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeStockOutDetailsRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeStockOutDetailsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplierTradeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeGoodsEpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodsDeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceConfSolutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceConfWarehouseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceReasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOperatorUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtShopListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtShopListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfid_ito_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WdtStockListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rfid_ito_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[90].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[91].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[97].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[101].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[109].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[113].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[118].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[120].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[124].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[126].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[130].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[132].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[133].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[134].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[135].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[137].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[138].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[140].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[141].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[142].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[143].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[148].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[149].OneofWrappers = []interface{}{}
	file_rfid_ito_proto_msgTypes[151].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rfid_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   158,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_rfid_ito_proto_goTypes,
		DependencyIndexes: file_rfid_ito_proto_depIdxs,
		MessageInfos:      file_rfid_ito_proto_msgTypes,
	}.Build()
	File_rfid_ito_proto = out.File
	file_rfid_ito_proto_rawDesc = nil
	file_rfid_ito_proto_goTypes = nil
	file_rfid_ito_proto_depIdxs = nil
}
