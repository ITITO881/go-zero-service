// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rfid_ito.proto

package pbrfid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatastoreItoController_List_FullMethodName          = "/rfid_service.rfid_ito.DatastoreItoController/List"
	DatastoreItoController_TransferOrder_FullMethodName = "/rfid_service.rfid_ito.DatastoreItoController/TransferOrder"
)

// DatastoreItoControllerClient is the client API for DatastoreItoController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatastoreItoControllerClient interface {
	List(ctx context.Context, in *ShopInfoListRequest, opts ...grpc.CallOption) (*ShopInfoListResponse, error)
	TransferOrder(ctx context.Context, in *TransferOrderRequest, opts ...grpc.CallOption) (*TransferOrderListResponse, error)
}

type datastoreItoControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDatastoreItoControllerClient(cc grpc.ClientConnInterface) DatastoreItoControllerClient {
	return &datastoreItoControllerClient{cc}
}

func (c *datastoreItoControllerClient) List(ctx context.Context, in *ShopInfoListRequest, opts ...grpc.CallOption) (*ShopInfoListResponse, error) {
	out := new(ShopInfoListResponse)
	err := c.cc.Invoke(ctx, DatastoreItoController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreItoControllerClient) TransferOrder(ctx context.Context, in *TransferOrderRequest, opts ...grpc.CallOption) (*TransferOrderListResponse, error) {
	out := new(TransferOrderListResponse)
	err := c.cc.Invoke(ctx, DatastoreItoController_TransferOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatastoreItoControllerServer is the server API for DatastoreItoController service.
// All implementations must embed UnimplementedDatastoreItoControllerServer
// for forward compatibility
type DatastoreItoControllerServer interface {
	List(context.Context, *ShopInfoListRequest) (*ShopInfoListResponse, error)
	TransferOrder(context.Context, *TransferOrderRequest) (*TransferOrderListResponse, error)
	mustEmbedUnimplementedDatastoreItoControllerServer()
}

// UnimplementedDatastoreItoControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDatastoreItoControllerServer struct {
}

func (UnimplementedDatastoreItoControllerServer) List(context.Context, *ShopInfoListRequest) (*ShopInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDatastoreItoControllerServer) TransferOrder(context.Context, *TransferOrderRequest) (*TransferOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOrder not implemented")
}
func (UnimplementedDatastoreItoControllerServer) mustEmbedUnimplementedDatastoreItoControllerServer() {
}

// UnsafeDatastoreItoControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatastoreItoControllerServer will
// result in compilation errors.
type UnsafeDatastoreItoControllerServer interface {
	mustEmbedUnimplementedDatastoreItoControllerServer()
}

func RegisterDatastoreItoControllerServer(s grpc.ServiceRegistrar, srv DatastoreItoControllerServer) {
	s.RegisterService(&DatastoreItoController_ServiceDesc, srv)
}

func _DatastoreItoController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreItoControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatastoreItoController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreItoControllerServer).List(ctx, req.(*ShopInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatastoreItoController_TransferOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreItoControllerServer).TransferOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatastoreItoController_TransferOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreItoControllerServer).TransferOrder(ctx, req.(*TransferOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatastoreItoController_ServiceDesc is the grpc.ServiceDesc for DatastoreItoController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatastoreItoController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfid_service.rfid_ito.DatastoreItoController",
	HandlerType: (*DatastoreItoControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DatastoreItoController_List_Handler,
		},
		{
			MethodName: "TransferOrder",
			Handler:    _DatastoreItoController_TransferOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rfid_ito.proto",
}

const (
	DeliverNoticeController_BulkCreateDeliverNoticeGoodsDetails_FullMethodName  = "/rfid_service.rfid_ito.DeliverNoticeController/BulkCreateDeliverNoticeGoodsDetails"
	DeliverNoticeController_BulkCreateSupplierTradeGoodsDetails_FullMethodName  = "/rfid_service.rfid_ito.DeliverNoticeController/BulkCreateSupplierTradeGoodsDetails"
	DeliverNoticeController_Create_FullMethodName                               = "/rfid_service.rfid_ito.DeliverNoticeController/Create"
	DeliverNoticeController_CreateCtmVendorAddr_FullMethodName                  = "/rfid_service.rfid_ito.DeliverNoticeController/CreateCtmVendorAddr"
	DeliverNoticeController_CreateDeliverNoticeGoodsDetails_FullMethodName      = "/rfid_service.rfid_ito.DeliverNoticeController/CreateDeliverNoticeGoodsDetails"
	DeliverNoticeController_CreateKeyCtm_FullMethodName                         = "/rfid_service.rfid_ito.DeliverNoticeController/CreateKeyCtm"
	DeliverNoticeController_CreateKeyVendor_FullMethodName                      = "/rfid_service.rfid_ito.DeliverNoticeController/CreateKeyVendor"
	DeliverNoticeController_CreateSupplierTrade_FullMethodName                  = "/rfid_service.rfid_ito.DeliverNoticeController/CreateSupplierTrade"
	DeliverNoticeController_CreateSupplierTradeGoodsDetails_FullMethodName      = "/rfid_service.rfid_ito.DeliverNoticeController/CreateSupplierTradeGoodsDetails"
	DeliverNoticeController_CreateSupplierTradeStockOutDetails_FullMethodName   = "/rfid_service.rfid_ito.DeliverNoticeController/CreateSupplierTradeStockOutDetails"
	DeliverNoticeController_CreateVendorOperator_FullMethodName                 = "/rfid_service.rfid_ito.DeliverNoticeController/CreateVendorOperator"
	DeliverNoticeController_DeliverNoticeOptions_FullMethodName                 = "/rfid_service.rfid_ito.DeliverNoticeController/DeliverNoticeOptions"
	DeliverNoticeController_Destroy_FullMethodName                              = "/rfid_service.rfid_ito.DeliverNoticeController/Destroy"
	DeliverNoticeController_DestroyCtmVendorAddr_FullMethodName                 = "/rfid_service.rfid_ito.DeliverNoticeController/DestroyCtmVendorAddr"
	DeliverNoticeController_DestroyDeliverNoticeGoodsDetails_FullMethodName     = "/rfid_service.rfid_ito.DeliverNoticeController/DestroyDeliverNoticeGoodsDetails"
	DeliverNoticeController_DestroyKeyCtm_FullMethodName                        = "/rfid_service.rfid_ito.DeliverNoticeController/DestroyKeyCtm"
	DeliverNoticeController_DestroyKeyVendor_FullMethodName                     = "/rfid_service.rfid_ito.DeliverNoticeController/DestroyKeyVendor"
	DeliverNoticeController_DestroySupplierTrade_FullMethodName                 = "/rfid_service.rfid_ito.DeliverNoticeController/DestroySupplierTrade"
	DeliverNoticeController_DestroySupplierTradeGoodsDetails_FullMethodName     = "/rfid_service.rfid_ito.DeliverNoticeController/DestroySupplierTradeGoodsDetails"
	DeliverNoticeController_DestroySupplierTradeStockOutDetails_FullMethodName  = "/rfid_service.rfid_ito.DeliverNoticeController/DestroySupplierTradeStockOutDetails"
	DeliverNoticeController_DestroyVendorOperator_FullMethodName                = "/rfid_service.rfid_ito.DeliverNoticeController/DestroyVendorOperator"
	DeliverNoticeController_List_FullMethodName                                 = "/rfid_service.rfid_ito.DeliverNoticeController/List"
	DeliverNoticeController_ListCtmVendorAddr_FullMethodName                    = "/rfid_service.rfid_ito.DeliverNoticeController/ListCtmVendorAddr"
	DeliverNoticeController_ListDeliverNoticeEpcScanStorage_FullMethodName      = "/rfid_service.rfid_ito.DeliverNoticeController/ListDeliverNoticeEpcScanStorage"
	DeliverNoticeController_ListDeliverNoticeGoodsDetails_FullMethodName        = "/rfid_service.rfid_ito.DeliverNoticeController/ListDeliverNoticeGoodsDetails"
	DeliverNoticeController_ListKeyCtm_FullMethodName                           = "/rfid_service.rfid_ito.DeliverNoticeController/ListKeyCtm"
	DeliverNoticeController_ListKeyVendor_FullMethodName                        = "/rfid_service.rfid_ito.DeliverNoticeController/ListKeyVendor"
	DeliverNoticeController_ListSupplierTrade_FullMethodName                    = "/rfid_service.rfid_ito.DeliverNoticeController/ListSupplierTrade"
	DeliverNoticeController_ListSupplierTradeGoodsDetails_FullMethodName        = "/rfid_service.rfid_ito.DeliverNoticeController/ListSupplierTradeGoodsDetails"
	DeliverNoticeController_ListSupplierTradeStockOutDetails_FullMethodName     = "/rfid_service.rfid_ito.DeliverNoticeController/ListSupplierTradeStockOutDetails"
	DeliverNoticeController_ListVendorOperator_FullMethodName                   = "/rfid_service.rfid_ito.DeliverNoticeController/ListVendorOperator"
	DeliverNoticeController_NoticeNextDid_FullMethodName                        = "/rfid_service.rfid_ito.DeliverNoticeController/NoticeNextDid"
	DeliverNoticeController_NoticeStatusCount_FullMethodName                    = "/rfid_service.rfid_ito.DeliverNoticeController/NoticeStatusCount"
	DeliverNoticeController_PartialUpdate_FullMethodName                        = "/rfid_service.rfid_ito.DeliverNoticeController/PartialUpdate"
	DeliverNoticeController_PurchaseOrder_FullMethodName                        = "/rfid_service.rfid_ito.DeliverNoticeController/PurchaseOrder"
	DeliverNoticeController_Retrieve_FullMethodName                             = "/rfid_service.rfid_ito.DeliverNoticeController/Retrieve"
	DeliverNoticeController_RetrieveCtmVendorAddr_FullMethodName                = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveCtmVendorAddr"
	DeliverNoticeController_RetrieveDeliverNoticeGoodsDetails_FullMethodName    = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveDeliverNoticeGoodsDetails"
	DeliverNoticeController_RetrieveKeyCtm_FullMethodName                       = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveKeyCtm"
	DeliverNoticeController_RetrieveKeyVendor_FullMethodName                    = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveKeyVendor"
	DeliverNoticeController_RetrieveSupplierTrade_FullMethodName                = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveSupplierTrade"
	DeliverNoticeController_RetrieveSupplierTradeGoodsDetails_FullMethodName    = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveSupplierTradeGoodsDetails"
	DeliverNoticeController_RetrieveSupplierTradeStockOutDetails_FullMethodName = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveSupplierTradeStockOutDetails"
	DeliverNoticeController_RetrieveVendorOperator_FullMethodName               = "/rfid_service.rfid_ito.DeliverNoticeController/RetrieveVendorOperator"
	DeliverNoticeController_SaveDeliverNoticeEpcScanStorage_FullMethodName      = "/rfid_service.rfid_ito.DeliverNoticeController/SaveDeliverNoticeEpcScanStorage"
	DeliverNoticeController_ShopOptionsWdt_FullMethodName                       = "/rfid_service.rfid_ito.DeliverNoticeController/ShopOptionsWdt"
	DeliverNoticeController_StockOptionsWdt_FullMethodName                      = "/rfid_service.rfid_ito.DeliverNoticeController/StockOptionsWdt"
	DeliverNoticeController_SupplierTradeNextTid_FullMethodName                 = "/rfid_service.rfid_ito.DeliverNoticeController/SupplierTradeNextTid"
	DeliverNoticeController_SupplierTradeProcess_FullMethodName                 = "/rfid_service.rfid_ito.DeliverNoticeController/SupplierTradeProcess"
	DeliverNoticeController_Update_FullMethodName                               = "/rfid_service.rfid_ito.DeliverNoticeController/Update"
	DeliverNoticeController_UpdateCtmVendorAddr_FullMethodName                  = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateCtmVendorAddr"
	DeliverNoticeController_UpdateDeliverNoticeGoodsDetails_FullMethodName      = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateDeliverNoticeGoodsDetails"
	DeliverNoticeController_UpdateKeyCtm_FullMethodName                         = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateKeyCtm"
	DeliverNoticeController_UpdateKeyVendor_FullMethodName                      = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateKeyVendor"
	DeliverNoticeController_UpdateSupplierTrade_FullMethodName                  = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateSupplierTrade"
	DeliverNoticeController_UpdateSupplierTradeGoodsDetails_FullMethodName      = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateSupplierTradeGoodsDetails"
	DeliverNoticeController_UpdateSupplierTradeStockOutDetails_FullMethodName   = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateSupplierTradeStockOutDetails"
	DeliverNoticeController_UpdateVendorOperator_FullMethodName                 = "/rfid_service.rfid_ito.DeliverNoticeController/UpdateVendorOperator"
)

// DeliverNoticeControllerClient is the client API for DeliverNoticeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliverNoticeControllerClient interface {
	BulkCreateDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsBulkCreateListRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsListResponse, error)
	BulkCreateSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsBulkCreateListRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsListResponse, error)
	Create(ctx context.Context, in *DeliverNoticeRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error)
	CreateCtmVendorAddr(ctx context.Context, in *CtmVendorAddrCreateRequest, opts ...grpc.CallOption) (*CtmVendorAddrResponse, error)
	CreateDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsCreateRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsResponse, error)
	CreateKeyCtm(ctx context.Context, in *KeyCtmCreateRequest, opts ...grpc.CallOption) (*KeyCtmResponse, error)
	CreateKeyVendor(ctx context.Context, in *KeyVendorCreateRequest, opts ...grpc.CallOption) (*KeyVendorResponse, error)
	CreateSupplierTrade(ctx context.Context, in *SupplierTradeCreateRequest, opts ...grpc.CallOption) (*SupplierTradeResponse, error)
	CreateSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsCreateRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsResponse, error)
	CreateSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsCreateRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsResponse, error)
	CreateVendorOperator(ctx context.Context, in *VendorOperatorCreateRequest, opts ...grpc.CallOption) (*VendorOperatorResponse, error)
	DeliverNoticeOptions(ctx context.Context, in *DeliverNoticeOptionsRequest, opts ...grpc.CallOption) (*DeliverNoticeOptionsResponse, error)
	Destroy(ctx context.Context, in *DeliverNoticeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyCtmVendorAddr(ctx context.Context, in *CtmVendorAddrDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyKeyCtm(ctx context.Context, in *KeyCtmDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyKeyVendor(ctx context.Context, in *KeyVendorDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroySupplierTrade(ctx context.Context, in *SupplierTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroySupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroySupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyVendorOperator(ctx context.Context, in *VendorOperatorDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *DeliverNoticeListRequest, opts ...grpc.CallOption) (*DeliverNoticeListResponse, error)
	ListCtmVendorAddr(ctx context.Context, in *CtmVendorAddrListRequest, opts ...grpc.CallOption) (*CtmVendorAddrListResponse, error)
	ListDeliverNoticeEpcScanStorage(ctx context.Context, in *DeliverNoticeEpcScanStorageListRequest, opts ...grpc.CallOption) (*DeliverNoticeEpcScanStorageListResponse, error)
	ListDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsListRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsListResponse, error)
	ListKeyCtm(ctx context.Context, in *KeyCtmListRequest, opts ...grpc.CallOption) (*KeyCtmListResponse, error)
	ListKeyVendor(ctx context.Context, in *KeyVendorListRequest, opts ...grpc.CallOption) (*KeyVendorListResponse, error)
	ListSupplierTrade(ctx context.Context, in *SupplierTradeListRequest, opts ...grpc.CallOption) (*SupplierTradeListResponse, error)
	ListSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsListRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsListResponse, error)
	ListSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsListRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsListResponse, error)
	ListVendorOperator(ctx context.Context, in *VendorOperatorListRequest, opts ...grpc.CallOption) (*VendorOperatorListResponse, error)
	NoticeNextDid(ctx context.Context, in *NoticeNextDidRequest, opts ...grpc.CallOption) (*NoticeNextDidResponse, error)
	NoticeStatusCount(ctx context.Context, in *NoticeStatusCountRequest, opts ...grpc.CallOption) (*NoticeStatusCountListResponse, error)
	PartialUpdate(ctx context.Context, in *DeliverNoticePartialUpdateRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error)
	PurchaseOrder(ctx context.Context, in *PurchaseOrderRequest, opts ...grpc.CallOption) (*PurchaseOrderListResponse, error)
	Retrieve(ctx context.Context, in *DeliverNoticeRetrieveRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error)
	RetrieveCtmVendorAddr(ctx context.Context, in *CtmVendorAddrRetrieveRequest, opts ...grpc.CallOption) (*CtmVendorAddrResponse, error)
	RetrieveDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsRetrieveRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsResponse, error)
	RetrieveKeyCtm(ctx context.Context, in *KeyCtmRetrieveRequest, opts ...grpc.CallOption) (*KeyCtmResponse, error)
	RetrieveKeyVendor(ctx context.Context, in *KeyVendorRetrieveRequest, opts ...grpc.CallOption) (*KeyVendorResponse, error)
	RetrieveSupplierTrade(ctx context.Context, in *SupplierTradeRetrieveRequest, opts ...grpc.CallOption) (*SupplierTradeResponse, error)
	RetrieveSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsRetrieveRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsResponse, error)
	RetrieveSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsRetrieveRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsResponse, error)
	RetrieveVendorOperator(ctx context.Context, in *VendorOperatorRetrieveRequest, opts ...grpc.CallOption) (*VendorOperatorResponse, error)
	SaveDeliverNoticeEpcScanStorage(ctx context.Context, in *DeliverNoticeEpcScanStorageRequest, opts ...grpc.CallOption) (*DeliverNoticeEpcScanStorageResponse, error)
	ShopOptionsWdt(ctx context.Context, in *WdtShopListRequest, opts ...grpc.CallOption) (*WdtShopListResponse, error)
	StockOptionsWdt(ctx context.Context, in *WdtStockListRequest, opts ...grpc.CallOption) (*WdtStockListResponse, error)
	SupplierTradeNextTid(ctx context.Context, in *SupplierTradeNextTidRequest, opts ...grpc.CallOption) (*NoticeNextDidResponse, error)
	SupplierTradeProcess(ctx context.Context, in *DeliverNoticeSupplierTradeProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *DeliverNoticeRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error)
	UpdateCtmVendorAddr(ctx context.Context, in *CtmVendorAddrUpdateRequest, opts ...grpc.CallOption) (*CtmVendorAddrResponse, error)
	UpdateDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsUpdateRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsResponse, error)
	UpdateKeyCtm(ctx context.Context, in *KeyCtmUpdateRequest, opts ...grpc.CallOption) (*KeyCtmResponse, error)
	UpdateKeyVendor(ctx context.Context, in *KeyVendorUpdateRequest, opts ...grpc.CallOption) (*KeyVendorResponse, error)
	UpdateSupplierTrade(ctx context.Context, in *SupplierTradeUpdateRequest, opts ...grpc.CallOption) (*SupplierTradeResponse, error)
	UpdateSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsUpdateRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsResponse, error)
	UpdateSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsUpdateRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsResponse, error)
	UpdateVendorOperator(ctx context.Context, in *VendorOperatorUpdateRequest, opts ...grpc.CallOption) (*VendorOperatorResponse, error)
}

type deliverNoticeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliverNoticeControllerClient(cc grpc.ClientConnInterface) DeliverNoticeControllerClient {
	return &deliverNoticeControllerClient{cc}
}

func (c *deliverNoticeControllerClient) BulkCreateDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsBulkCreateListRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsListResponse, error) {
	out := new(DeliverNoticeGoodsDetailsListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_BulkCreateDeliverNoticeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) BulkCreateSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsBulkCreateListRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsListResponse, error) {
	out := new(SupplierTradeGoodsDetailsListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_BulkCreateSupplierTradeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) Create(ctx context.Context, in *DeliverNoticeRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error) {
	out := new(DeliverNoticeResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateCtmVendorAddr(ctx context.Context, in *CtmVendorAddrCreateRequest, opts ...grpc.CallOption) (*CtmVendorAddrResponse, error) {
	out := new(CtmVendorAddrResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateCtmVendorAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsCreateRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsResponse, error) {
	out := new(DeliverNoticeGoodsDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateDeliverNoticeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateKeyCtm(ctx context.Context, in *KeyCtmCreateRequest, opts ...grpc.CallOption) (*KeyCtmResponse, error) {
	out := new(KeyCtmResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateKeyCtm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateKeyVendor(ctx context.Context, in *KeyVendorCreateRequest, opts ...grpc.CallOption) (*KeyVendorResponse, error) {
	out := new(KeyVendorResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateKeyVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateSupplierTrade(ctx context.Context, in *SupplierTradeCreateRequest, opts ...grpc.CallOption) (*SupplierTradeResponse, error) {
	out := new(SupplierTradeResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateSupplierTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsCreateRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsResponse, error) {
	out := new(SupplierTradeGoodsDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateSupplierTradeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsCreateRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsResponse, error) {
	out := new(SupplierTradeStockOutDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateSupplierTradeStockOutDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) CreateVendorOperator(ctx context.Context, in *VendorOperatorCreateRequest, opts ...grpc.CallOption) (*VendorOperatorResponse, error) {
	out := new(VendorOperatorResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_CreateVendorOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DeliverNoticeOptions(ctx context.Context, in *DeliverNoticeOptionsRequest, opts ...grpc.CallOption) (*DeliverNoticeOptionsResponse, error) {
	out := new(DeliverNoticeOptionsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DeliverNoticeOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) Destroy(ctx context.Context, in *DeliverNoticeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroyCtmVendorAddr(ctx context.Context, in *CtmVendorAddrDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroyCtmVendorAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroyDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroyDeliverNoticeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroyKeyCtm(ctx context.Context, in *KeyCtmDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroyKeyCtm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroyKeyVendor(ctx context.Context, in *KeyVendorDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroyKeyVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroySupplierTrade(ctx context.Context, in *SupplierTradeDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroySupplierTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroySupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroySupplierTradeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroySupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroySupplierTradeStockOutDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) DestroyVendorOperator(ctx context.Context, in *VendorOperatorDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_DestroyVendorOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) List(ctx context.Context, in *DeliverNoticeListRequest, opts ...grpc.CallOption) (*DeliverNoticeListResponse, error) {
	out := new(DeliverNoticeListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListCtmVendorAddr(ctx context.Context, in *CtmVendorAddrListRequest, opts ...grpc.CallOption) (*CtmVendorAddrListResponse, error) {
	out := new(CtmVendorAddrListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListCtmVendorAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListDeliverNoticeEpcScanStorage(ctx context.Context, in *DeliverNoticeEpcScanStorageListRequest, opts ...grpc.CallOption) (*DeliverNoticeEpcScanStorageListResponse, error) {
	out := new(DeliverNoticeEpcScanStorageListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListDeliverNoticeEpcScanStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsListRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsListResponse, error) {
	out := new(DeliverNoticeGoodsDetailsListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListDeliverNoticeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListKeyCtm(ctx context.Context, in *KeyCtmListRequest, opts ...grpc.CallOption) (*KeyCtmListResponse, error) {
	out := new(KeyCtmListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListKeyCtm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListKeyVendor(ctx context.Context, in *KeyVendorListRequest, opts ...grpc.CallOption) (*KeyVendorListResponse, error) {
	out := new(KeyVendorListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListKeyVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListSupplierTrade(ctx context.Context, in *SupplierTradeListRequest, opts ...grpc.CallOption) (*SupplierTradeListResponse, error) {
	out := new(SupplierTradeListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListSupplierTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsListRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsListResponse, error) {
	out := new(SupplierTradeGoodsDetailsListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListSupplierTradeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsListRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsListResponse, error) {
	out := new(SupplierTradeStockOutDetailsListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListSupplierTradeStockOutDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ListVendorOperator(ctx context.Context, in *VendorOperatorListRequest, opts ...grpc.CallOption) (*VendorOperatorListResponse, error) {
	out := new(VendorOperatorListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ListVendorOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) NoticeNextDid(ctx context.Context, in *NoticeNextDidRequest, opts ...grpc.CallOption) (*NoticeNextDidResponse, error) {
	out := new(NoticeNextDidResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_NoticeNextDid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) NoticeStatusCount(ctx context.Context, in *NoticeStatusCountRequest, opts ...grpc.CallOption) (*NoticeStatusCountListResponse, error) {
	out := new(NoticeStatusCountListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_NoticeStatusCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) PartialUpdate(ctx context.Context, in *DeliverNoticePartialUpdateRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error) {
	out := new(DeliverNoticeResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) PurchaseOrder(ctx context.Context, in *PurchaseOrderRequest, opts ...grpc.CallOption) (*PurchaseOrderListResponse, error) {
	out := new(PurchaseOrderListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_PurchaseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) Retrieve(ctx context.Context, in *DeliverNoticeRetrieveRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error) {
	out := new(DeliverNoticeResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveCtmVendorAddr(ctx context.Context, in *CtmVendorAddrRetrieveRequest, opts ...grpc.CallOption) (*CtmVendorAddrResponse, error) {
	out := new(CtmVendorAddrResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveCtmVendorAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsRetrieveRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsResponse, error) {
	out := new(DeliverNoticeGoodsDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveDeliverNoticeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveKeyCtm(ctx context.Context, in *KeyCtmRetrieveRequest, opts ...grpc.CallOption) (*KeyCtmResponse, error) {
	out := new(KeyCtmResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveKeyCtm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveKeyVendor(ctx context.Context, in *KeyVendorRetrieveRequest, opts ...grpc.CallOption) (*KeyVendorResponse, error) {
	out := new(KeyVendorResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveKeyVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveSupplierTrade(ctx context.Context, in *SupplierTradeRetrieveRequest, opts ...grpc.CallOption) (*SupplierTradeResponse, error) {
	out := new(SupplierTradeResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveSupplierTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsRetrieveRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsResponse, error) {
	out := new(SupplierTradeGoodsDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveSupplierTradeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsRetrieveRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsResponse, error) {
	out := new(SupplierTradeStockOutDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveSupplierTradeStockOutDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) RetrieveVendorOperator(ctx context.Context, in *VendorOperatorRetrieveRequest, opts ...grpc.CallOption) (*VendorOperatorResponse, error) {
	out := new(VendorOperatorResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_RetrieveVendorOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) SaveDeliverNoticeEpcScanStorage(ctx context.Context, in *DeliverNoticeEpcScanStorageRequest, opts ...grpc.CallOption) (*DeliverNoticeEpcScanStorageResponse, error) {
	out := new(DeliverNoticeEpcScanStorageResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_SaveDeliverNoticeEpcScanStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) ShopOptionsWdt(ctx context.Context, in *WdtShopListRequest, opts ...grpc.CallOption) (*WdtShopListResponse, error) {
	out := new(WdtShopListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_ShopOptionsWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) StockOptionsWdt(ctx context.Context, in *WdtStockListRequest, opts ...grpc.CallOption) (*WdtStockListResponse, error) {
	out := new(WdtStockListResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_StockOptionsWdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) SupplierTradeNextTid(ctx context.Context, in *SupplierTradeNextTidRequest, opts ...grpc.CallOption) (*NoticeNextDidResponse, error) {
	out := new(NoticeNextDidResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_SupplierTradeNextTid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) SupplierTradeProcess(ctx context.Context, in *DeliverNoticeSupplierTradeProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliverNoticeController_SupplierTradeProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) Update(ctx context.Context, in *DeliverNoticeRequest, opts ...grpc.CallOption) (*DeliverNoticeResponse, error) {
	out := new(DeliverNoticeResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateCtmVendorAddr(ctx context.Context, in *CtmVendorAddrUpdateRequest, opts ...grpc.CallOption) (*CtmVendorAddrResponse, error) {
	out := new(CtmVendorAddrResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateCtmVendorAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateDeliverNoticeGoodsDetails(ctx context.Context, in *DeliverNoticeGoodsDetailsUpdateRequest, opts ...grpc.CallOption) (*DeliverNoticeGoodsDetailsResponse, error) {
	out := new(DeliverNoticeGoodsDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateDeliverNoticeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateKeyCtm(ctx context.Context, in *KeyCtmUpdateRequest, opts ...grpc.CallOption) (*KeyCtmResponse, error) {
	out := new(KeyCtmResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateKeyCtm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateKeyVendor(ctx context.Context, in *KeyVendorUpdateRequest, opts ...grpc.CallOption) (*KeyVendorResponse, error) {
	out := new(KeyVendorResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateKeyVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateSupplierTrade(ctx context.Context, in *SupplierTradeUpdateRequest, opts ...grpc.CallOption) (*SupplierTradeResponse, error) {
	out := new(SupplierTradeResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateSupplierTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateSupplierTradeGoodsDetails(ctx context.Context, in *SupplierTradeGoodsDetailsUpdateRequest, opts ...grpc.CallOption) (*SupplierTradeGoodsDetailsResponse, error) {
	out := new(SupplierTradeGoodsDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateSupplierTradeGoodsDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateSupplierTradeStockOutDetails(ctx context.Context, in *SupplierTradeStockOutDetailsUpdateRequest, opts ...grpc.CallOption) (*SupplierTradeStockOutDetailsResponse, error) {
	out := new(SupplierTradeStockOutDetailsResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateSupplierTradeStockOutDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliverNoticeControllerClient) UpdateVendorOperator(ctx context.Context, in *VendorOperatorUpdateRequest, opts ...grpc.CallOption) (*VendorOperatorResponse, error) {
	out := new(VendorOperatorResponse)
	err := c.cc.Invoke(ctx, DeliverNoticeController_UpdateVendorOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliverNoticeControllerServer is the server API for DeliverNoticeController service.
// All implementations must embed UnimplementedDeliverNoticeControllerServer
// for forward compatibility
type DeliverNoticeControllerServer interface {
	BulkCreateDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsBulkCreateListRequest) (*DeliverNoticeGoodsDetailsListResponse, error)
	BulkCreateSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsBulkCreateListRequest) (*SupplierTradeGoodsDetailsListResponse, error)
	Create(context.Context, *DeliverNoticeRequest) (*DeliverNoticeResponse, error)
	CreateCtmVendorAddr(context.Context, *CtmVendorAddrCreateRequest) (*CtmVendorAddrResponse, error)
	CreateDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsCreateRequest) (*DeliverNoticeGoodsDetailsResponse, error)
	CreateKeyCtm(context.Context, *KeyCtmCreateRequest) (*KeyCtmResponse, error)
	CreateKeyVendor(context.Context, *KeyVendorCreateRequest) (*KeyVendorResponse, error)
	CreateSupplierTrade(context.Context, *SupplierTradeCreateRequest) (*SupplierTradeResponse, error)
	CreateSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsCreateRequest) (*SupplierTradeGoodsDetailsResponse, error)
	CreateSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsCreateRequest) (*SupplierTradeStockOutDetailsResponse, error)
	CreateVendorOperator(context.Context, *VendorOperatorCreateRequest) (*VendorOperatorResponse, error)
	DeliverNoticeOptions(context.Context, *DeliverNoticeOptionsRequest) (*DeliverNoticeOptionsResponse, error)
	Destroy(context.Context, *DeliverNoticeDestroyRequest) (*emptypb.Empty, error)
	DestroyCtmVendorAddr(context.Context, *CtmVendorAddrDestroyRequest) (*emptypb.Empty, error)
	DestroyDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsDestroyRequest) (*emptypb.Empty, error)
	DestroyKeyCtm(context.Context, *KeyCtmDestroyRequest) (*emptypb.Empty, error)
	DestroyKeyVendor(context.Context, *KeyVendorDestroyRequest) (*emptypb.Empty, error)
	DestroySupplierTrade(context.Context, *SupplierTradeDestroyRequest) (*emptypb.Empty, error)
	DestroySupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsDestroyRequest) (*emptypb.Empty, error)
	DestroySupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsDestroyRequest) (*emptypb.Empty, error)
	DestroyVendorOperator(context.Context, *VendorOperatorDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *DeliverNoticeListRequest) (*DeliverNoticeListResponse, error)
	ListCtmVendorAddr(context.Context, *CtmVendorAddrListRequest) (*CtmVendorAddrListResponse, error)
	ListDeliverNoticeEpcScanStorage(context.Context, *DeliverNoticeEpcScanStorageListRequest) (*DeliverNoticeEpcScanStorageListResponse, error)
	ListDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsListRequest) (*DeliverNoticeGoodsDetailsListResponse, error)
	ListKeyCtm(context.Context, *KeyCtmListRequest) (*KeyCtmListResponse, error)
	ListKeyVendor(context.Context, *KeyVendorListRequest) (*KeyVendorListResponse, error)
	ListSupplierTrade(context.Context, *SupplierTradeListRequest) (*SupplierTradeListResponse, error)
	ListSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsListRequest) (*SupplierTradeGoodsDetailsListResponse, error)
	ListSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsListRequest) (*SupplierTradeStockOutDetailsListResponse, error)
	ListVendorOperator(context.Context, *VendorOperatorListRequest) (*VendorOperatorListResponse, error)
	NoticeNextDid(context.Context, *NoticeNextDidRequest) (*NoticeNextDidResponse, error)
	NoticeStatusCount(context.Context, *NoticeStatusCountRequest) (*NoticeStatusCountListResponse, error)
	PartialUpdate(context.Context, *DeliverNoticePartialUpdateRequest) (*DeliverNoticeResponse, error)
	PurchaseOrder(context.Context, *PurchaseOrderRequest) (*PurchaseOrderListResponse, error)
	Retrieve(context.Context, *DeliverNoticeRetrieveRequest) (*DeliverNoticeResponse, error)
	RetrieveCtmVendorAddr(context.Context, *CtmVendorAddrRetrieveRequest) (*CtmVendorAddrResponse, error)
	RetrieveDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsRetrieveRequest) (*DeliverNoticeGoodsDetailsResponse, error)
	RetrieveKeyCtm(context.Context, *KeyCtmRetrieveRequest) (*KeyCtmResponse, error)
	RetrieveKeyVendor(context.Context, *KeyVendorRetrieveRequest) (*KeyVendorResponse, error)
	RetrieveSupplierTrade(context.Context, *SupplierTradeRetrieveRequest) (*SupplierTradeResponse, error)
	RetrieveSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsRetrieveRequest) (*SupplierTradeGoodsDetailsResponse, error)
	RetrieveSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsRetrieveRequest) (*SupplierTradeStockOutDetailsResponse, error)
	RetrieveVendorOperator(context.Context, *VendorOperatorRetrieveRequest) (*VendorOperatorResponse, error)
	SaveDeliverNoticeEpcScanStorage(context.Context, *DeliverNoticeEpcScanStorageRequest) (*DeliverNoticeEpcScanStorageResponse, error)
	ShopOptionsWdt(context.Context, *WdtShopListRequest) (*WdtShopListResponse, error)
	StockOptionsWdt(context.Context, *WdtStockListRequest) (*WdtStockListResponse, error)
	SupplierTradeNextTid(context.Context, *SupplierTradeNextTidRequest) (*NoticeNextDidResponse, error)
	SupplierTradeProcess(context.Context, *DeliverNoticeSupplierTradeProcessRequest) (*emptypb.Empty, error)
	Update(context.Context, *DeliverNoticeRequest) (*DeliverNoticeResponse, error)
	UpdateCtmVendorAddr(context.Context, *CtmVendorAddrUpdateRequest) (*CtmVendorAddrResponse, error)
	UpdateDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsUpdateRequest) (*DeliverNoticeGoodsDetailsResponse, error)
	UpdateKeyCtm(context.Context, *KeyCtmUpdateRequest) (*KeyCtmResponse, error)
	UpdateKeyVendor(context.Context, *KeyVendorUpdateRequest) (*KeyVendorResponse, error)
	UpdateSupplierTrade(context.Context, *SupplierTradeUpdateRequest) (*SupplierTradeResponse, error)
	UpdateSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsUpdateRequest) (*SupplierTradeGoodsDetailsResponse, error)
	UpdateSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsUpdateRequest) (*SupplierTradeStockOutDetailsResponse, error)
	UpdateVendorOperator(context.Context, *VendorOperatorUpdateRequest) (*VendorOperatorResponse, error)
	mustEmbedUnimplementedDeliverNoticeControllerServer()
}

// UnimplementedDeliverNoticeControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDeliverNoticeControllerServer struct {
}

func (UnimplementedDeliverNoticeControllerServer) BulkCreateDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsBulkCreateListRequest) (*DeliverNoticeGoodsDetailsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateDeliverNoticeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) BulkCreateSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsBulkCreateListRequest) (*SupplierTradeGoodsDetailsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateSupplierTradeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) Create(context.Context, *DeliverNoticeRequest) (*DeliverNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateCtmVendorAddr(context.Context, *CtmVendorAddrCreateRequest) (*CtmVendorAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCtmVendorAddr not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsCreateRequest) (*DeliverNoticeGoodsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeliverNoticeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateKeyCtm(context.Context, *KeyCtmCreateRequest) (*KeyCtmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyCtm not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateKeyVendor(context.Context, *KeyVendorCreateRequest) (*KeyVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyVendor not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateSupplierTrade(context.Context, *SupplierTradeCreateRequest) (*SupplierTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplierTrade not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsCreateRequest) (*SupplierTradeGoodsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplierTradeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsCreateRequest) (*SupplierTradeStockOutDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplierTradeStockOutDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) CreateVendorOperator(context.Context, *VendorOperatorCreateRequest) (*VendorOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendorOperator not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DeliverNoticeOptions(context.Context, *DeliverNoticeOptionsRequest) (*DeliverNoticeOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverNoticeOptions not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) Destroy(context.Context, *DeliverNoticeDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroyCtmVendorAddr(context.Context, *CtmVendorAddrDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCtmVendorAddr not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroyDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyDeliverNoticeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroyKeyCtm(context.Context, *KeyCtmDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKeyCtm not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroyKeyVendor(context.Context, *KeyVendorDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKeyVendor not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroySupplierTrade(context.Context, *SupplierTradeDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySupplierTrade not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroySupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySupplierTradeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroySupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySupplierTradeStockOutDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) DestroyVendorOperator(context.Context, *VendorOperatorDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyVendorOperator not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) List(context.Context, *DeliverNoticeListRequest) (*DeliverNoticeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListCtmVendorAddr(context.Context, *CtmVendorAddrListRequest) (*CtmVendorAddrListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCtmVendorAddr not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListDeliverNoticeEpcScanStorage(context.Context, *DeliverNoticeEpcScanStorageListRequest) (*DeliverNoticeEpcScanStorageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliverNoticeEpcScanStorage not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsListRequest) (*DeliverNoticeGoodsDetailsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliverNoticeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListKeyCtm(context.Context, *KeyCtmListRequest) (*KeyCtmListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyCtm not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListKeyVendor(context.Context, *KeyVendorListRequest) (*KeyVendorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyVendor not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListSupplierTrade(context.Context, *SupplierTradeListRequest) (*SupplierTradeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupplierTrade not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsListRequest) (*SupplierTradeGoodsDetailsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupplierTradeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsListRequest) (*SupplierTradeStockOutDetailsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupplierTradeStockOutDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ListVendorOperator(context.Context, *VendorOperatorListRequest) (*VendorOperatorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVendorOperator not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) NoticeNextDid(context.Context, *NoticeNextDidRequest) (*NoticeNextDidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeNextDid not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) NoticeStatusCount(context.Context, *NoticeStatusCountRequest) (*NoticeStatusCountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeStatusCount not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) PartialUpdate(context.Context, *DeliverNoticePartialUpdateRequest) (*DeliverNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) PurchaseOrder(context.Context, *PurchaseOrderRequest) (*PurchaseOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseOrder not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) Retrieve(context.Context, *DeliverNoticeRetrieveRequest) (*DeliverNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveCtmVendorAddr(context.Context, *CtmVendorAddrRetrieveRequest) (*CtmVendorAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCtmVendorAddr not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsRetrieveRequest) (*DeliverNoticeGoodsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveDeliverNoticeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveKeyCtm(context.Context, *KeyCtmRetrieveRequest) (*KeyCtmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKeyCtm not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveKeyVendor(context.Context, *KeyVendorRetrieveRequest) (*KeyVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKeyVendor not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveSupplierTrade(context.Context, *SupplierTradeRetrieveRequest) (*SupplierTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSupplierTrade not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsRetrieveRequest) (*SupplierTradeGoodsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSupplierTradeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsRetrieveRequest) (*SupplierTradeStockOutDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSupplierTradeStockOutDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) RetrieveVendorOperator(context.Context, *VendorOperatorRetrieveRequest) (*VendorOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveVendorOperator not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) SaveDeliverNoticeEpcScanStorage(context.Context, *DeliverNoticeEpcScanStorageRequest) (*DeliverNoticeEpcScanStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDeliverNoticeEpcScanStorage not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) ShopOptionsWdt(context.Context, *WdtShopListRequest) (*WdtShopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopOptionsWdt not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) StockOptionsWdt(context.Context, *WdtStockListRequest) (*WdtStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockOptionsWdt not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) SupplierTradeNextTid(context.Context, *SupplierTradeNextTidRequest) (*NoticeNextDidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierTradeNextTid not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) SupplierTradeProcess(context.Context, *DeliverNoticeSupplierTradeProcessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierTradeProcess not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) Update(context.Context, *DeliverNoticeRequest) (*DeliverNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateCtmVendorAddr(context.Context, *CtmVendorAddrUpdateRequest) (*CtmVendorAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCtmVendorAddr not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateDeliverNoticeGoodsDetails(context.Context, *DeliverNoticeGoodsDetailsUpdateRequest) (*DeliverNoticeGoodsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeliverNoticeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateKeyCtm(context.Context, *KeyCtmUpdateRequest) (*KeyCtmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyCtm not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateKeyVendor(context.Context, *KeyVendorUpdateRequest) (*KeyVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyVendor not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateSupplierTrade(context.Context, *SupplierTradeUpdateRequest) (*SupplierTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplierTrade not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateSupplierTradeGoodsDetails(context.Context, *SupplierTradeGoodsDetailsUpdateRequest) (*SupplierTradeGoodsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplierTradeGoodsDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateSupplierTradeStockOutDetails(context.Context, *SupplierTradeStockOutDetailsUpdateRequest) (*SupplierTradeStockOutDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplierTradeStockOutDetails not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) UpdateVendorOperator(context.Context, *VendorOperatorUpdateRequest) (*VendorOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVendorOperator not implemented")
}
func (UnimplementedDeliverNoticeControllerServer) mustEmbedUnimplementedDeliverNoticeControllerServer() {
}

// UnsafeDeliverNoticeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliverNoticeControllerServer will
// result in compilation errors.
type UnsafeDeliverNoticeControllerServer interface {
	mustEmbedUnimplementedDeliverNoticeControllerServer()
}

func RegisterDeliverNoticeControllerServer(s grpc.ServiceRegistrar, srv DeliverNoticeControllerServer) {
	s.RegisterService(&DeliverNoticeController_ServiceDesc, srv)
}

func _DeliverNoticeController_BulkCreateDeliverNoticeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeGoodsDetailsBulkCreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).BulkCreateDeliverNoticeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_BulkCreateDeliverNoticeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).BulkCreateDeliverNoticeGoodsDetails(ctx, req.(*DeliverNoticeGoodsDetailsBulkCreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_BulkCreateSupplierTradeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeGoodsDetailsBulkCreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).BulkCreateSupplierTradeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_BulkCreateSupplierTradeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).BulkCreateSupplierTradeGoodsDetails(ctx, req.(*SupplierTradeGoodsDetailsBulkCreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).Create(ctx, req.(*DeliverNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateCtmVendorAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmVendorAddrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateCtmVendorAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateCtmVendorAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateCtmVendorAddr(ctx, req.(*CtmVendorAddrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateDeliverNoticeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeGoodsDetailsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateDeliverNoticeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateDeliverNoticeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateDeliverNoticeGoodsDetails(ctx, req.(*DeliverNoticeGoodsDetailsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateKeyCtm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCtmCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateKeyCtm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateKeyCtm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateKeyCtm(ctx, req.(*KeyCtmCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateKeyVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVendorCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateKeyVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateKeyVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateKeyVendor(ctx, req.(*KeyVendorCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateSupplierTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateSupplierTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateSupplierTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateSupplierTrade(ctx, req.(*SupplierTradeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateSupplierTradeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeGoodsDetailsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateSupplierTradeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateSupplierTradeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateSupplierTradeGoodsDetails(ctx, req.(*SupplierTradeGoodsDetailsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateSupplierTradeStockOutDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeStockOutDetailsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateSupplierTradeStockOutDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateSupplierTradeStockOutDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateSupplierTradeStockOutDetails(ctx, req.(*SupplierTradeStockOutDetailsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_CreateVendorOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorOperatorCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).CreateVendorOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_CreateVendorOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).CreateVendorOperator(ctx, req.(*VendorOperatorCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DeliverNoticeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DeliverNoticeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DeliverNoticeOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DeliverNoticeOptions(ctx, req.(*DeliverNoticeOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).Destroy(ctx, req.(*DeliverNoticeDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroyCtmVendorAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmVendorAddrDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroyCtmVendorAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroyCtmVendorAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroyCtmVendorAddr(ctx, req.(*CtmVendorAddrDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroyDeliverNoticeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeGoodsDetailsDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroyDeliverNoticeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroyDeliverNoticeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroyDeliverNoticeGoodsDetails(ctx, req.(*DeliverNoticeGoodsDetailsDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroyKeyCtm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCtmDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroyKeyCtm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroyKeyCtm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroyKeyCtm(ctx, req.(*KeyCtmDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroyKeyVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVendorDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroyKeyVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroyKeyVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroyKeyVendor(ctx, req.(*KeyVendorDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroySupplierTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroySupplierTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroySupplierTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroySupplierTrade(ctx, req.(*SupplierTradeDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroySupplierTradeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeGoodsDetailsDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroySupplierTradeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroySupplierTradeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroySupplierTradeGoodsDetails(ctx, req.(*SupplierTradeGoodsDetailsDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroySupplierTradeStockOutDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeStockOutDetailsDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroySupplierTradeStockOutDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroySupplierTradeStockOutDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroySupplierTradeStockOutDetails(ctx, req.(*SupplierTradeStockOutDetailsDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_DestroyVendorOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorOperatorDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).DestroyVendorOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_DestroyVendorOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).DestroyVendorOperator(ctx, req.(*VendorOperatorDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).List(ctx, req.(*DeliverNoticeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListCtmVendorAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmVendorAddrListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListCtmVendorAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListCtmVendorAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListCtmVendorAddr(ctx, req.(*CtmVendorAddrListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListDeliverNoticeEpcScanStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeEpcScanStorageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListDeliverNoticeEpcScanStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListDeliverNoticeEpcScanStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListDeliverNoticeEpcScanStorage(ctx, req.(*DeliverNoticeEpcScanStorageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListDeliverNoticeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeGoodsDetailsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListDeliverNoticeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListDeliverNoticeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListDeliverNoticeGoodsDetails(ctx, req.(*DeliverNoticeGoodsDetailsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListKeyCtm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCtmListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListKeyCtm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListKeyCtm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListKeyCtm(ctx, req.(*KeyCtmListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListKeyVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVendorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListKeyVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListKeyVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListKeyVendor(ctx, req.(*KeyVendorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListSupplierTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListSupplierTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListSupplierTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListSupplierTrade(ctx, req.(*SupplierTradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListSupplierTradeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeGoodsDetailsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListSupplierTradeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListSupplierTradeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListSupplierTradeGoodsDetails(ctx, req.(*SupplierTradeGoodsDetailsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListSupplierTradeStockOutDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeStockOutDetailsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListSupplierTradeStockOutDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListSupplierTradeStockOutDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListSupplierTradeStockOutDetails(ctx, req.(*SupplierTradeStockOutDetailsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ListVendorOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorOperatorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ListVendorOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ListVendorOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ListVendorOperator(ctx, req.(*VendorOperatorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_NoticeNextDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeNextDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).NoticeNextDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_NoticeNextDid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).NoticeNextDid(ctx, req.(*NoticeNextDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_NoticeStatusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeStatusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).NoticeStatusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_NoticeStatusCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).NoticeStatusCount(ctx, req.(*NoticeStatusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).PartialUpdate(ctx, req.(*DeliverNoticePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_PurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).PurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_PurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).PurchaseOrder(ctx, req.(*PurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).Retrieve(ctx, req.(*DeliverNoticeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveCtmVendorAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmVendorAddrRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveCtmVendorAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveCtmVendorAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveCtmVendorAddr(ctx, req.(*CtmVendorAddrRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveDeliverNoticeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeGoodsDetailsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveDeliverNoticeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveDeliverNoticeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveDeliverNoticeGoodsDetails(ctx, req.(*DeliverNoticeGoodsDetailsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveKeyCtm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCtmRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveKeyCtm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveKeyCtm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveKeyCtm(ctx, req.(*KeyCtmRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveKeyVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVendorRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveKeyVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveKeyVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveKeyVendor(ctx, req.(*KeyVendorRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveSupplierTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveSupplierTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveSupplierTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveSupplierTrade(ctx, req.(*SupplierTradeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveSupplierTradeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeGoodsDetailsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveSupplierTradeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveSupplierTradeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveSupplierTradeGoodsDetails(ctx, req.(*SupplierTradeGoodsDetailsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveSupplierTradeStockOutDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeStockOutDetailsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveSupplierTradeStockOutDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveSupplierTradeStockOutDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveSupplierTradeStockOutDetails(ctx, req.(*SupplierTradeStockOutDetailsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_RetrieveVendorOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorOperatorRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).RetrieveVendorOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_RetrieveVendorOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).RetrieveVendorOperator(ctx, req.(*VendorOperatorRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_SaveDeliverNoticeEpcScanStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeEpcScanStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).SaveDeliverNoticeEpcScanStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_SaveDeliverNoticeEpcScanStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).SaveDeliverNoticeEpcScanStorage(ctx, req.(*DeliverNoticeEpcScanStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_ShopOptionsWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtShopListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).ShopOptionsWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_ShopOptionsWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).ShopOptionsWdt(ctx, req.(*WdtShopListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_StockOptionsWdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WdtStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).StockOptionsWdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_StockOptionsWdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).StockOptionsWdt(ctx, req.(*WdtStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_SupplierTradeNextTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeNextTidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).SupplierTradeNextTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_SupplierTradeNextTid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).SupplierTradeNextTid(ctx, req.(*SupplierTradeNextTidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_SupplierTradeProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeSupplierTradeProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).SupplierTradeProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_SupplierTradeProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).SupplierTradeProcess(ctx, req.(*DeliverNoticeSupplierTradeProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).Update(ctx, req.(*DeliverNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateCtmVendorAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtmVendorAddrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateCtmVendorAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateCtmVendorAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateCtmVendorAddr(ctx, req.(*CtmVendorAddrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateDeliverNoticeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverNoticeGoodsDetailsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateDeliverNoticeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateDeliverNoticeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateDeliverNoticeGoodsDetails(ctx, req.(*DeliverNoticeGoodsDetailsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateKeyCtm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyCtmUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateKeyCtm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateKeyCtm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateKeyCtm(ctx, req.(*KeyCtmUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateKeyVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVendorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateKeyVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateKeyVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateKeyVendor(ctx, req.(*KeyVendorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateSupplierTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateSupplierTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateSupplierTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateSupplierTrade(ctx, req.(*SupplierTradeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateSupplierTradeGoodsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeGoodsDetailsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateSupplierTradeGoodsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateSupplierTradeGoodsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateSupplierTradeGoodsDetails(ctx, req.(*SupplierTradeGoodsDetailsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateSupplierTradeStockOutDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierTradeStockOutDetailsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateSupplierTradeStockOutDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateSupplierTradeStockOutDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateSupplierTradeStockOutDetails(ctx, req.(*SupplierTradeStockOutDetailsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliverNoticeController_UpdateVendorOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorOperatorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliverNoticeControllerServer).UpdateVendorOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliverNoticeController_UpdateVendorOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliverNoticeControllerServer).UpdateVendorOperator(ctx, req.(*VendorOperatorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliverNoticeController_ServiceDesc is the grpc.ServiceDesc for DeliverNoticeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliverNoticeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfid_service.rfid_ito.DeliverNoticeController",
	HandlerType: (*DeliverNoticeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BulkCreateDeliverNoticeGoodsDetails",
			Handler:    _DeliverNoticeController_BulkCreateDeliverNoticeGoodsDetails_Handler,
		},
		{
			MethodName: "BulkCreateSupplierTradeGoodsDetails",
			Handler:    _DeliverNoticeController_BulkCreateSupplierTradeGoodsDetails_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DeliverNoticeController_Create_Handler,
		},
		{
			MethodName: "CreateCtmVendorAddr",
			Handler:    _DeliverNoticeController_CreateCtmVendorAddr_Handler,
		},
		{
			MethodName: "CreateDeliverNoticeGoodsDetails",
			Handler:    _DeliverNoticeController_CreateDeliverNoticeGoodsDetails_Handler,
		},
		{
			MethodName: "CreateKeyCtm",
			Handler:    _DeliverNoticeController_CreateKeyCtm_Handler,
		},
		{
			MethodName: "CreateKeyVendor",
			Handler:    _DeliverNoticeController_CreateKeyVendor_Handler,
		},
		{
			MethodName: "CreateSupplierTrade",
			Handler:    _DeliverNoticeController_CreateSupplierTrade_Handler,
		},
		{
			MethodName: "CreateSupplierTradeGoodsDetails",
			Handler:    _DeliverNoticeController_CreateSupplierTradeGoodsDetails_Handler,
		},
		{
			MethodName: "CreateSupplierTradeStockOutDetails",
			Handler:    _DeliverNoticeController_CreateSupplierTradeStockOutDetails_Handler,
		},
		{
			MethodName: "CreateVendorOperator",
			Handler:    _DeliverNoticeController_CreateVendorOperator_Handler,
		},
		{
			MethodName: "DeliverNoticeOptions",
			Handler:    _DeliverNoticeController_DeliverNoticeOptions_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _DeliverNoticeController_Destroy_Handler,
		},
		{
			MethodName: "DestroyCtmVendorAddr",
			Handler:    _DeliverNoticeController_DestroyCtmVendorAddr_Handler,
		},
		{
			MethodName: "DestroyDeliverNoticeGoodsDetails",
			Handler:    _DeliverNoticeController_DestroyDeliverNoticeGoodsDetails_Handler,
		},
		{
			MethodName: "DestroyKeyCtm",
			Handler:    _DeliverNoticeController_DestroyKeyCtm_Handler,
		},
		{
			MethodName: "DestroyKeyVendor",
			Handler:    _DeliverNoticeController_DestroyKeyVendor_Handler,
		},
		{
			MethodName: "DestroySupplierTrade",
			Handler:    _DeliverNoticeController_DestroySupplierTrade_Handler,
		},
		{
			MethodName: "DestroySupplierTradeGoodsDetails",
			Handler:    _DeliverNoticeController_DestroySupplierTradeGoodsDetails_Handler,
		},
		{
			MethodName: "DestroySupplierTradeStockOutDetails",
			Handler:    _DeliverNoticeController_DestroySupplierTradeStockOutDetails_Handler,
		},
		{
			MethodName: "DestroyVendorOperator",
			Handler:    _DeliverNoticeController_DestroyVendorOperator_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DeliverNoticeController_List_Handler,
		},
		{
			MethodName: "ListCtmVendorAddr",
			Handler:    _DeliverNoticeController_ListCtmVendorAddr_Handler,
		},
		{
			MethodName: "ListDeliverNoticeEpcScanStorage",
			Handler:    _DeliverNoticeController_ListDeliverNoticeEpcScanStorage_Handler,
		},
		{
			MethodName: "ListDeliverNoticeGoodsDetails",
			Handler:    _DeliverNoticeController_ListDeliverNoticeGoodsDetails_Handler,
		},
		{
			MethodName: "ListKeyCtm",
			Handler:    _DeliverNoticeController_ListKeyCtm_Handler,
		},
		{
			MethodName: "ListKeyVendor",
			Handler:    _DeliverNoticeController_ListKeyVendor_Handler,
		},
		{
			MethodName: "ListSupplierTrade",
			Handler:    _DeliverNoticeController_ListSupplierTrade_Handler,
		},
		{
			MethodName: "ListSupplierTradeGoodsDetails",
			Handler:    _DeliverNoticeController_ListSupplierTradeGoodsDetails_Handler,
		},
		{
			MethodName: "ListSupplierTradeStockOutDetails",
			Handler:    _DeliverNoticeController_ListSupplierTradeStockOutDetails_Handler,
		},
		{
			MethodName: "ListVendorOperator",
			Handler:    _DeliverNoticeController_ListVendorOperator_Handler,
		},
		{
			MethodName: "NoticeNextDid",
			Handler:    _DeliverNoticeController_NoticeNextDid_Handler,
		},
		{
			MethodName: "NoticeStatusCount",
			Handler:    _DeliverNoticeController_NoticeStatusCount_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _DeliverNoticeController_PartialUpdate_Handler,
		},
		{
			MethodName: "PurchaseOrder",
			Handler:    _DeliverNoticeController_PurchaseOrder_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _DeliverNoticeController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveCtmVendorAddr",
			Handler:    _DeliverNoticeController_RetrieveCtmVendorAddr_Handler,
		},
		{
			MethodName: "RetrieveDeliverNoticeGoodsDetails",
			Handler:    _DeliverNoticeController_RetrieveDeliverNoticeGoodsDetails_Handler,
		},
		{
			MethodName: "RetrieveKeyCtm",
			Handler:    _DeliverNoticeController_RetrieveKeyCtm_Handler,
		},
		{
			MethodName: "RetrieveKeyVendor",
			Handler:    _DeliverNoticeController_RetrieveKeyVendor_Handler,
		},
		{
			MethodName: "RetrieveSupplierTrade",
			Handler:    _DeliverNoticeController_RetrieveSupplierTrade_Handler,
		},
		{
			MethodName: "RetrieveSupplierTradeGoodsDetails",
			Handler:    _DeliverNoticeController_RetrieveSupplierTradeGoodsDetails_Handler,
		},
		{
			MethodName: "RetrieveSupplierTradeStockOutDetails",
			Handler:    _DeliverNoticeController_RetrieveSupplierTradeStockOutDetails_Handler,
		},
		{
			MethodName: "RetrieveVendorOperator",
			Handler:    _DeliverNoticeController_RetrieveVendorOperator_Handler,
		},
		{
			MethodName: "SaveDeliverNoticeEpcScanStorage",
			Handler:    _DeliverNoticeController_SaveDeliverNoticeEpcScanStorage_Handler,
		},
		{
			MethodName: "ShopOptionsWdt",
			Handler:    _DeliverNoticeController_ShopOptionsWdt_Handler,
		},
		{
			MethodName: "StockOptionsWdt",
			Handler:    _DeliverNoticeController_StockOptionsWdt_Handler,
		},
		{
			MethodName: "SupplierTradeNextTid",
			Handler:    _DeliverNoticeController_SupplierTradeNextTid_Handler,
		},
		{
			MethodName: "SupplierTradeProcess",
			Handler:    _DeliverNoticeController_SupplierTradeProcess_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeliverNoticeController_Update_Handler,
		},
		{
			MethodName: "UpdateCtmVendorAddr",
			Handler:    _DeliverNoticeController_UpdateCtmVendorAddr_Handler,
		},
		{
			MethodName: "UpdateDeliverNoticeGoodsDetails",
			Handler:    _DeliverNoticeController_UpdateDeliverNoticeGoodsDetails_Handler,
		},
		{
			MethodName: "UpdateKeyCtm",
			Handler:    _DeliverNoticeController_UpdateKeyCtm_Handler,
		},
		{
			MethodName: "UpdateKeyVendor",
			Handler:    _DeliverNoticeController_UpdateKeyVendor_Handler,
		},
		{
			MethodName: "UpdateSupplierTrade",
			Handler:    _DeliverNoticeController_UpdateSupplierTrade_Handler,
		},
		{
			MethodName: "UpdateSupplierTradeGoodsDetails",
			Handler:    _DeliverNoticeController_UpdateSupplierTradeGoodsDetails_Handler,
		},
		{
			MethodName: "UpdateSupplierTradeStockOutDetails",
			Handler:    _DeliverNoticeController_UpdateSupplierTradeStockOutDetails_Handler,
		},
		{
			MethodName: "UpdateVendorOperator",
			Handler:    _DeliverNoticeController_UpdateVendorOperator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rfid_ito.proto",
}

const (
	ServiceController_BulkCreateGoodsDeliver_FullMethodName       = "/rfid_service.rfid_ito.ServiceController/BulkCreateGoodsDeliver"
	ServiceController_Create_FullMethodName                       = "/rfid_service.rfid_ito.ServiceController/Create"
	ServiceController_CreateGoodsDeliver_FullMethodName           = "/rfid_service.rfid_ito.ServiceController/CreateGoodsDeliver"
	ServiceController_CreateServiceConf_FullMethodName            = "/rfid_service.rfid_ito.ServiceController/CreateServiceConf"
	ServiceController_CreateServiceConfSolution_FullMethodName    = "/rfid_service.rfid_ito.ServiceController/CreateServiceConfSolution"
	ServiceController_CreateServiceConfWarehouse_FullMethodName   = "/rfid_service.rfid_ito.ServiceController/CreateServiceConfWarehouse"
	ServiceController_CreateServiceReason_FullMethodName          = "/rfid_service.rfid_ito.ServiceController/CreateServiceReason"
	ServiceController_Destroy_FullMethodName                      = "/rfid_service.rfid_ito.ServiceController/Destroy"
	ServiceController_DestroyGoodsDeliver_FullMethodName          = "/rfid_service.rfid_ito.ServiceController/DestroyGoodsDeliver"
	ServiceController_DestroyServiceConf_FullMethodName           = "/rfid_service.rfid_ito.ServiceController/DestroyServiceConf"
	ServiceController_DestroyServiceConfSolution_FullMethodName   = "/rfid_service.rfid_ito.ServiceController/DestroyServiceConfSolution"
	ServiceController_DestroyServiceConfWarehouse_FullMethodName  = "/rfid_service.rfid_ito.ServiceController/DestroyServiceConfWarehouse"
	ServiceController_DestroyServiceReason_FullMethodName         = "/rfid_service.rfid_ito.ServiceController/DestroyServiceReason"
	ServiceController_List_FullMethodName                         = "/rfid_service.rfid_ito.ServiceController/List"
	ServiceController_ListGoodsDeliver_FullMethodName             = "/rfid_service.rfid_ito.ServiceController/ListGoodsDeliver"
	ServiceController_ListServiceConf_FullMethodName              = "/rfid_service.rfid_ito.ServiceController/ListServiceConf"
	ServiceController_ListServiceConfSolution_FullMethodName      = "/rfid_service.rfid_ito.ServiceController/ListServiceConfSolution"
	ServiceController_ListServiceConfWarehouse_FullMethodName     = "/rfid_service.rfid_ito.ServiceController/ListServiceConfWarehouse"
	ServiceController_ListServiceReason_FullMethodName            = "/rfid_service.rfid_ito.ServiceController/ListServiceReason"
	ServiceController_PartialUpdate_FullMethodName                = "/rfid_service.rfid_ito.ServiceController/PartialUpdate"
	ServiceController_Retrieve_FullMethodName                     = "/rfid_service.rfid_ito.ServiceController/Retrieve"
	ServiceController_RetrieveGoodsDeliver_FullMethodName         = "/rfid_service.rfid_ito.ServiceController/RetrieveGoodsDeliver"
	ServiceController_RetrieveServiceConf_FullMethodName          = "/rfid_service.rfid_ito.ServiceController/RetrieveServiceConf"
	ServiceController_RetrieveServiceConfSolution_FullMethodName  = "/rfid_service.rfid_ito.ServiceController/RetrieveServiceConfSolution"
	ServiceController_RetrieveServiceConfWarehouse_FullMethodName = "/rfid_service.rfid_ito.ServiceController/RetrieveServiceConfWarehouse"
	ServiceController_RetrieveServiceReason_FullMethodName        = "/rfid_service.rfid_ito.ServiceController/RetrieveServiceReason"
	ServiceController_ServiceOptions_FullMethodName               = "/rfid_service.rfid_ito.ServiceController/ServiceOptions"
	ServiceController_ServiceStatusCount_FullMethodName           = "/rfid_service.rfid_ito.ServiceController/ServiceStatusCount"
	ServiceController_Update_FullMethodName                       = "/rfid_service.rfid_ito.ServiceController/Update"
	ServiceController_UpdateGoodsDeliver_FullMethodName           = "/rfid_service.rfid_ito.ServiceController/UpdateGoodsDeliver"
	ServiceController_UpdateServiceConf_FullMethodName            = "/rfid_service.rfid_ito.ServiceController/UpdateServiceConf"
	ServiceController_UpdateServiceConfSolution_FullMethodName    = "/rfid_service.rfid_ito.ServiceController/UpdateServiceConfSolution"
	ServiceController_UpdateServiceConfWarehouse_FullMethodName   = "/rfid_service.rfid_ito.ServiceController/UpdateServiceConfWarehouse"
	ServiceController_UpdateServiceReason_FullMethodName          = "/rfid_service.rfid_ito.ServiceController/UpdateServiceReason"
)

// ServiceControllerClient is the client API for ServiceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceControllerClient interface {
	BulkCreateGoodsDeliver(ctx context.Context, in *BulkCreateGoodsDeliverListRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailListResponse, error)
	Create(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	CreateGoodsDeliver(ctx context.Context, in *CreateGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailResponse, error)
	CreateServiceConf(ctx context.Context, in *CreateServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfResponse, error)
	CreateServiceConfSolution(ctx context.Context, in *CreateServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionResponse, error)
	CreateServiceConfWarehouse(ctx context.Context, in *CreateServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseResponse, error)
	CreateServiceReason(ctx context.Context, in *CreateServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonResponse, error)
	Destroy(ctx context.Context, in *ServiceDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyGoodsDeliver(ctx context.Context, in *DestroyGoodsDeliverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyServiceConf(ctx context.Context, in *DestroyServiceConfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyServiceConfSolution(ctx context.Context, in *DestroyServiceConfSolutionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyServiceConfWarehouse(ctx context.Context, in *DestroyServiceConfWarehouseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyServiceReason(ctx context.Context, in *DestroyServiceReasonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error)
	ListGoodsDeliver(ctx context.Context, in *ListGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailListResponse, error)
	ListServiceConf(ctx context.Context, in *ListServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfListResponse, error)
	ListServiceConfSolution(ctx context.Context, in *ListServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionListResponse, error)
	ListServiceConfWarehouse(ctx context.Context, in *ListServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseListResponse, error)
	ListServiceReason(ctx context.Context, in *ListServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonListResponse, error)
	PartialUpdate(ctx context.Context, in *ServicePartialUpdateRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	Retrieve(ctx context.Context, in *ServiceRetrieveRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	RetrieveGoodsDeliver(ctx context.Context, in *RetrieveGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailResponse, error)
	RetrieveServiceConf(ctx context.Context, in *RetrieveServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfResponse, error)
	RetrieveServiceConfSolution(ctx context.Context, in *RetrieveServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionResponse, error)
	RetrieveServiceConfWarehouse(ctx context.Context, in *RetrieveServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseResponse, error)
	RetrieveServiceReason(ctx context.Context, in *RetrieveServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonResponse, error)
	ServiceOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceOptionsResponse, error)
	ServiceStatusCount(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*LabelNumberValueListResponse, error)
	Update(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	UpdateGoodsDeliver(ctx context.Context, in *UpdateGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailResponse, error)
	UpdateServiceConf(ctx context.Context, in *UpdateServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfResponse, error)
	UpdateServiceConfSolution(ctx context.Context, in *UpdateServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionResponse, error)
	UpdateServiceConfWarehouse(ctx context.Context, in *UpdateServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseResponse, error)
	UpdateServiceReason(ctx context.Context, in *UpdateServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonResponse, error)
}

type serviceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceControllerClient(cc grpc.ClientConnInterface) ServiceControllerClient {
	return &serviceControllerClient{cc}
}

func (c *serviceControllerClient) BulkCreateGoodsDeliver(ctx context.Context, in *BulkCreateGoodsDeliverListRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailListResponse, error) {
	out := new(ServiceGoodsDetailListResponse)
	err := c.cc.Invoke(ctx, ServiceController_BulkCreateGoodsDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) Create(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, ServiceController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) CreateGoodsDeliver(ctx context.Context, in *CreateGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailResponse, error) {
	out := new(ServiceGoodsDetailResponse)
	err := c.cc.Invoke(ctx, ServiceController_CreateGoodsDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) CreateServiceConf(ctx context.Context, in *CreateServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfResponse, error) {
	out := new(ServiceConfResponse)
	err := c.cc.Invoke(ctx, ServiceController_CreateServiceConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) CreateServiceConfSolution(ctx context.Context, in *CreateServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionResponse, error) {
	out := new(ServiceConfSolutionResponse)
	err := c.cc.Invoke(ctx, ServiceController_CreateServiceConfSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) CreateServiceConfWarehouse(ctx context.Context, in *CreateServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseResponse, error) {
	out := new(ServiceConfWarehouseResponse)
	err := c.cc.Invoke(ctx, ServiceController_CreateServiceConfWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) CreateServiceReason(ctx context.Context, in *CreateServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonResponse, error) {
	out := new(ServiceReasonResponse)
	err := c.cc.Invoke(ctx, ServiceController_CreateServiceReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) Destroy(ctx context.Context, in *ServiceDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) DestroyGoodsDeliver(ctx context.Context, in *DestroyGoodsDeliverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceController_DestroyGoodsDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) DestroyServiceConf(ctx context.Context, in *DestroyServiceConfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceController_DestroyServiceConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) DestroyServiceConfSolution(ctx context.Context, in *DestroyServiceConfSolutionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceController_DestroyServiceConfSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) DestroyServiceConfWarehouse(ctx context.Context, in *DestroyServiceConfWarehouseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceController_DestroyServiceConfWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) DestroyServiceReason(ctx context.Context, in *DestroyServiceReasonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceController_DestroyServiceReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) List(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error) {
	out := new(ServiceListResponse)
	err := c.cc.Invoke(ctx, ServiceController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) ListGoodsDeliver(ctx context.Context, in *ListGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailListResponse, error) {
	out := new(ServiceGoodsDetailListResponse)
	err := c.cc.Invoke(ctx, ServiceController_ListGoodsDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) ListServiceConf(ctx context.Context, in *ListServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfListResponse, error) {
	out := new(ServiceConfListResponse)
	err := c.cc.Invoke(ctx, ServiceController_ListServiceConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) ListServiceConfSolution(ctx context.Context, in *ListServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionListResponse, error) {
	out := new(ServiceConfSolutionListResponse)
	err := c.cc.Invoke(ctx, ServiceController_ListServiceConfSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) ListServiceConfWarehouse(ctx context.Context, in *ListServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseListResponse, error) {
	out := new(ServiceConfWarehouseListResponse)
	err := c.cc.Invoke(ctx, ServiceController_ListServiceConfWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) ListServiceReason(ctx context.Context, in *ListServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonListResponse, error) {
	out := new(ServiceReasonListResponse)
	err := c.cc.Invoke(ctx, ServiceController_ListServiceReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) PartialUpdate(ctx context.Context, in *ServicePartialUpdateRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, ServiceController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) Retrieve(ctx context.Context, in *ServiceRetrieveRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, ServiceController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) RetrieveGoodsDeliver(ctx context.Context, in *RetrieveGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailResponse, error) {
	out := new(ServiceGoodsDetailResponse)
	err := c.cc.Invoke(ctx, ServiceController_RetrieveGoodsDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) RetrieveServiceConf(ctx context.Context, in *RetrieveServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfResponse, error) {
	out := new(ServiceConfResponse)
	err := c.cc.Invoke(ctx, ServiceController_RetrieveServiceConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) RetrieveServiceConfSolution(ctx context.Context, in *RetrieveServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionResponse, error) {
	out := new(ServiceConfSolutionResponse)
	err := c.cc.Invoke(ctx, ServiceController_RetrieveServiceConfSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) RetrieveServiceConfWarehouse(ctx context.Context, in *RetrieveServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseResponse, error) {
	out := new(ServiceConfWarehouseResponse)
	err := c.cc.Invoke(ctx, ServiceController_RetrieveServiceConfWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) RetrieveServiceReason(ctx context.Context, in *RetrieveServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonResponse, error) {
	out := new(ServiceReasonResponse)
	err := c.cc.Invoke(ctx, ServiceController_RetrieveServiceReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) ServiceOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceOptionsResponse, error) {
	out := new(ServiceOptionsResponse)
	err := c.cc.Invoke(ctx, ServiceController_ServiceOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) ServiceStatusCount(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*LabelNumberValueListResponse, error) {
	out := new(LabelNumberValueListResponse)
	err := c.cc.Invoke(ctx, ServiceController_ServiceStatusCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) Update(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, ServiceController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) UpdateGoodsDeliver(ctx context.Context, in *UpdateGoodsDeliverRequest, opts ...grpc.CallOption) (*ServiceGoodsDetailResponse, error) {
	out := new(ServiceGoodsDetailResponse)
	err := c.cc.Invoke(ctx, ServiceController_UpdateGoodsDeliver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) UpdateServiceConf(ctx context.Context, in *UpdateServiceConfRequest, opts ...grpc.CallOption) (*ServiceConfResponse, error) {
	out := new(ServiceConfResponse)
	err := c.cc.Invoke(ctx, ServiceController_UpdateServiceConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) UpdateServiceConfSolution(ctx context.Context, in *UpdateServiceConfSolutionRequest, opts ...grpc.CallOption) (*ServiceConfSolutionResponse, error) {
	out := new(ServiceConfSolutionResponse)
	err := c.cc.Invoke(ctx, ServiceController_UpdateServiceConfSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) UpdateServiceConfWarehouse(ctx context.Context, in *UpdateServiceConfWarehouseRequest, opts ...grpc.CallOption) (*ServiceConfWarehouseResponse, error) {
	out := new(ServiceConfWarehouseResponse)
	err := c.cc.Invoke(ctx, ServiceController_UpdateServiceConfWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) UpdateServiceReason(ctx context.Context, in *UpdateServiceReasonRequest, opts ...grpc.CallOption) (*ServiceReasonResponse, error) {
	out := new(ServiceReasonResponse)
	err := c.cc.Invoke(ctx, ServiceController_UpdateServiceReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceControllerServer is the server API for ServiceController service.
// All implementations must embed UnimplementedServiceControllerServer
// for forward compatibility
type ServiceControllerServer interface {
	BulkCreateGoodsDeliver(context.Context, *BulkCreateGoodsDeliverListRequest) (*ServiceGoodsDetailListResponse, error)
	Create(context.Context, *ServiceRequest) (*ServiceResponse, error)
	CreateGoodsDeliver(context.Context, *CreateGoodsDeliverRequest) (*ServiceGoodsDetailResponse, error)
	CreateServiceConf(context.Context, *CreateServiceConfRequest) (*ServiceConfResponse, error)
	CreateServiceConfSolution(context.Context, *CreateServiceConfSolutionRequest) (*ServiceConfSolutionResponse, error)
	CreateServiceConfWarehouse(context.Context, *CreateServiceConfWarehouseRequest) (*ServiceConfWarehouseResponse, error)
	CreateServiceReason(context.Context, *CreateServiceReasonRequest) (*ServiceReasonResponse, error)
	Destroy(context.Context, *ServiceDestroyRequest) (*emptypb.Empty, error)
	DestroyGoodsDeliver(context.Context, *DestroyGoodsDeliverRequest) (*emptypb.Empty, error)
	DestroyServiceConf(context.Context, *DestroyServiceConfRequest) (*emptypb.Empty, error)
	DestroyServiceConfSolution(context.Context, *DestroyServiceConfSolutionRequest) (*emptypb.Empty, error)
	DestroyServiceConfWarehouse(context.Context, *DestroyServiceConfWarehouseRequest) (*emptypb.Empty, error)
	DestroyServiceReason(context.Context, *DestroyServiceReasonRequest) (*emptypb.Empty, error)
	List(context.Context, *ServiceListRequest) (*ServiceListResponse, error)
	ListGoodsDeliver(context.Context, *ListGoodsDeliverRequest) (*ServiceGoodsDetailListResponse, error)
	ListServiceConf(context.Context, *ListServiceConfRequest) (*ServiceConfListResponse, error)
	ListServiceConfSolution(context.Context, *ListServiceConfSolutionRequest) (*ServiceConfSolutionListResponse, error)
	ListServiceConfWarehouse(context.Context, *ListServiceConfWarehouseRequest) (*ServiceConfWarehouseListResponse, error)
	ListServiceReason(context.Context, *ListServiceReasonRequest) (*ServiceReasonListResponse, error)
	PartialUpdate(context.Context, *ServicePartialUpdateRequest) (*ServiceResponse, error)
	Retrieve(context.Context, *ServiceRetrieveRequest) (*ServiceResponse, error)
	RetrieveGoodsDeliver(context.Context, *RetrieveGoodsDeliverRequest) (*ServiceGoodsDetailResponse, error)
	RetrieveServiceConf(context.Context, *RetrieveServiceConfRequest) (*ServiceConfResponse, error)
	RetrieveServiceConfSolution(context.Context, *RetrieveServiceConfSolutionRequest) (*ServiceConfSolutionResponse, error)
	RetrieveServiceConfWarehouse(context.Context, *RetrieveServiceConfWarehouseRequest) (*ServiceConfWarehouseResponse, error)
	RetrieveServiceReason(context.Context, *RetrieveServiceReasonRequest) (*ServiceReasonResponse, error)
	ServiceOptions(context.Context, *emptypb.Empty) (*ServiceOptionsResponse, error)
	ServiceStatusCount(context.Context, *ServiceRequest) (*LabelNumberValueListResponse, error)
	Update(context.Context, *ServiceRequest) (*ServiceResponse, error)
	UpdateGoodsDeliver(context.Context, *UpdateGoodsDeliverRequest) (*ServiceGoodsDetailResponse, error)
	UpdateServiceConf(context.Context, *UpdateServiceConfRequest) (*ServiceConfResponse, error)
	UpdateServiceConfSolution(context.Context, *UpdateServiceConfSolutionRequest) (*ServiceConfSolutionResponse, error)
	UpdateServiceConfWarehouse(context.Context, *UpdateServiceConfWarehouseRequest) (*ServiceConfWarehouseResponse, error)
	UpdateServiceReason(context.Context, *UpdateServiceReasonRequest) (*ServiceReasonResponse, error)
	mustEmbedUnimplementedServiceControllerServer()
}

// UnimplementedServiceControllerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceControllerServer struct {
}

func (UnimplementedServiceControllerServer) BulkCreateGoodsDeliver(context.Context, *BulkCreateGoodsDeliverListRequest) (*ServiceGoodsDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateGoodsDeliver not implemented")
}
func (UnimplementedServiceControllerServer) Create(context.Context, *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceControllerServer) CreateGoodsDeliver(context.Context, *CreateGoodsDeliverRequest) (*ServiceGoodsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodsDeliver not implemented")
}
func (UnimplementedServiceControllerServer) CreateServiceConf(context.Context, *CreateServiceConfRequest) (*ServiceConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceConf not implemented")
}
func (UnimplementedServiceControllerServer) CreateServiceConfSolution(context.Context, *CreateServiceConfSolutionRequest) (*ServiceConfSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceConfSolution not implemented")
}
func (UnimplementedServiceControllerServer) CreateServiceConfWarehouse(context.Context, *CreateServiceConfWarehouseRequest) (*ServiceConfWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceConfWarehouse not implemented")
}
func (UnimplementedServiceControllerServer) CreateServiceReason(context.Context, *CreateServiceReasonRequest) (*ServiceReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceReason not implemented")
}
func (UnimplementedServiceControllerServer) Destroy(context.Context, *ServiceDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedServiceControllerServer) DestroyGoodsDeliver(context.Context, *DestroyGoodsDeliverRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyGoodsDeliver not implemented")
}
func (UnimplementedServiceControllerServer) DestroyServiceConf(context.Context, *DestroyServiceConfRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyServiceConf not implemented")
}
func (UnimplementedServiceControllerServer) DestroyServiceConfSolution(context.Context, *DestroyServiceConfSolutionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyServiceConfSolution not implemented")
}
func (UnimplementedServiceControllerServer) DestroyServiceConfWarehouse(context.Context, *DestroyServiceConfWarehouseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyServiceConfWarehouse not implemented")
}
func (UnimplementedServiceControllerServer) DestroyServiceReason(context.Context, *DestroyServiceReasonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyServiceReason not implemented")
}
func (UnimplementedServiceControllerServer) List(context.Context, *ServiceListRequest) (*ServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceControllerServer) ListGoodsDeliver(context.Context, *ListGoodsDeliverRequest) (*ServiceGoodsDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoodsDeliver not implemented")
}
func (UnimplementedServiceControllerServer) ListServiceConf(context.Context, *ListServiceConfRequest) (*ServiceConfListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceConf not implemented")
}
func (UnimplementedServiceControllerServer) ListServiceConfSolution(context.Context, *ListServiceConfSolutionRequest) (*ServiceConfSolutionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceConfSolution not implemented")
}
func (UnimplementedServiceControllerServer) ListServiceConfWarehouse(context.Context, *ListServiceConfWarehouseRequest) (*ServiceConfWarehouseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceConfWarehouse not implemented")
}
func (UnimplementedServiceControllerServer) ListServiceReason(context.Context, *ListServiceReasonRequest) (*ServiceReasonListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceReason not implemented")
}
func (UnimplementedServiceControllerServer) PartialUpdate(context.Context, *ServicePartialUpdateRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedServiceControllerServer) Retrieve(context.Context, *ServiceRetrieveRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedServiceControllerServer) RetrieveGoodsDeliver(context.Context, *RetrieveGoodsDeliverRequest) (*ServiceGoodsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveGoodsDeliver not implemented")
}
func (UnimplementedServiceControllerServer) RetrieveServiceConf(context.Context, *RetrieveServiceConfRequest) (*ServiceConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveServiceConf not implemented")
}
func (UnimplementedServiceControllerServer) RetrieveServiceConfSolution(context.Context, *RetrieveServiceConfSolutionRequest) (*ServiceConfSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveServiceConfSolution not implemented")
}
func (UnimplementedServiceControllerServer) RetrieveServiceConfWarehouse(context.Context, *RetrieveServiceConfWarehouseRequest) (*ServiceConfWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveServiceConfWarehouse not implemented")
}
func (UnimplementedServiceControllerServer) RetrieveServiceReason(context.Context, *RetrieveServiceReasonRequest) (*ServiceReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveServiceReason not implemented")
}
func (UnimplementedServiceControllerServer) ServiceOptions(context.Context, *emptypb.Empty) (*ServiceOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceOptions not implemented")
}
func (UnimplementedServiceControllerServer) ServiceStatusCount(context.Context, *ServiceRequest) (*LabelNumberValueListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStatusCount not implemented")
}
func (UnimplementedServiceControllerServer) Update(context.Context, *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceControllerServer) UpdateGoodsDeliver(context.Context, *UpdateGoodsDeliverRequest) (*ServiceGoodsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsDeliver not implemented")
}
func (UnimplementedServiceControllerServer) UpdateServiceConf(context.Context, *UpdateServiceConfRequest) (*ServiceConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceConf not implemented")
}
func (UnimplementedServiceControllerServer) UpdateServiceConfSolution(context.Context, *UpdateServiceConfSolutionRequest) (*ServiceConfSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceConfSolution not implemented")
}
func (UnimplementedServiceControllerServer) UpdateServiceConfWarehouse(context.Context, *UpdateServiceConfWarehouseRequest) (*ServiceConfWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceConfWarehouse not implemented")
}
func (UnimplementedServiceControllerServer) UpdateServiceReason(context.Context, *UpdateServiceReasonRequest) (*ServiceReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceReason not implemented")
}
func (UnimplementedServiceControllerServer) mustEmbedUnimplementedServiceControllerServer() {}

// UnsafeServiceControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceControllerServer will
// result in compilation errors.
type UnsafeServiceControllerServer interface {
	mustEmbedUnimplementedServiceControllerServer()
}

func RegisterServiceControllerServer(s grpc.ServiceRegistrar, srv ServiceControllerServer) {
	s.RegisterService(&ServiceController_ServiceDesc, srv)
}

func _ServiceController_BulkCreateGoodsDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateGoodsDeliverListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).BulkCreateGoodsDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_BulkCreateGoodsDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).BulkCreateGoodsDeliver(ctx, req.(*BulkCreateGoodsDeliverListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Create(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_CreateGoodsDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).CreateGoodsDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_CreateGoodsDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).CreateGoodsDeliver(ctx, req.(*CreateGoodsDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_CreateServiceConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).CreateServiceConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_CreateServiceConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).CreateServiceConf(ctx, req.(*CreateServiceConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_CreateServiceConfSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceConfSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).CreateServiceConfSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_CreateServiceConfSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).CreateServiceConfSolution(ctx, req.(*CreateServiceConfSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_CreateServiceConfWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceConfWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).CreateServiceConfWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_CreateServiceConfWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).CreateServiceConfWarehouse(ctx, req.(*CreateServiceConfWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_CreateServiceReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).CreateServiceReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_CreateServiceReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).CreateServiceReason(ctx, req.(*CreateServiceReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Destroy(ctx, req.(*ServiceDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_DestroyGoodsDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyGoodsDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).DestroyGoodsDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_DestroyGoodsDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).DestroyGoodsDeliver(ctx, req.(*DestroyGoodsDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_DestroyServiceConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyServiceConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).DestroyServiceConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_DestroyServiceConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).DestroyServiceConf(ctx, req.(*DestroyServiceConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_DestroyServiceConfSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyServiceConfSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).DestroyServiceConfSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_DestroyServiceConfSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).DestroyServiceConfSolution(ctx, req.(*DestroyServiceConfSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_DestroyServiceConfWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyServiceConfWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).DestroyServiceConfWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_DestroyServiceConfWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).DestroyServiceConfWarehouse(ctx, req.(*DestroyServiceConfWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_DestroyServiceReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyServiceReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).DestroyServiceReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_DestroyServiceReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).DestroyServiceReason(ctx, req.(*DestroyServiceReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).List(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_ListGoodsDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).ListGoodsDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_ListGoodsDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).ListGoodsDeliver(ctx, req.(*ListGoodsDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_ListServiceConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).ListServiceConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_ListServiceConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).ListServiceConf(ctx, req.(*ListServiceConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_ListServiceConfSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceConfSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).ListServiceConfSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_ListServiceConfSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).ListServiceConfSolution(ctx, req.(*ListServiceConfSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_ListServiceConfWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceConfWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).ListServiceConfWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_ListServiceConfWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).ListServiceConfWarehouse(ctx, req.(*ListServiceConfWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_ListServiceReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).ListServiceReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_ListServiceReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).ListServiceReason(ctx, req.(*ListServiceReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicePartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).PartialUpdate(ctx, req.(*ServicePartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Retrieve(ctx, req.(*ServiceRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_RetrieveGoodsDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveGoodsDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).RetrieveGoodsDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_RetrieveGoodsDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).RetrieveGoodsDeliver(ctx, req.(*RetrieveGoodsDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_RetrieveServiceConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveServiceConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).RetrieveServiceConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_RetrieveServiceConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).RetrieveServiceConf(ctx, req.(*RetrieveServiceConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_RetrieveServiceConfSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveServiceConfSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).RetrieveServiceConfSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_RetrieveServiceConfSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).RetrieveServiceConfSolution(ctx, req.(*RetrieveServiceConfSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_RetrieveServiceConfWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveServiceConfWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).RetrieveServiceConfWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_RetrieveServiceConfWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).RetrieveServiceConfWarehouse(ctx, req.(*RetrieveServiceConfWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_RetrieveServiceReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveServiceReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).RetrieveServiceReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_RetrieveServiceReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).RetrieveServiceReason(ctx, req.(*RetrieveServiceReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_ServiceOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).ServiceOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_ServiceOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).ServiceOptions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_ServiceStatusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).ServiceStatusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_ServiceStatusCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).ServiceStatusCount(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Update(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_UpdateGoodsDeliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsDeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).UpdateGoodsDeliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_UpdateGoodsDeliver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).UpdateGoodsDeliver(ctx, req.(*UpdateGoodsDeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_UpdateServiceConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).UpdateServiceConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_UpdateServiceConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).UpdateServiceConf(ctx, req.(*UpdateServiceConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_UpdateServiceConfSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceConfSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).UpdateServiceConfSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_UpdateServiceConfSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).UpdateServiceConfSolution(ctx, req.(*UpdateServiceConfSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_UpdateServiceConfWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceConfWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).UpdateServiceConfWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_UpdateServiceConfWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).UpdateServiceConfWarehouse(ctx, req.(*UpdateServiceConfWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_UpdateServiceReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).UpdateServiceReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_UpdateServiceReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).UpdateServiceReason(ctx, req.(*UpdateServiceReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceController_ServiceDesc is the grpc.ServiceDesc for ServiceController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfid_service.rfid_ito.ServiceController",
	HandlerType: (*ServiceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BulkCreateGoodsDeliver",
			Handler:    _ServiceController_BulkCreateGoodsDeliver_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ServiceController_Create_Handler,
		},
		{
			MethodName: "CreateGoodsDeliver",
			Handler:    _ServiceController_CreateGoodsDeliver_Handler,
		},
		{
			MethodName: "CreateServiceConf",
			Handler:    _ServiceController_CreateServiceConf_Handler,
		},
		{
			MethodName: "CreateServiceConfSolution",
			Handler:    _ServiceController_CreateServiceConfSolution_Handler,
		},
		{
			MethodName: "CreateServiceConfWarehouse",
			Handler:    _ServiceController_CreateServiceConfWarehouse_Handler,
		},
		{
			MethodName: "CreateServiceReason",
			Handler:    _ServiceController_CreateServiceReason_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ServiceController_Destroy_Handler,
		},
		{
			MethodName: "DestroyGoodsDeliver",
			Handler:    _ServiceController_DestroyGoodsDeliver_Handler,
		},
		{
			MethodName: "DestroyServiceConf",
			Handler:    _ServiceController_DestroyServiceConf_Handler,
		},
		{
			MethodName: "DestroyServiceConfSolution",
			Handler:    _ServiceController_DestroyServiceConfSolution_Handler,
		},
		{
			MethodName: "DestroyServiceConfWarehouse",
			Handler:    _ServiceController_DestroyServiceConfWarehouse_Handler,
		},
		{
			MethodName: "DestroyServiceReason",
			Handler:    _ServiceController_DestroyServiceReason_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ServiceController_List_Handler,
		},
		{
			MethodName: "ListGoodsDeliver",
			Handler:    _ServiceController_ListGoodsDeliver_Handler,
		},
		{
			MethodName: "ListServiceConf",
			Handler:    _ServiceController_ListServiceConf_Handler,
		},
		{
			MethodName: "ListServiceConfSolution",
			Handler:    _ServiceController_ListServiceConfSolution_Handler,
		},
		{
			MethodName: "ListServiceConfWarehouse",
			Handler:    _ServiceController_ListServiceConfWarehouse_Handler,
		},
		{
			MethodName: "ListServiceReason",
			Handler:    _ServiceController_ListServiceReason_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _ServiceController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ServiceController_Retrieve_Handler,
		},
		{
			MethodName: "RetrieveGoodsDeliver",
			Handler:    _ServiceController_RetrieveGoodsDeliver_Handler,
		},
		{
			MethodName: "RetrieveServiceConf",
			Handler:    _ServiceController_RetrieveServiceConf_Handler,
		},
		{
			MethodName: "RetrieveServiceConfSolution",
			Handler:    _ServiceController_RetrieveServiceConfSolution_Handler,
		},
		{
			MethodName: "RetrieveServiceConfWarehouse",
			Handler:    _ServiceController_RetrieveServiceConfWarehouse_Handler,
		},
		{
			MethodName: "RetrieveServiceReason",
			Handler:    _ServiceController_RetrieveServiceReason_Handler,
		},
		{
			MethodName: "ServiceOptions",
			Handler:    _ServiceController_ServiceOptions_Handler,
		},
		{
			MethodName: "ServiceStatusCount",
			Handler:    _ServiceController_ServiceStatusCount_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServiceController_Update_Handler,
		},
		{
			MethodName: "UpdateGoodsDeliver",
			Handler:    _ServiceController_UpdateGoodsDeliver_Handler,
		},
		{
			MethodName: "UpdateServiceConf",
			Handler:    _ServiceController_UpdateServiceConf_Handler,
		},
		{
			MethodName: "UpdateServiceConfSolution",
			Handler:    _ServiceController_UpdateServiceConfSolution_Handler,
		},
		{
			MethodName: "UpdateServiceConfWarehouse",
			Handler:    _ServiceController_UpdateServiceConfWarehouse_Handler,
		},
		{
			MethodName: "UpdateServiceReason",
			Handler:    _ServiceController_UpdateServiceReason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rfid_ito.proto",
}
