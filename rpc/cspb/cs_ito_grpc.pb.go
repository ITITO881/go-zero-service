// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: cs_ito.proto

package cspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CsMainController_BatchUpdateConfigColumn_FullMethodName = "/ito_cs_py.cs_ito.CsMainController/BatchUpdateConfigColumn"
	CsMainController_Create_FullMethodName                  = "/ito_cs_py.cs_ito.CsMainController/Create"
	CsMainController_Destroy_FullMethodName                 = "/ito_cs_py.cs_ito.CsMainController/Destroy"
	CsMainController_List_FullMethodName                    = "/ito_cs_py.cs_ito.CsMainController/List"
	CsMainController_OptionConfigColumn_FullMethodName      = "/ito_cs_py.cs_ito.CsMainController/OptionConfigColumn"
	CsMainController_PartialUpdate_FullMethodName           = "/ito_cs_py.cs_ito.CsMainController/PartialUpdate"
	CsMainController_Retrieve_FullMethodName                = "/ito_cs_py.cs_ito.CsMainController/Retrieve"
	CsMainController_SyncConfigColumn_FullMethodName        = "/ito_cs_py.cs_ito.CsMainController/SyncConfigColumn"
	CsMainController_Update_FullMethodName                  = "/ito_cs_py.cs_ito.CsMainController/Update"
)

// CsMainControllerClient is the client API for CsMainController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CsMainControllerClient interface {
	BatchUpdateConfigColumn(ctx context.Context, in *ConfigColumnBatchUpdateListRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	Create(ctx context.Context, in *ConfigColumnRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error)
	Destroy(ctx context.Context, in *ConfigColumnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ConfigColumnListRequest, opts ...grpc.CallOption) (*ConfigColumnListResponse, error)
	OptionConfigColumn(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*OptionConfigColumnResponse, error)
	PartialUpdate(ctx context.Context, in *ConfigColumnPartialUpdateRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error)
	Retrieve(ctx context.Context, in *ConfigColumnRetrieveRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error)
	SyncConfigColumn(ctx context.Context, in *SyncConfigColumnRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error)
	Update(ctx context.Context, in *ConfigColumnRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error)
}

type csMainControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCsMainControllerClient(cc grpc.ClientConnInterface) CsMainControllerClient {
	return &csMainControllerClient{cc}
}

func (c *csMainControllerClient) BatchUpdateConfigColumn(ctx context.Context, in *ConfigColumnBatchUpdateListRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, CsMainController_BatchUpdateConfigColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) Create(ctx context.Context, in *ConfigColumnRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error) {
	out := new(ConfigColumnResponse)
	err := c.cc.Invoke(ctx, CsMainController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) Destroy(ctx context.Context, in *ConfigColumnDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CsMainController_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) List(ctx context.Context, in *ConfigColumnListRequest, opts ...grpc.CallOption) (*ConfigColumnListResponse, error) {
	out := new(ConfigColumnListResponse)
	err := c.cc.Invoke(ctx, CsMainController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) OptionConfigColumn(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*OptionConfigColumnResponse, error) {
	out := new(OptionConfigColumnResponse)
	err := c.cc.Invoke(ctx, CsMainController_OptionConfigColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) PartialUpdate(ctx context.Context, in *ConfigColumnPartialUpdateRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error) {
	out := new(ConfigColumnResponse)
	err := c.cc.Invoke(ctx, CsMainController_PartialUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) Retrieve(ctx context.Context, in *ConfigColumnRetrieveRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error) {
	out := new(ConfigColumnResponse)
	err := c.cc.Invoke(ctx, CsMainController_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) SyncConfigColumn(ctx context.Context, in *SyncConfigColumnRequest, opts ...grpc.CallOption) (*CodeMsgResponse, error) {
	out := new(CodeMsgResponse)
	err := c.cc.Invoke(ctx, CsMainController_SyncConfigColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csMainControllerClient) Update(ctx context.Context, in *ConfigColumnRequest, opts ...grpc.CallOption) (*ConfigColumnResponse, error) {
	out := new(ConfigColumnResponse)
	err := c.cc.Invoke(ctx, CsMainController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CsMainControllerServer is the server API for CsMainController service.
// All implementations must embed UnimplementedCsMainControllerServer
// for forward compatibility
type CsMainControllerServer interface {
	BatchUpdateConfigColumn(context.Context, *ConfigColumnBatchUpdateListRequest) (*CodeMsgResponse, error)
	Create(context.Context, *ConfigColumnRequest) (*ConfigColumnResponse, error)
	Destroy(context.Context, *ConfigColumnDestroyRequest) (*emptypb.Empty, error)
	List(context.Context, *ConfigColumnListRequest) (*ConfigColumnListResponse, error)
	OptionConfigColumn(context.Context, *EmptyRequest) (*OptionConfigColumnResponse, error)
	PartialUpdate(context.Context, *ConfigColumnPartialUpdateRequest) (*ConfigColumnResponse, error)
	Retrieve(context.Context, *ConfigColumnRetrieveRequest) (*ConfigColumnResponse, error)
	SyncConfigColumn(context.Context, *SyncConfigColumnRequest) (*CodeMsgResponse, error)
	Update(context.Context, *ConfigColumnRequest) (*ConfigColumnResponse, error)
	mustEmbedUnimplementedCsMainControllerServer()
}

// UnimplementedCsMainControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCsMainControllerServer struct {
}

func (UnimplementedCsMainControllerServer) BatchUpdateConfigColumn(context.Context, *ConfigColumnBatchUpdateListRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateConfigColumn not implemented")
}
func (UnimplementedCsMainControllerServer) Create(context.Context, *ConfigColumnRequest) (*ConfigColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCsMainControllerServer) Destroy(context.Context, *ConfigColumnDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedCsMainControllerServer) List(context.Context, *ConfigColumnListRequest) (*ConfigColumnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCsMainControllerServer) OptionConfigColumn(context.Context, *EmptyRequest) (*OptionConfigColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptionConfigColumn not implemented")
}
func (UnimplementedCsMainControllerServer) PartialUpdate(context.Context, *ConfigColumnPartialUpdateRequest) (*ConfigColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdate not implemented")
}
func (UnimplementedCsMainControllerServer) Retrieve(context.Context, *ConfigColumnRetrieveRequest) (*ConfigColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCsMainControllerServer) SyncConfigColumn(context.Context, *SyncConfigColumnRequest) (*CodeMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncConfigColumn not implemented")
}
func (UnimplementedCsMainControllerServer) Update(context.Context, *ConfigColumnRequest) (*ConfigColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCsMainControllerServer) mustEmbedUnimplementedCsMainControllerServer() {}

// UnsafeCsMainControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CsMainControllerServer will
// result in compilation errors.
type UnsafeCsMainControllerServer interface {
	mustEmbedUnimplementedCsMainControllerServer()
}

func RegisterCsMainControllerServer(s grpc.ServiceRegistrar, srv CsMainControllerServer) {
	s.RegisterService(&CsMainController_ServiceDesc, srv)
}

func _CsMainController_BatchUpdateConfigColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigColumnBatchUpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).BatchUpdateConfigColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_BatchUpdateConfigColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).BatchUpdateConfigColumn(ctx, req.(*ConfigColumnBatchUpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).Create(ctx, req.(*ConfigColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigColumnDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).Destroy(ctx, req.(*ConfigColumnDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigColumnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).List(ctx, req.(*ConfigColumnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_OptionConfigColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).OptionConfigColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_OptionConfigColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).OptionConfigColumn(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_PartialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigColumnPartialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).PartialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_PartialUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).PartialUpdate(ctx, req.(*ConfigColumnPartialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigColumnRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).Retrieve(ctx, req.(*ConfigColumnRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_SyncConfigColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncConfigColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).SyncConfigColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_SyncConfigColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).SyncConfigColumn(ctx, req.(*SyncConfigColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CsMainController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsMainControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsMainController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsMainControllerServer).Update(ctx, req.(*ConfigColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CsMainController_ServiceDesc is the grpc.ServiceDesc for CsMainController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CsMainController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ito_cs_py.cs_ito.CsMainController",
	HandlerType: (*CsMainControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpdateConfigColumn",
			Handler:    _CsMainController_BatchUpdateConfigColumn_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CsMainController_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _CsMainController_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CsMainController_List_Handler,
		},
		{
			MethodName: "OptionConfigColumn",
			Handler:    _CsMainController_OptionConfigColumn_Handler,
		},
		{
			MethodName: "PartialUpdate",
			Handler:    _CsMainController_PartialUpdate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CsMainController_Retrieve_Handler,
		},
		{
			MethodName: "SyncConfigColumn",
			Handler:    _CsMainController_SyncConfigColumn_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CsMainController_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs_ito.proto",
}
