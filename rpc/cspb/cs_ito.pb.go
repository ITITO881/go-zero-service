// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: cs_ito.proto

package cspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CodeMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data  *string `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
	Count *int32  `protobuf:"varint,4,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *CodeMsgResponse) Reset() {
	*x = CodeMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeMsgResponse) ProtoMessage() {}

func (x *CodeMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeMsgResponse.ProtoReflect.Descriptor instead.
func (*CodeMsgResponse) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{0}
}

func (x *CodeMsgResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CodeMsgResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CodeMsgResponse) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *CodeMsgResponse) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ConfigColumnBatchUpdateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ConfigColumnBatchUpdateRequest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ConfigColumnBatchUpdateListRequest) Reset() {
	*x = ConfigColumnBatchUpdateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnBatchUpdateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnBatchUpdateListRequest) ProtoMessage() {}

func (x *ConfigColumnBatchUpdateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnBatchUpdateListRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnBatchUpdateListRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigColumnBatchUpdateListRequest) GetResults() []*ConfigColumnBatchUpdateRequest {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ConfigColumnBatchUpdateListRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ConfigColumnBatchUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName       *string                              `protobuf:"bytes,12,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	Options         []*ConfigColumnOptionRequest         `protobuf:"bytes,13,rep,name=options,proto3" json:"options,omitempty"`
	RelationOptions []*ConfigColumnRelationOptionRequest `protobuf:"bytes,14,rep,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	ProjectId       *int32                               `protobuf:"varint,15,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	ProjectName     *string                              `protobuf:"bytes,16,opt,name=project_name,json=projectName,proto3,oneof" json:"project_name,omitempty"`
	ColumnId        *int32                               `protobuf:"varint,17,opt,name=column_id,json=columnId,proto3,oneof" json:"column_id,omitempty"`
	ColumnType      *string                              `protobuf:"bytes,18,opt,name=column_type,json=columnType,proto3,oneof" json:"column_type,omitempty"`
	Name            *string                              `protobuf:"bytes,19,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type            *string                              `protobuf:"bytes,20,opt,name=type,proto3,oneof" json:"type,omitempty"`
	BehaviorType    *int32                               `protobuf:"varint,21,opt,name=behavior_type,json=behaviorType,proto3,oneof" json:"behavior_type,omitempty"`
	IsInside        *bool                                `protobuf:"varint,22,opt,name=is_inside,json=isInside,proto3,oneof" json:"is_inside,omitempty"`
	MpFieldName     *string                              `protobuf:"bytes,23,opt,name=mp_field_name,json=mpFieldName,proto3,oneof" json:"mp_field_name,omitempty"`
	IsActive        *bool                                `protobuf:"varint,24,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	SonColumnBos    []*ConfigColumnBatchUpdateRequest    `protobuf:"bytes,25,rep,name=son_column_bos,json=sonColumnBos,proto3" json:"son_column_bos,omitempty"`
}

func (x *ConfigColumnBatchUpdateRequest) Reset() {
	*x = ConfigColumnBatchUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnBatchUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnBatchUpdateRequest) ProtoMessage() {}

func (x *ConfigColumnBatchUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnBatchUpdateRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnBatchUpdateRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigColumnBatchUpdateRequest) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *ConfigColumnBatchUpdateRequest) GetOptions() []*ConfigColumnOptionRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ConfigColumnBatchUpdateRequest) GetRelationOptions() []*ConfigColumnRelationOptionRequest {
	if x != nil {
		return x.RelationOptions
	}
	return nil
}

func (x *ConfigColumnBatchUpdateRequest) GetProjectId() int32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ConfigColumnBatchUpdateRequest) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *ConfigColumnBatchUpdateRequest) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *ConfigColumnBatchUpdateRequest) GetColumnType() string {
	if x != nil && x.ColumnType != nil {
		return *x.ColumnType
	}
	return ""
}

func (x *ConfigColumnBatchUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigColumnBatchUpdateRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ConfigColumnBatchUpdateRequest) GetBehaviorType() int32 {
	if x != nil && x.BehaviorType != nil {
		return *x.BehaviorType
	}
	return 0
}

func (x *ConfigColumnBatchUpdateRequest) GetIsInside() bool {
	if x != nil && x.IsInside != nil {
		return *x.IsInside
	}
	return false
}

func (x *ConfigColumnBatchUpdateRequest) GetMpFieldName() string {
	if x != nil && x.MpFieldName != nil {
		return *x.MpFieldName
	}
	return ""
}

func (x *ConfigColumnBatchUpdateRequest) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *ConfigColumnBatchUpdateRequest) GetSonColumnBos() []*ConfigColumnBatchUpdateRequest {
	if x != nil {
		return x.SonColumnBos
	}
	return nil
}

type ConfigColumnDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfigColumnDestroyRequest) Reset() {
	*x = ConfigColumnDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnDestroyRequest) ProtoMessage() {}

func (x *ConfigColumnDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnDestroyRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnDestroyRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigColumnDestroyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ConfigColumnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilters    *structpb.Struct `protobuf:"bytes,1,opt,name=_filters,json=Filters,proto3,oneof" json:"_filters,omitempty"`
	XPagination *structpb.Struct `protobuf:"bytes,2,opt,name=_pagination,json=Pagination,proto3,oneof" json:"_pagination,omitempty"`
}

func (x *ConfigColumnListRequest) Reset() {
	*x = ConfigColumnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnListRequest) ProtoMessage() {}

func (x *ConfigColumnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnListRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnListRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigColumnListRequest) GetXFilters() *structpb.Struct {
	if x != nil {
		return x.XFilters
	}
	return nil
}

func (x *ConfigColumnListRequest) GetXPagination() *structpb.Struct {
	if x != nil {
		return x.XPagination
	}
	return nil
}

type ConfigColumnListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ConfigColumnResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ConfigColumnListResponse) Reset() {
	*x = ConfigColumnListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnListResponse) ProtoMessage() {}

func (x *ConfigColumnListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnListResponse.ProtoReflect.Descriptor instead.
func (*ConfigColumnListResponse) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigColumnListResponse) GetResults() []*ConfigColumnResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ConfigColumnListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ConfigColumnOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *ConfigColumnOptionRequest) Reset() {
	*x = ConfigColumnOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnOptionRequest) ProtoMessage() {}

func (x *ConfigColumnOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnOptionRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnOptionRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigColumnOptionRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ConfigColumnOptionRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type ConfigColumnOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *ConfigColumnOptionResponse) Reset() {
	*x = ConfigColumnOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnOptionResponse) ProtoMessage() {}

func (x *ConfigColumnOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnOptionResponse.ProtoReflect.Descriptor instead.
func (*ConfigColumnOptionResponse) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigColumnOptionResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ConfigColumnOptionResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type ConfigColumnPartialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options              []*ConfigColumnOptionRequest         `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	RelationOptions      []*ConfigColumnRelationOptionRequest `protobuf:"bytes,4,rep,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	XPartialUpdateFields []string                             `protobuf:"bytes,5,rep,name=_partial_update_fields,json=PartialUpdateFields,proto3" json:"_partial_update_fields,omitempty"`
	ProjectId            *int32                               `protobuf:"varint,6,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	ProjectName          *string                              `protobuf:"bytes,7,opt,name=project_name,json=projectName,proto3,oneof" json:"project_name,omitempty"`
	ColumnId             *int32                               `protobuf:"varint,8,opt,name=column_id,json=columnId,proto3,oneof" json:"column_id,omitempty"`
	ColumnType           *string                              `protobuf:"bytes,9,opt,name=column_type,json=columnType,proto3,oneof" json:"column_type,omitempty"`
	Name                 *string                              `protobuf:"bytes,10,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type                 *string                              `protobuf:"bytes,11,opt,name=type,proto3,oneof" json:"type,omitempty"`
	BehaviorType         *int32                               `protobuf:"varint,12,opt,name=behavior_type,json=behaviorType,proto3,oneof" json:"behavior_type,omitempty"`
	IsInside             *bool                                `protobuf:"varint,13,opt,name=is_inside,json=isInside,proto3,oneof" json:"is_inside,omitempty"`
	FieldName            *string                              `protobuf:"bytes,14,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	MpFieldName          *string                              `protobuf:"bytes,15,opt,name=mp_field_name,json=mpFieldName,proto3,oneof" json:"mp_field_name,omitempty"`
	IsActive             *bool                                `protobuf:"varint,16,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	SonColumnBos         []*ConfigColumnRequest               `protobuf:"bytes,17,rep,name=son_column_bos,json=sonColumnBos,proto3" json:"son_column_bos,omitempty"`
}

func (x *ConfigColumnPartialUpdateRequest) Reset() {
	*x = ConfigColumnPartialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnPartialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnPartialUpdateRequest) ProtoMessage() {}

func (x *ConfigColumnPartialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnPartialUpdateRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnPartialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigColumnPartialUpdateRequest) GetOptions() []*ConfigColumnOptionRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ConfigColumnPartialUpdateRequest) GetRelationOptions() []*ConfigColumnRelationOptionRequest {
	if x != nil {
		return x.RelationOptions
	}
	return nil
}

func (x *ConfigColumnPartialUpdateRequest) GetXPartialUpdateFields() []string {
	if x != nil {
		return x.XPartialUpdateFields
	}
	return nil
}

func (x *ConfigColumnPartialUpdateRequest) GetProjectId() int32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ConfigColumnPartialUpdateRequest) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *ConfigColumnPartialUpdateRequest) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *ConfigColumnPartialUpdateRequest) GetColumnType() string {
	if x != nil && x.ColumnType != nil {
		return *x.ColumnType
	}
	return ""
}

func (x *ConfigColumnPartialUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigColumnPartialUpdateRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ConfigColumnPartialUpdateRequest) GetBehaviorType() int32 {
	if x != nil && x.BehaviorType != nil {
		return *x.BehaviorType
	}
	return 0
}

func (x *ConfigColumnPartialUpdateRequest) GetIsInside() bool {
	if x != nil && x.IsInside != nil {
		return *x.IsInside
	}
	return false
}

func (x *ConfigColumnPartialUpdateRequest) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *ConfigColumnPartialUpdateRequest) GetMpFieldName() string {
	if x != nil && x.MpFieldName != nil {
		return *x.MpFieldName
	}
	return ""
}

func (x *ConfigColumnPartialUpdateRequest) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *ConfigColumnPartialUpdateRequest) GetSonColumnBos() []*ConfigColumnRequest {
	if x != nil {
		return x.SonColumnBos
	}
	return nil
}

type ConfigColumnRelationOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title    *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	ParentId *int32  `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
}

func (x *ConfigColumnRelationOptionRequest) Reset() {
	*x = ConfigColumnRelationOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnRelationOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnRelationOptionRequest) ProtoMessage() {}

func (x *ConfigColumnRelationOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnRelationOptionRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnRelationOptionRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigColumnRelationOptionRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ConfigColumnRelationOptionRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ConfigColumnRelationOptionRequest) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type ConfigColumnRelationOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32                                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title    *string                               `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	ParentId *int32                                `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Child    []*ConfigColumnRelationOptionResponse `protobuf:"bytes,4,rep,name=child,proto3" json:"child,omitempty"`
}

func (x *ConfigColumnRelationOptionResponse) Reset() {
	*x = ConfigColumnRelationOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnRelationOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnRelationOptionResponse) ProtoMessage() {}

func (x *ConfigColumnRelationOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnRelationOptionResponse.ProtoReflect.Descriptor instead.
func (*ConfigColumnRelationOptionResponse) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigColumnRelationOptionResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ConfigColumnRelationOptionResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ConfigColumnRelationOptionResponse) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *ConfigColumnRelationOptionResponse) GetChild() []*ConfigColumnRelationOptionResponse {
	if x != nil {
		return x.Child
	}
	return nil
}

type ConfigColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options         []*ConfigColumnOptionRequest         `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	RelationOptions []*ConfigColumnRelationOptionRequest `protobuf:"bytes,4,rep,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	ProjectId       *int32                               `protobuf:"varint,5,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	ProjectName     *string                              `protobuf:"bytes,6,opt,name=project_name,json=projectName,proto3,oneof" json:"project_name,omitempty"`
	ColumnId        *int32                               `protobuf:"varint,7,opt,name=column_id,json=columnId,proto3,oneof" json:"column_id,omitempty"`
	ColumnType      *string                              `protobuf:"bytes,8,opt,name=column_type,json=columnType,proto3,oneof" json:"column_type,omitempty"`
	Name            *string                              `protobuf:"bytes,9,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type            *string                              `protobuf:"bytes,10,opt,name=type,proto3,oneof" json:"type,omitempty"`
	BehaviorType    *int32                               `protobuf:"varint,11,opt,name=behavior_type,json=behaviorType,proto3,oneof" json:"behavior_type,omitempty"`
	IsInside        *bool                                `protobuf:"varint,12,opt,name=is_inside,json=isInside,proto3,oneof" json:"is_inside,omitempty"`
	FieldName       *string                              `protobuf:"bytes,13,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	MpFieldName     *string                              `protobuf:"bytes,14,opt,name=mp_field_name,json=mpFieldName,proto3,oneof" json:"mp_field_name,omitempty"`
	IsActive        *bool                                `protobuf:"varint,15,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	SonColumnBos    []*ConfigColumnRequest               `protobuf:"bytes,16,rep,name=son_column_bos,json=sonColumnBos,proto3" json:"son_column_bos,omitempty"`
}

func (x *ConfigColumnRequest) Reset() {
	*x = ConfigColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnRequest) ProtoMessage() {}

func (x *ConfigColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigColumnRequest) GetOptions() []*ConfigColumnOptionRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ConfigColumnRequest) GetRelationOptions() []*ConfigColumnRelationOptionRequest {
	if x != nil {
		return x.RelationOptions
	}
	return nil
}

func (x *ConfigColumnRequest) GetProjectId() int32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ConfigColumnRequest) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *ConfigColumnRequest) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *ConfigColumnRequest) GetColumnType() string {
	if x != nil && x.ColumnType != nil {
		return *x.ColumnType
	}
	return ""
}

func (x *ConfigColumnRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigColumnRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ConfigColumnRequest) GetBehaviorType() int32 {
	if x != nil && x.BehaviorType != nil {
		return *x.BehaviorType
	}
	return 0
}

func (x *ConfigColumnRequest) GetIsInside() bool {
	if x != nil && x.IsInside != nil {
		return *x.IsInside
	}
	return false
}

func (x *ConfigColumnRequest) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *ConfigColumnRequest) GetMpFieldName() string {
	if x != nil && x.MpFieldName != nil {
		return *x.MpFieldName
	}
	return ""
}

func (x *ConfigColumnRequest) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *ConfigColumnRequest) GetSonColumnBos() []*ConfigColumnRequest {
	if x != nil {
		return x.SonColumnBos
	}
	return nil
}

type ConfigColumnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options         []*ConfigColumnOptionResponse         `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	RelationOptions []*ConfigColumnRelationOptionResponse `protobuf:"bytes,3,rep,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	ProjectId       *int32                                `protobuf:"varint,4,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	ProjectName     *string                               `protobuf:"bytes,5,opt,name=project_name,json=projectName,proto3,oneof" json:"project_name,omitempty"`
	ColumnId        *int32                                `protobuf:"varint,6,opt,name=column_id,json=columnId,proto3,oneof" json:"column_id,omitempty"`
	ColumnType      *string                               `protobuf:"bytes,7,opt,name=column_type,json=columnType,proto3,oneof" json:"column_type,omitempty"`
	Name            *string                               `protobuf:"bytes,8,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type            *string                               `protobuf:"bytes,9,opt,name=type,proto3,oneof" json:"type,omitempty"`
	BehaviorType    *int32                                `protobuf:"varint,10,opt,name=behavior_type,json=behaviorType,proto3,oneof" json:"behavior_type,omitempty"`
	SonColumnBos    []*ConfigColumnResponse               `protobuf:"bytes,11,rep,name=son_column_bos,json=sonColumnBos,proto3" json:"son_column_bos,omitempty"`
	IsInside        *bool                                 `protobuf:"varint,12,opt,name=is_inside,json=isInside,proto3,oneof" json:"is_inside,omitempty"`
	FieldName       *string                               `protobuf:"bytes,13,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	UpdateTime      *string                               `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	MpFieldName     *string                               `protobuf:"bytes,15,opt,name=mp_field_name,json=mpFieldName,proto3,oneof" json:"mp_field_name,omitempty"`
	IsActive        *bool                                 `protobuf:"varint,16,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	Id              *string                               `protobuf:"bytes,17,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *ConfigColumnResponse) Reset() {
	*x = ConfigColumnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnResponse) ProtoMessage() {}

func (x *ConfigColumnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnResponse.ProtoReflect.Descriptor instead.
func (*ConfigColumnResponse) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigColumnResponse) GetOptions() []*ConfigColumnOptionResponse {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ConfigColumnResponse) GetRelationOptions() []*ConfigColumnRelationOptionResponse {
	if x != nil {
		return x.RelationOptions
	}
	return nil
}

func (x *ConfigColumnResponse) GetProjectId() int32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ConfigColumnResponse) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *ConfigColumnResponse) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *ConfigColumnResponse) GetColumnType() string {
	if x != nil && x.ColumnType != nil {
		return *x.ColumnType
	}
	return ""
}

func (x *ConfigColumnResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigColumnResponse) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ConfigColumnResponse) GetBehaviorType() int32 {
	if x != nil && x.BehaviorType != nil {
		return *x.BehaviorType
	}
	return 0
}

func (x *ConfigColumnResponse) GetSonColumnBos() []*ConfigColumnResponse {
	if x != nil {
		return x.SonColumnBos
	}
	return nil
}

func (x *ConfigColumnResponse) GetIsInside() bool {
	if x != nil && x.IsInside != nil {
		return *x.IsInside
	}
	return false
}

func (x *ConfigColumnResponse) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *ConfigColumnResponse) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *ConfigColumnResponse) GetMpFieldName() string {
	if x != nil && x.MpFieldName != nil {
		return *x.MpFieldName
	}
	return ""
}

func (x *ConfigColumnResponse) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *ConfigColumnResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type ConfigColumnRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfigColumnRetrieveRequest) Reset() {
	*x = ConfigColumnRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigColumnRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigColumnRetrieveRequest) ProtoMessage() {}

func (x *ConfigColumnRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigColumnRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ConfigColumnRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigColumnRetrieveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{14}
}

type LabelNumberValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Label *string `protobuf:"bytes,2,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Count *int32  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *LabelNumberValueResponse) Reset() {
	*x = LabelNumberValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNumberValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNumberValueResponse) ProtoMessage() {}

func (x *LabelNumberValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNumberValueResponse.ProtoReflect.Descriptor instead.
func (*LabelNumberValueResponse) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{15}
}

func (x *LabelNumberValueResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LabelNumberValueResponse) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *LabelNumberValueResponse) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type OptionConfigColumnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectInfo []*LabelNumberValueResponse `protobuf:"bytes,1,rep,name=project_info,json=projectInfo,proto3" json:"project_info,omitempty"`
}

func (x *OptionConfigColumnResponse) Reset() {
	*x = OptionConfigColumnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionConfigColumnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionConfigColumnResponse) ProtoMessage() {}

func (x *OptionConfigColumnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionConfigColumnResponse.ProtoReflect.Descriptor instead.
func (*OptionConfigColumnResponse) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{16}
}

func (x *OptionConfigColumnResponse) GetProjectInfo() []*LabelNumberValueResponse {
	if x != nil {
		return x.ProjectInfo
	}
	return nil
}

type SyncConfigColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId []int32 `protobuf:"varint,1,rep,packed,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *SyncConfigColumnRequest) Reset() {
	*x = SyncConfigColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_ito_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncConfigColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncConfigColumnRequest) ProtoMessage() {}

func (x *SyncConfigColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_ito_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncConfigColumnRequest.ProtoReflect.Descriptor instead.
func (*SyncConfigColumnRequest) Descriptor() ([]byte, []int) {
	return file_cs_ito_proto_rawDescGZIP(), []int{17}
}

func (x *SyncConfigColumnRequest) GetProjectId() []int32 {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

var File_cs_ito_proto protoreflect.FileDescriptor

var file_cs_ito_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x0f, 0x43,
	0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x22,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e,
	0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbf, 0x06, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69,
	0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x07, 0x52, 0x0c, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6d,
	0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0a, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x56, 0x0a, 0x0e, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x62, 0x6f,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73,
	0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x70, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x58, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x58, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63,
	0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xeb, 0x06, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69,
	0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x69, 0x73,
	0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6d, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x42, 0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x22,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e,
	0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xa9, 0x06, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63,
	0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e,
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63,
	0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x07, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6d,
	0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0a, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x0e, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x62, 0x6f,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73,
	0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xff, 0x06, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70,
	0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f,
	0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x0e, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x62, 0x6f, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70,
	0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07,
	0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x70, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x0b, 0x6d, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x70, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x2d, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0e, 0x0a, 0x0c,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x18,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x32,
	0x90, 0x07, 0x0a, 0x10, 0x43, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x34, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70,
	0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79,
	0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x74,
	0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x12, 0x2c, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x74,
	0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1e, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f,
	0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79,
	0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x2d, 0x2e, 0x69, 0x74, 0x6f,
	0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x74, 0x6f, 0x5f,
	0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x29, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73,
	0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63,
	0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63, 0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73,
	0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x74, 0x6f, 0x5f, 0x63,
	0x73, 0x5f, 0x70, 0x79, 0x2e, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2e, 0x2f, 0x63, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs_ito_proto_rawDescOnce sync.Once
	file_cs_ito_proto_rawDescData = file_cs_ito_proto_rawDesc
)

func file_cs_ito_proto_rawDescGZIP() []byte {
	file_cs_ito_proto_rawDescOnce.Do(func() {
		file_cs_ito_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs_ito_proto_rawDescData)
	})
	return file_cs_ito_proto_rawDescData
}

var file_cs_ito_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_cs_ito_proto_goTypes = []interface{}{
	(*CodeMsgResponse)(nil),                    // 0: ito_cs_py.cs_ito.CodeMsgResponse
	(*ConfigColumnBatchUpdateListRequest)(nil), // 1: ito_cs_py.cs_ito.ConfigColumnBatchUpdateListRequest
	(*ConfigColumnBatchUpdateRequest)(nil),     // 2: ito_cs_py.cs_ito.ConfigColumnBatchUpdateRequest
	(*ConfigColumnDestroyRequest)(nil),         // 3: ito_cs_py.cs_ito.ConfigColumnDestroyRequest
	(*ConfigColumnListRequest)(nil),            // 4: ito_cs_py.cs_ito.ConfigColumnListRequest
	(*ConfigColumnListResponse)(nil),           // 5: ito_cs_py.cs_ito.ConfigColumnListResponse
	(*ConfigColumnOptionRequest)(nil),          // 6: ito_cs_py.cs_ito.ConfigColumnOptionRequest
	(*ConfigColumnOptionResponse)(nil),         // 7: ito_cs_py.cs_ito.ConfigColumnOptionResponse
	(*ConfigColumnPartialUpdateRequest)(nil),   // 8: ito_cs_py.cs_ito.ConfigColumnPartialUpdateRequest
	(*ConfigColumnRelationOptionRequest)(nil),  // 9: ito_cs_py.cs_ito.ConfigColumnRelationOptionRequest
	(*ConfigColumnRelationOptionResponse)(nil), // 10: ito_cs_py.cs_ito.ConfigColumnRelationOptionResponse
	(*ConfigColumnRequest)(nil),                // 11: ito_cs_py.cs_ito.ConfigColumnRequest
	(*ConfigColumnResponse)(nil),               // 12: ito_cs_py.cs_ito.ConfigColumnResponse
	(*ConfigColumnRetrieveRequest)(nil),        // 13: ito_cs_py.cs_ito.ConfigColumnRetrieveRequest
	(*EmptyRequest)(nil),                       // 14: ito_cs_py.cs_ito.EmptyRequest
	(*LabelNumberValueResponse)(nil),           // 15: ito_cs_py.cs_ito.LabelNumberValueResponse
	(*OptionConfigColumnResponse)(nil),         // 16: ito_cs_py.cs_ito.OptionConfigColumnResponse
	(*SyncConfigColumnRequest)(nil),            // 17: ito_cs_py.cs_ito.SyncConfigColumnRequest
	(*structpb.Struct)(nil),                    // 18: google.protobuf.Struct
	(*emptypb.Empty)(nil),                      // 19: google.protobuf.Empty
}
var file_cs_ito_proto_depIdxs = []int32{
	2,  // 0: ito_cs_py.cs_ito.ConfigColumnBatchUpdateListRequest.results:type_name -> ito_cs_py.cs_ito.ConfigColumnBatchUpdateRequest
	6,  // 1: ito_cs_py.cs_ito.ConfigColumnBatchUpdateRequest.options:type_name -> ito_cs_py.cs_ito.ConfigColumnOptionRequest
	9,  // 2: ito_cs_py.cs_ito.ConfigColumnBatchUpdateRequest.relation_options:type_name -> ito_cs_py.cs_ito.ConfigColumnRelationOptionRequest
	2,  // 3: ito_cs_py.cs_ito.ConfigColumnBatchUpdateRequest.son_column_bos:type_name -> ito_cs_py.cs_ito.ConfigColumnBatchUpdateRequest
	18, // 4: ito_cs_py.cs_ito.ConfigColumnListRequest._filters:type_name -> google.protobuf.Struct
	18, // 5: ito_cs_py.cs_ito.ConfigColumnListRequest._pagination:type_name -> google.protobuf.Struct
	12, // 6: ito_cs_py.cs_ito.ConfigColumnListResponse.results:type_name -> ito_cs_py.cs_ito.ConfigColumnResponse
	6,  // 7: ito_cs_py.cs_ito.ConfigColumnPartialUpdateRequest.options:type_name -> ito_cs_py.cs_ito.ConfigColumnOptionRequest
	9,  // 8: ito_cs_py.cs_ito.ConfigColumnPartialUpdateRequest.relation_options:type_name -> ito_cs_py.cs_ito.ConfigColumnRelationOptionRequest
	11, // 9: ito_cs_py.cs_ito.ConfigColumnPartialUpdateRequest.son_column_bos:type_name -> ito_cs_py.cs_ito.ConfigColumnRequest
	10, // 10: ito_cs_py.cs_ito.ConfigColumnRelationOptionResponse.child:type_name -> ito_cs_py.cs_ito.ConfigColumnRelationOptionResponse
	6,  // 11: ito_cs_py.cs_ito.ConfigColumnRequest.options:type_name -> ito_cs_py.cs_ito.ConfigColumnOptionRequest
	9,  // 12: ito_cs_py.cs_ito.ConfigColumnRequest.relation_options:type_name -> ito_cs_py.cs_ito.ConfigColumnRelationOptionRequest
	11, // 13: ito_cs_py.cs_ito.ConfigColumnRequest.son_column_bos:type_name -> ito_cs_py.cs_ito.ConfigColumnRequest
	7,  // 14: ito_cs_py.cs_ito.ConfigColumnResponse.options:type_name -> ito_cs_py.cs_ito.ConfigColumnOptionResponse
	10, // 15: ito_cs_py.cs_ito.ConfigColumnResponse.relation_options:type_name -> ito_cs_py.cs_ito.ConfigColumnRelationOptionResponse
	12, // 16: ito_cs_py.cs_ito.ConfigColumnResponse.son_column_bos:type_name -> ito_cs_py.cs_ito.ConfigColumnResponse
	15, // 17: ito_cs_py.cs_ito.OptionConfigColumnResponse.project_info:type_name -> ito_cs_py.cs_ito.LabelNumberValueResponse
	1,  // 18: ito_cs_py.cs_ito.CsMainController.BatchUpdateConfigColumn:input_type -> ito_cs_py.cs_ito.ConfigColumnBatchUpdateListRequest
	11, // 19: ito_cs_py.cs_ito.CsMainController.Create:input_type -> ito_cs_py.cs_ito.ConfigColumnRequest
	3,  // 20: ito_cs_py.cs_ito.CsMainController.Destroy:input_type -> ito_cs_py.cs_ito.ConfigColumnDestroyRequest
	4,  // 21: ito_cs_py.cs_ito.CsMainController.List:input_type -> ito_cs_py.cs_ito.ConfigColumnListRequest
	14, // 22: ito_cs_py.cs_ito.CsMainController.OptionConfigColumn:input_type -> ito_cs_py.cs_ito.EmptyRequest
	8,  // 23: ito_cs_py.cs_ito.CsMainController.PartialUpdate:input_type -> ito_cs_py.cs_ito.ConfigColumnPartialUpdateRequest
	13, // 24: ito_cs_py.cs_ito.CsMainController.Retrieve:input_type -> ito_cs_py.cs_ito.ConfigColumnRetrieveRequest
	17, // 25: ito_cs_py.cs_ito.CsMainController.SyncConfigColumn:input_type -> ito_cs_py.cs_ito.SyncConfigColumnRequest
	11, // 26: ito_cs_py.cs_ito.CsMainController.Update:input_type -> ito_cs_py.cs_ito.ConfigColumnRequest
	0,  // 27: ito_cs_py.cs_ito.CsMainController.BatchUpdateConfigColumn:output_type -> ito_cs_py.cs_ito.CodeMsgResponse
	12, // 28: ito_cs_py.cs_ito.CsMainController.Create:output_type -> ito_cs_py.cs_ito.ConfigColumnResponse
	19, // 29: ito_cs_py.cs_ito.CsMainController.Destroy:output_type -> google.protobuf.Empty
	5,  // 30: ito_cs_py.cs_ito.CsMainController.List:output_type -> ito_cs_py.cs_ito.ConfigColumnListResponse
	16, // 31: ito_cs_py.cs_ito.CsMainController.OptionConfigColumn:output_type -> ito_cs_py.cs_ito.OptionConfigColumnResponse
	12, // 32: ito_cs_py.cs_ito.CsMainController.PartialUpdate:output_type -> ito_cs_py.cs_ito.ConfigColumnResponse
	12, // 33: ito_cs_py.cs_ito.CsMainController.Retrieve:output_type -> ito_cs_py.cs_ito.ConfigColumnResponse
	0,  // 34: ito_cs_py.cs_ito.CsMainController.SyncConfigColumn:output_type -> ito_cs_py.cs_ito.CodeMsgResponse
	12, // 35: ito_cs_py.cs_ito.CsMainController.Update:output_type -> ito_cs_py.cs_ito.ConfigColumnResponse
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_cs_ito_proto_init() }
func file_cs_ito_proto_init() {
	if File_cs_ito_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cs_ito_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnBatchUpdateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnBatchUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnPartialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnRelationOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnRelationOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigColumnRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNumberValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionConfigColumnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_ito_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncConfigColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs_ito_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_cs_ito_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs_ito_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cs_ito_proto_goTypes,
		DependencyIndexes: file_cs_ito_proto_depIdxs,
		MessageInfos:      file_cs_ito_proto_msgTypes,
	}.Build()
	File_cs_ito_proto = out.File
	file_cs_ito_proto_rawDesc = nil
	file_cs_ito_proto_goTypes = nil
	file_cs_ito_proto_depIdxs = nil
}
