// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: statistic_mongo.proto

package statisticPb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuNo     *string  `protobuf:"bytes,1,opt,name=bu_no,json=buNo,proto3,oneof" json:"bu_no,omitempty"`
	ShopList []string `protobuf:"bytes,2,rep,name=shop_list,json=shopList,proto3" json:"shop_list,omitempty"`
}

func (x *ChannelRequest) Reset() {
	*x = ChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistic_mongo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRequest) ProtoMessage() {}

func (x *ChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistic_mongo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRequest.ProtoReflect.Descriptor instead.
func (*ChannelRequest) Descriptor() ([]byte, []int) {
	return file_statistic_mongo_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelRequest) GetBuNo() string {
	if x != nil && x.BuNo != nil {
		return *x.BuNo
	}
	return ""
}

func (x *ChannelRequest) GetShopList() []string {
	if x != nil {
		return x.ShopList
	}
	return nil
}

type StatisticCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsNum            *int32   `protobuf:"varint,1,opt,name=goods_num,json=goodsNum,proto3,oneof" json:"goods_num,omitempty"`
	TotalAmount         *float64 `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
	StockoutAmount      *float64 `protobuf:"fixed64,3,opt,name=stockout_amount,json=stockoutAmount,proto3,oneof" json:"stockout_amount,omitempty"`
	PostAmount          *float64 `protobuf:"fixed64,4,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	RefundAmount        *float64 `protobuf:"fixed64,5,opt,name=refund_amount,json=refundAmount,proto3,oneof" json:"refund_amount,omitempty"`
	RefundGoodsAmount   *float64 `protobuf:"fixed64,6,opt,name=refund_goods_amount,json=refundGoodsAmount,proto3,oneof" json:"refund_goods_amount,omitempty"`
	ExchangeGoodsAmount *float64 `protobuf:"fixed64,7,opt,name=exchange_goods_amount,json=exchangeGoodsAmount,proto3,oneof" json:"exchange_goods_amount,omitempty"`
	AggPeriod           *string  `protobuf:"bytes,8,opt,name=agg_period,json=aggPeriod,proto3,oneof" json:"agg_period,omitempty"`
	Category            *string  `protobuf:"bytes,9,opt,name=category,proto3,oneof" json:"category,omitempty"`
}

func (x *StatisticCategoryResponse) Reset() {
	*x = StatisticCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistic_mongo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticCategoryResponse) ProtoMessage() {}

func (x *StatisticCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistic_mongo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticCategoryResponse.ProtoReflect.Descriptor instead.
func (*StatisticCategoryResponse) Descriptor() ([]byte, []int) {
	return file_statistic_mongo_proto_rawDescGZIP(), []int{1}
}

func (x *StatisticCategoryResponse) GetGoodsNum() int32 {
	if x != nil && x.GoodsNum != nil {
		return *x.GoodsNum
	}
	return 0
}

func (x *StatisticCategoryResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *StatisticCategoryResponse) GetStockoutAmount() float64 {
	if x != nil && x.StockoutAmount != nil {
		return *x.StockoutAmount
	}
	return 0
}

func (x *StatisticCategoryResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *StatisticCategoryResponse) GetRefundAmount() float64 {
	if x != nil && x.RefundAmount != nil {
		return *x.RefundAmount
	}
	return 0
}

func (x *StatisticCategoryResponse) GetRefundGoodsAmount() float64 {
	if x != nil && x.RefundGoodsAmount != nil {
		return *x.RefundGoodsAmount
	}
	return 0
}

func (x *StatisticCategoryResponse) GetExchangeGoodsAmount() float64 {
	if x != nil && x.ExchangeGoodsAmount != nil {
		return *x.ExchangeGoodsAmount
	}
	return 0
}

func (x *StatisticCategoryResponse) GetAggPeriod() string {
	if x != nil && x.AggPeriod != nil {
		return *x.AggPeriod
	}
	return ""
}

func (x *StatisticCategoryResponse) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

type StatisticFacetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryByPeriod []*StatisticCategoryResponse `protobuf:"bytes,1,rep,name=categoryByPeriod,proto3" json:"categoryByPeriod,omitempty"`
	CategoryByClass  []*StatisticCategoryResponse `protobuf:"bytes,2,rep,name=categoryByClass,proto3" json:"categoryByClass,omitempty"`
	CategoryBySeries []*StatisticCategoryResponse `protobuf:"bytes,3,rep,name=categoryBySeries,proto3" json:"categoryBySeries,omitempty"`
	CategoryBySize   []*StatisticCategoryResponse `protobuf:"bytes,4,rep,name=categoryBySize,proto3" json:"categoryBySize,omitempty"`
	CategoryByColor  []*StatisticCategoryResponse `protobuf:"bytes,5,rep,name=categoryByColor,proto3" json:"categoryByColor,omitempty"`
	CategorySummary  []*StatisticResponse         `protobuf:"bytes,6,rep,name=categorySummary,proto3" json:"categorySummary,omitempty"`
}

func (x *StatisticFacetResponse) Reset() {
	*x = StatisticFacetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistic_mongo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticFacetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticFacetResponse) ProtoMessage() {}

func (x *StatisticFacetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistic_mongo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticFacetResponse.ProtoReflect.Descriptor instead.
func (*StatisticFacetResponse) Descriptor() ([]byte, []int) {
	return file_statistic_mongo_proto_rawDescGZIP(), []int{2}
}

func (x *StatisticFacetResponse) GetCategoryByPeriod() []*StatisticCategoryResponse {
	if x != nil {
		return x.CategoryByPeriod
	}
	return nil
}

func (x *StatisticFacetResponse) GetCategoryByClass() []*StatisticCategoryResponse {
	if x != nil {
		return x.CategoryByClass
	}
	return nil
}

func (x *StatisticFacetResponse) GetCategoryBySeries() []*StatisticCategoryResponse {
	if x != nil {
		return x.CategoryBySeries
	}
	return nil
}

func (x *StatisticFacetResponse) GetCategoryBySize() []*StatisticCategoryResponse {
	if x != nil {
		return x.CategoryBySize
	}
	return nil
}

func (x *StatisticFacetResponse) GetCategoryByColor() []*StatisticCategoryResponse {
	if x != nil {
		return x.CategoryByColor
	}
	return nil
}

func (x *StatisticFacetResponse) GetCategorySummary() []*StatisticResponse {
	if x != nil {
		return x.CategorySummary
	}
	return nil
}

type StatisticFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateStart     string            `protobuf:"bytes,1,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	DateEnd       string            `protobuf:"bytes,2,opt,name=date_end,json=dateEnd,proto3" json:"date_end,omitempty"`
	StatisticMode string            `protobuf:"bytes,3,opt,name=statistic_mode,json=statisticMode,proto3" json:"statistic_mode,omitempty"`
	StatisticType string            `protobuf:"bytes,4,opt,name=statistic_type,json=statisticType,proto3" json:"statistic_type,omitempty"`
	ShopList      []string          `protobuf:"bytes,5,rep,name=shop_list,json=shopList,proto3" json:"shop_list,omitempty"`
	Channel       []*ChannelRequest `protobuf:"bytes,6,rep,name=channel,proto3" json:"channel,omitempty"`
	ProdBrand     *string           `protobuf:"bytes,7,opt,name=prod_brand,json=prodBrand,proto3,oneof" json:"prod_brand,omitempty"`
	ProdCat       []string          `protobuf:"bytes,8,rep,name=prod_cat,json=prodCat,proto3" json:"prod_cat,omitempty"`
	ProdSeries    []string          `protobuf:"bytes,9,rep,name=prod_series,json=prodSeries,proto3" json:"prod_series,omitempty"`
	ProdSize      []string          `protobuf:"bytes,10,rep,name=prod_size,json=prodSize,proto3" json:"prod_size,omitempty"`
	ProdColor     []string          `protobuf:"bytes,11,rep,name=prod_color,json=prodColor,proto3" json:"prod_color,omitempty"`
}

func (x *StatisticFilterRequest) Reset() {
	*x = StatisticFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistic_mongo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticFilterRequest) ProtoMessage() {}

func (x *StatisticFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistic_mongo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticFilterRequest.ProtoReflect.Descriptor instead.
func (*StatisticFilterRequest) Descriptor() ([]byte, []int) {
	return file_statistic_mongo_proto_rawDescGZIP(), []int{3}
}

func (x *StatisticFilterRequest) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *StatisticFilterRequest) GetDateEnd() string {
	if x != nil {
		return x.DateEnd
	}
	return ""
}

func (x *StatisticFilterRequest) GetStatisticMode() string {
	if x != nil {
		return x.StatisticMode
	}
	return ""
}

func (x *StatisticFilterRequest) GetStatisticType() string {
	if x != nil {
		return x.StatisticType
	}
	return ""
}

func (x *StatisticFilterRequest) GetShopList() []string {
	if x != nil {
		return x.ShopList
	}
	return nil
}

func (x *StatisticFilterRequest) GetChannel() []*ChannelRequest {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *StatisticFilterRequest) GetProdBrand() string {
	if x != nil && x.ProdBrand != nil {
		return *x.ProdBrand
	}
	return ""
}

func (x *StatisticFilterRequest) GetProdCat() []string {
	if x != nil {
		return x.ProdCat
	}
	return nil
}

func (x *StatisticFilterRequest) GetProdSeries() []string {
	if x != nil {
		return x.ProdSeries
	}
	return nil
}

func (x *StatisticFilterRequest) GetProdSize() []string {
	if x != nil {
		return x.ProdSize
	}
	return nil
}

func (x *StatisticFilterRequest) GetProdColor() []string {
	if x != nil {
		return x.ProdColor
	}
	return nil
}

type StatisticListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatisticListRequest) Reset() {
	*x = StatisticListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistic_mongo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticListRequest) ProtoMessage() {}

func (x *StatisticListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistic_mongo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticListRequest.ProtoReflect.Descriptor instead.
func (*StatisticListRequest) Descriptor() ([]byte, []int) {
	return file_statistic_mongo_proto_rawDescGZIP(), []int{4}
}

type StatisticListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*StatisticResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Count   int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StatisticListResponse) Reset() {
	*x = StatisticListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistic_mongo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticListResponse) ProtoMessage() {}

func (x *StatisticListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistic_mongo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticListResponse.ProtoReflect.Descriptor instead.
func (*StatisticListResponse) Descriptor() ([]byte, []int) {
	return file_statistic_mongo_proto_rawDescGZIP(), []int{5}
}

func (x *StatisticListResponse) GetResults() []*StatisticResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *StatisticListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type StatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsNum            *int32   `protobuf:"varint,1,opt,name=goods_num,json=goodsNum,proto3,oneof" json:"goods_num,omitempty"`
	TotalAmount         *float64 `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount,proto3,oneof" json:"total_amount,omitempty"`
	StockoutAmount      *float64 `protobuf:"fixed64,3,opt,name=stockout_amount,json=stockoutAmount,proto3,oneof" json:"stockout_amount,omitempty"`
	PostAmount          *float64 `protobuf:"fixed64,4,opt,name=post_amount,json=postAmount,proto3,oneof" json:"post_amount,omitempty"`
	RefundAmount        *float64 `protobuf:"fixed64,5,opt,name=refund_amount,json=refundAmount,proto3,oneof" json:"refund_amount,omitempty"`
	RefundGoodsAmount   *float64 `protobuf:"fixed64,6,opt,name=refund_goods_amount,json=refundGoodsAmount,proto3,oneof" json:"refund_goods_amount,omitempty"`
	ExchangeGoodsAmount *float64 `protobuf:"fixed64,7,opt,name=exchange_goods_amount,json=exchangeGoodsAmount,proto3,oneof" json:"exchange_goods_amount,omitempty"`
}

func (x *StatisticResponse) Reset() {
	*x = StatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistic_mongo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticResponse) ProtoMessage() {}

func (x *StatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistic_mongo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticResponse.ProtoReflect.Descriptor instead.
func (*StatisticResponse) Descriptor() ([]byte, []int) {
	return file_statistic_mongo_proto_rawDescGZIP(), []int{6}
}

func (x *StatisticResponse) GetGoodsNum() int32 {
	if x != nil && x.GoodsNum != nil {
		return *x.GoodsNum
	}
	return 0
}

func (x *StatisticResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *StatisticResponse) GetStockoutAmount() float64 {
	if x != nil && x.StockoutAmount != nil {
		return *x.StockoutAmount
	}
	return 0
}

func (x *StatisticResponse) GetPostAmount() float64 {
	if x != nil && x.PostAmount != nil {
		return *x.PostAmount
	}
	return 0
}

func (x *StatisticResponse) GetRefundAmount() float64 {
	if x != nil && x.RefundAmount != nil {
		return *x.RefundAmount
	}
	return 0
}

func (x *StatisticResponse) GetRefundGoodsAmount() float64 {
	if x != nil && x.RefundGoodsAmount != nil {
		return *x.RefundGoodsAmount
	}
	return 0
}

func (x *StatisticResponse) GetExchangeGoodsAmount() float64 {
	if x != nil && x.ExchangeGoodsAmount != nil {
		return *x.ExchangeGoodsAmount
	}
	return 0
}

var File_statistic_mongo_proto protoreflect.FileDescriptor

var file_statistic_mongo_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x22, 0x51, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x05,
	0x62, 0x75, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x75, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x75, 0x5f, 0x6e, 0x6f, 0x22, 0xb9, 0x04,
	0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02,
	0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x05, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x61, 0x67, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x82, 0x05, 0x0a, 0x16, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x66,
	0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x64, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5e,
	0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xb5,
	0x03, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d,
	0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd0, 0x03,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x06, 0x52, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x32, 0x98, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x39, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x61, 0x63, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e,
	0x2e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x50, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_statistic_mongo_proto_rawDescOnce sync.Once
	file_statistic_mongo_proto_rawDescData = file_statistic_mongo_proto_rawDesc
)

func file_statistic_mongo_proto_rawDescGZIP() []byte {
	file_statistic_mongo_proto_rawDescOnce.Do(func() {
		file_statistic_mongo_proto_rawDescData = protoimpl.X.CompressGZIP(file_statistic_mongo_proto_rawDescData)
	})
	return file_statistic_mongo_proto_rawDescData
}

var file_statistic_mongo_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_statistic_mongo_proto_goTypes = []interface{}{
	(*ChannelRequest)(nil),            // 0: statistic_service.statistic_mongo.ChannelRequest
	(*StatisticCategoryResponse)(nil), // 1: statistic_service.statistic_mongo.StatisticCategoryResponse
	(*StatisticFacetResponse)(nil),    // 2: statistic_service.statistic_mongo.StatisticFacetResponse
	(*StatisticFilterRequest)(nil),    // 3: statistic_service.statistic_mongo.StatisticFilterRequest
	(*StatisticListRequest)(nil),      // 4: statistic_service.statistic_mongo.StatisticListRequest
	(*StatisticListResponse)(nil),     // 5: statistic_service.statistic_mongo.StatisticListResponse
	(*StatisticResponse)(nil),         // 6: statistic_service.statistic_mongo.StatisticResponse
}
var file_statistic_mongo_proto_depIdxs = []int32{
	1,  // 0: statistic_service.statistic_mongo.StatisticFacetResponse.categoryByPeriod:type_name -> statistic_service.statistic_mongo.StatisticCategoryResponse
	1,  // 1: statistic_service.statistic_mongo.StatisticFacetResponse.categoryByClass:type_name -> statistic_service.statistic_mongo.StatisticCategoryResponse
	1,  // 2: statistic_service.statistic_mongo.StatisticFacetResponse.categoryBySeries:type_name -> statistic_service.statistic_mongo.StatisticCategoryResponse
	1,  // 3: statistic_service.statistic_mongo.StatisticFacetResponse.categoryBySize:type_name -> statistic_service.statistic_mongo.StatisticCategoryResponse
	1,  // 4: statistic_service.statistic_mongo.StatisticFacetResponse.categoryByColor:type_name -> statistic_service.statistic_mongo.StatisticCategoryResponse
	6,  // 5: statistic_service.statistic_mongo.StatisticFacetResponse.categorySummary:type_name -> statistic_service.statistic_mongo.StatisticResponse
	0,  // 6: statistic_service.statistic_mongo.StatisticFilterRequest.channel:type_name -> statistic_service.statistic_mongo.ChannelRequest
	6,  // 7: statistic_service.statistic_mongo.StatisticListResponse.results:type_name -> statistic_service.statistic_mongo.StatisticResponse
	4,  // 8: statistic_service.statistic_mongo.StatisticController.List:input_type -> statistic_service.statistic_mongo.StatisticListRequest
	3,  // 9: statistic_service.statistic_mongo.StatisticController.Statistic:input_type -> statistic_service.statistic_mongo.StatisticFilterRequest
	5,  // 10: statistic_service.statistic_mongo.StatisticController.List:output_type -> statistic_service.statistic_mongo.StatisticListResponse
	2,  // 11: statistic_service.statistic_mongo.StatisticController.Statistic:output_type -> statistic_service.statistic_mongo.StatisticFacetResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_statistic_mongo_proto_init() }
func file_statistic_mongo_proto_init() {
	if File_statistic_mongo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_statistic_mongo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistic_mongo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistic_mongo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticFacetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistic_mongo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistic_mongo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistic_mongo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistic_mongo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_statistic_mongo_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_statistic_mongo_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_statistic_mongo_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_statistic_mongo_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_statistic_mongo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_statistic_mongo_proto_goTypes,
		DependencyIndexes: file_statistic_mongo_proto_depIdxs,
		MessageInfos:      file_statistic_mongo_proto_msgTypes,
	}.Build()
	File_statistic_mongo_proto = out.File
	file_statistic_mongo_proto_rawDesc = nil
	file_statistic_mongo_proto_goTypes = nil
	file_statistic_mongo_proto_depIdxs = nil
}
