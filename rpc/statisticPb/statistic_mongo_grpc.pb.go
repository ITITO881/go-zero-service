// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: statistic_mongo.proto

package statisticPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatisticController_List_FullMethodName      = "/statistic_service.statistic_mongo.StatisticController/List"
	StatisticController_Statistic_FullMethodName = "/statistic_service.statistic_mongo.StatisticController/Statistic"
)

// StatisticControllerClient is the client API for StatisticController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticControllerClient interface {
	List(ctx context.Context, in *StatisticListRequest, opts ...grpc.CallOption) (*StatisticListResponse, error)
	Statistic(ctx context.Context, in *StatisticFilterRequest, opts ...grpc.CallOption) (*StatisticFacetResponse, error)
}

type statisticControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticControllerClient(cc grpc.ClientConnInterface) StatisticControllerClient {
	return &statisticControllerClient{cc}
}

func (c *statisticControllerClient) List(ctx context.Context, in *StatisticListRequest, opts ...grpc.CallOption) (*StatisticListResponse, error) {
	out := new(StatisticListResponse)
	err := c.cc.Invoke(ctx, StatisticController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticControllerClient) Statistic(ctx context.Context, in *StatisticFilterRequest, opts ...grpc.CallOption) (*StatisticFacetResponse, error) {
	out := new(StatisticFacetResponse)
	err := c.cc.Invoke(ctx, StatisticController_Statistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticControllerServer is the server API for StatisticController service.
// All implementations must embed UnimplementedStatisticControllerServer
// for forward compatibility
type StatisticControllerServer interface {
	List(context.Context, *StatisticListRequest) (*StatisticListResponse, error)
	Statistic(context.Context, *StatisticFilterRequest) (*StatisticFacetResponse, error)
	mustEmbedUnimplementedStatisticControllerServer()
}

// UnimplementedStatisticControllerServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticControllerServer struct {
}

func (UnimplementedStatisticControllerServer) List(context.Context, *StatisticListRequest) (*StatisticListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStatisticControllerServer) Statistic(context.Context, *StatisticFilterRequest) (*StatisticFacetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistic not implemented")
}
func (UnimplementedStatisticControllerServer) mustEmbedUnimplementedStatisticControllerServer() {}

// UnsafeStatisticControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticControllerServer will
// result in compilation errors.
type UnsafeStatisticControllerServer interface {
	mustEmbedUnimplementedStatisticControllerServer()
}

func RegisterStatisticControllerServer(s grpc.ServiceRegistrar, srv StatisticControllerServer) {
	s.RegisterService(&StatisticController_ServiceDesc, srv)
}

func _StatisticController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticControllerServer).List(ctx, req.(*StatisticListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticController_Statistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticControllerServer).Statistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticController_Statistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticControllerServer).Statistic(ctx, req.(*StatisticFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticController_ServiceDesc is the grpc.ServiceDesc for StatisticController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistic_service.statistic_mongo.StatisticController",
	HandlerType: (*StatisticControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StatisticController_List_Handler,
		},
		{
			MethodName: "Statistic",
			Handler:    _StatisticController_Statistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistic_mongo.proto",
}
